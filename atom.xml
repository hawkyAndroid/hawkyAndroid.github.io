<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hawky的博客</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hawkyAndroid.github.io/"/>
  <updated>2018-11-17T15:41:23.410Z</updated>
  <id>http://hawkyAndroid.github.io/</id>
  
  <author>
    <name>Hawky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android View之阴阳鱼</title>
    <link href="http://hawkyAndroid.github.io/2018/11/17/summary-view-yyfish/"/>
    <id>http://hawkyAndroid.github.io/2018/11/17/summary-view-yyfish/</id>
    <published>2018-11-17T15:34:55.000Z</published>
    <updated>2018-11-17T15:41:23.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、绘制最外层空心圆及白色实心圆。</p><p>2、绘制左半圆。</p><p>3、添加 1/2 上半圆。</p><p>4、减去 1/2 下半圆。</p><p>5、最后单独绘制两个 1/8 小圆。</p><h3 id="（二）阴阳鱼的绘制"><a href="#（二）阴阳鱼的绘制" class="headerlink" title="（二）阴阳鱼的绘制"></a>（二）阴阳鱼的绘制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 阴阳鱼</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YYFishView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="comment">// 左半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mLeftCirclePath;</span><br><span class="line">    <span class="comment">// 上半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mTopHalfCirclePath;</span><br><span class="line">    <span class="comment">// 下半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mBottomHalfCirclePath;</span><br><span class="line">    <span class="comment">// 阴阳鱼绘制区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mFishRegion;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最外层圆的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YYFishView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YYFishView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、构造（初始化）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mLeftCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line">        mTopHalfCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line">        mBottomHalfCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mRadius = DensityUtils.dip2px(mContext, <span class="number">100</span>);</span><br><span class="line">        mFishRegion = <span class="keyword">new</span> RectF(-mRadius, -mRadius, mRadius, mRadius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、获取绘制区域宽高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、绘制图形</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制最外层空心圆</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        mPaint.setColor(Color.GRAY);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制最外层实心圆</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaint.setColor(Color.WHITE);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为防止每次看的效果可能不一致，这里要重置Path</span></span><br><span class="line">        mLeftCirclePath.reset();</span><br><span class="line">        mTopHalfCirclePath.reset();</span><br><span class="line">        mBottomHalfCirclePath.reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制左半圆</span></span><br><span class="line">        mLeftCirclePath.addArc(mFishRegion, <span class="number">90</span>, <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 1/2 上半圆</span></span><br><span class="line">        mTopHalfCirclePath.addCircle(<span class="number">0</span>, -mRadius / <span class="number">2</span>, mRadius / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        mLeftCirclePath.op(mTopHalfCirclePath, Path.Op.UNION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减去 1/2 下半圆</span></span><br><span class="line">        mBottomHalfCirclePath.addCircle(<span class="number">0</span>, mRadius / <span class="number">2</span>, mRadius / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        mLeftCirclePath.op(mBottomHalfCirclePath, Path.Op.DIFFERENCE);</span><br><span class="line"></span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawPath(mLeftCirclePath, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后再在Y轴绘制两个小圆</span></span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, mRadius / <span class="number">2</span>, mRadius / <span class="number">8</span>, mPaint);</span><br><span class="line">        mPaint.setColor(Color.WHITE);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mRadius / <span class="number">2</span>, mRadius / <span class="number">8</span>, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、绘制最外层空心圆及白色实心圆。&lt;/p&gt;
&lt;p&gt;2、绘制左半圆。&lt;/p&gt;
&lt;p&gt;3、添加 1/2 
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之心形</title>
    <link href="http://hawkyAndroid.github.io/2018/11/16/summary-view-heart/"/>
    <id>http://hawkyAndroid.github.io/2018/11/16/summary-view-heart/</id>
    <published>2018-11-16T12:15:35.000Z</published>
    <updated>2018-11-16T15:44:10.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）最优因子"><a href="#（一）最优因子" class="headerlink" title="（一）最优因子"></a>（一）最优因子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对于有n段的贝塞尔曲线来说，到控制点的最优距离(因子)是(4/3)*tan(π/(2n))。</span><br><span class="line"></span><br><span class="line">圆从坐标系来看，由4段圆弧组成，同时对应4个（数据）点。</span><br><span class="line">所以圆的数据点到控制点的最优距离因子为 DIS_FACTOR = (4/3)*tan(π/8)，</span><br><span class="line">由三角形倍角公式：tana/2 = sina/(1+cosa);可得tanπ/8 = √2 - 1;</span><br><span class="line">即 DIS_FACTOR =  (4/3)*(√2 - 1) = 0.5522847498307933984022516...</span><br></pre></td></tr></table></figure><h3 id="（二）心形的实例"><a href="#（二）心形的实例" class="headerlink" title="（二）心形的实例"></a>（二）心形的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 心形（由4段三阶贝塞尔曲线组成）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据点到达控制点的最佳距离因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DIST_FACTOR = <span class="number">0.552284749831</span>;</span><br><span class="line">    <span class="comment">// 心形变化次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> mTotalCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="comment">// "心形"曲线</span></span><br><span class="line">    <span class="keyword">private</span> Path mHeartPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中心点坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerY;</span><br><span class="line">    <span class="comment">// 圆的半径（可由参数传入）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line">    <span class="comment">// 数据点与控制之间的差值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDifference;</span><br><span class="line">    <span class="comment">// 当前执行次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCurrentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4个数据点</span></span><br><span class="line">    <span class="keyword">private</span> PointF[] mDataPoint = <span class="keyword">new</span> PointF[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 8个控制点</span></span><br><span class="line">    <span class="keyword">private</span> PointF[] mControlPoint = <span class="keyword">new</span> PointF[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeartView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeartView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHeartPath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mRadius = DensityUtils.dip2px(mContext, <span class="number">100</span>);</span><br><span class="line">        mDifference = (<span class="keyword">float</span>) (mRadius * DIST_FACTOR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据点</span></span><br><span class="line">        <span class="comment">// A</span></span><br><span class="line">        mDataPoint[<span class="number">0</span>] = <span class="keyword">new</span> PointF(mRadius, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// B</span></span><br><span class="line">        mDataPoint[<span class="number">1</span>] = <span class="keyword">new</span> PointF(<span class="number">0</span>, -mRadius);</span><br><span class="line">        <span class="comment">// C</span></span><br><span class="line">        mDataPoint[<span class="number">2</span>] = <span class="keyword">new</span> PointF(-mRadius, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// D</span></span><br><span class="line">        mDataPoint[<span class="number">3</span>] = <span class="keyword">new</span> PointF(<span class="number">0</span>, mRadius);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化控制点（从最右边逆时针起，开始描点）</span></span><br><span class="line">        <span class="comment">// A1、A2</span></span><br><span class="line">        mControlPoint[<span class="number">0</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y - mDifference);</span><br><span class="line">        mControlPoint[<span class="number">1</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">1</span>].x + mDifference, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        <span class="comment">// B1、B2</span></span><br><span class="line">        mControlPoint[<span class="number">2</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">1</span>].x - mDifference, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        mControlPoint[<span class="number">3</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y - mDifference);</span><br><span class="line">        <span class="comment">// C1、C2</span></span><br><span class="line">        mControlPoint[<span class="number">4</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y + mDifference);</span><br><span class="line">        mControlPoint[<span class="number">5</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">3</span>].x - mDifference, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        <span class="comment">// D1、D2</span></span><br><span class="line">        mControlPoint[<span class="number">6</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">3</span>].x + mDifference, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        mControlPoint[<span class="number">7</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y + mDifference);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.centerX = w / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.centerY = h / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        DebugLog.e(<span class="string">"绘制开始-------1111----"</span>);</span><br><span class="line">        <span class="keyword">if</span> (stopFlag) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(centerX, centerY);</span><br><span class="line">        <span class="comment">// 绘制背景色</span></span><br><span class="line">        canvas.drawColor(Color.CYAN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制坐标系</span></span><br><span class="line">        drawCoordinateSystem(canvas);</span><br><span class="line">        <span class="comment">// 描点</span></span><br><span class="line">        drawPoints(canvas);</span><br><span class="line">        <span class="comment">// 绘制顶点(A、B、C、D)文本</span></span><br><span class="line">        drawPointText(canvas);</span><br><span class="line">        <span class="comment">// 绘制数据点与控制点进行连线</span></span><br><span class="line">        drawLines(canvas);</span><br><span class="line">        <span class="comment">// 绘制心形曲线</span></span><br><span class="line">        drawHeartCurve(canvas);</span><br><span class="line"></span><br><span class="line">        mCurrentCount++;</span><br><span class="line">        <span class="keyword">if</span> (mCurrentCount &lt; mTotalCount) &#123;</span><br><span class="line">            <span class="comment">// 最上面1个数据点上下移</span></span><br><span class="line">            mDataPoint[<span class="number">1</span>].y += <span class="number">200</span> / mTotalCount;</span><br><span class="line">            <span class="comment">// 最下面2个控制点往上移</span></span><br><span class="line">            mControlPoint[<span class="number">5</span>].y -= <span class="number">160</span> / mTotalCount;</span><br><span class="line">            mControlPoint[<span class="number">6</span>].y -= <span class="number">160</span> / mTotalCount;</span><br><span class="line">            <span class="comment">// 最下面旁边2个控制点往内移</span></span><br><span class="line">            mControlPoint[<span class="number">4</span>].x += <span class="number">80</span> / mTotalCount;</span><br><span class="line">            mControlPoint[<span class="number">7</span>].x -= <span class="number">80</span> / mTotalCount;</span><br><span class="line">            postInvalidateDelayed(<span class="number">100L</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 重置关键点坐标</span></span><br><span class="line">            mCurrentCount = <span class="number">0</span>;</span><br><span class="line">            mDataPoint[<span class="number">1</span>].y = -mRadius;</span><br><span class="line">            mControlPoint[<span class="number">5</span>].y = mDataPoint[<span class="number">3</span>].y;</span><br><span class="line">            mControlPoint[<span class="number">6</span>].y = mDataPoint[<span class="number">3</span>].y;</span><br><span class="line">            mControlPoint[<span class="number">4</span>].x = mDataPoint[<span class="number">2</span>].x;</span><br><span class="line">            mControlPoint[<span class="number">7</span>].x = mDataPoint[<span class="number">0</span>].x;</span><br><span class="line">            postInvalidateDelayed(<span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DebugLog.e(<span class="string">"绘制结束-------222----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCoordinateSystem</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">3F</span>);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        canvas.drawLine(-centerX, <span class="number">0</span>, centerX, <span class="number">0</span>, mPaint);</span><br><span class="line">        canvas.drawLine(<span class="number">0</span>, -centerY, <span class="number">0</span>, centerY, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPoints</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">20F</span>);</span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawPoint(<span class="number">0</span>, <span class="number">0</span>, mPaint);</span><br><span class="line">        <span class="comment">// 绘制数据点</span></span><br><span class="line">        <span class="keyword">for</span> (PointF pointF : mDataPoint) &#123;</span><br><span class="line">            canvas.drawPoint(pointF.x, pointF.y, mPaint);<span class="comment">// A、B、C、D</span></span><br><span class="line">        &#125;</span><br><span class="line">        mPaint.setColor(Color.BLUE);</span><br><span class="line">        <span class="comment">// 绘制控制点</span></span><br><span class="line">        <span class="keyword">for</span> (PointF pointF : mControlPoint) &#123;</span><br><span class="line">            canvas.drawPoint(pointF.x, pointF.y, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPointText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">2F</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        mPaint.setTextSize(DensityUtils.sp2px(mContext, <span class="number">8F</span>));</span><br><span class="line">        <span class="keyword">float</span> fontH = DensityUtils.getFontHeight(mPaint);</span><br><span class="line">        <span class="keyword">char</span>[] peakChar = <span class="string">"ABCD"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDataPoint.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x, mDataPoint[i].y - fontH / <span class="number">2</span>, mPaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x - mPaint.measureText(String.valueOf(peakChar[i])), mDataPoint[i].y + fontH, mPaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x, mDataPoint[i].y + fontH, mPaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        mPaint.setColor(Color.GRAY);</span><br><span class="line">        <span class="comment">// A</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">0</span>].x, mControlPoint[<span class="number">0</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">7</span>].x, mControlPoint[<span class="number">7</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// B</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y, mControlPoint[<span class="number">1</span>].x, mControlPoint[<span class="number">1</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y, mControlPoint[<span class="number">2</span>].x, mControlPoint[<span class="number">2</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// C</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">3</span>].x, mControlPoint[<span class="number">3</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">4</span>].x, mControlPoint[<span class="number">4</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// D</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y, mControlPoint[<span class="number">5</span>].x, mControlPoint[<span class="number">5</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y, mControlPoint[<span class="number">6</span>].x, mControlPoint[<span class="number">6</span>].y, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHeartCurve</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">225</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        mHeartPath.reset();</span><br><span class="line">        mHeartPath.moveTo(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">0</span>].x, mControlPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">1</span>].x, mControlPoint[<span class="number">1</span>].y, mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">2</span>].x, mControlPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">3</span>].x, mControlPoint[<span class="number">3</span>].y, mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">4</span>].x, mControlPoint[<span class="number">4</span>].y, mControlPoint[<span class="number">5</span>].x, mControlPoint[<span class="number">5</span>].y, mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">6</span>].x, mControlPoint[<span class="number">6</span>].y, mControlPoint[<span class="number">7</span>].x, mControlPoint[<span class="number">7</span>].y, mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y);</span><br><span class="line">        canvas.drawPath(mHeartPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        stopFlag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）最优因子&quot;&gt;&lt;a href=&quot;#（一）最优因子&quot; class=&quot;headerlink&quot; title=&quot;（一）最优因子&quot;&gt;&lt;/a&gt;（一）最优因子&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之蜘蛛网</title>
    <link href="http://hawkyAndroid.github.io/2018/11/14/summary-view-spider/"/>
    <id>http://hawkyAndroid.github.io/2018/11/14/summary-view-spider/</id>
    <published>2018-11-14T11:10:35.000Z</published>
    <updated>2018-11-15T16:17:31.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、绘制多个正多边形。</p><p>2、绘制连接顶点并过原点的直线。</p><p>3、绘制顶点上的文本。</p><p>4、绘制各维度的辐射区域。</p><h3 id="（二）SpiderView的实例"><a href="#（二）SpiderView的实例" class="headerlink" title="（二）SpiderView的实例"></a>（二）SpiderView的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 蜘蛛网（正多边形）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiderView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 顶点文本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String mPeakTitles = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="comment">// 每条线上(过原点)的各维度值(可由参数传入)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] mDimenData = &#123;<span class="number">90.0</span>, <span class="number">80.5</span>, <span class="number">100.0</span>, <span class="number">50.9</span>, <span class="number">20.3</span>, <span class="number">50.2</span>, <span class="number">30.7</span>, <span class="number">70.8</span>&#125;;</span><br><span class="line">    <span class="comment">// 维度最大阀值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> mMaxThreshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 蜘蛛网区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正多边形最大层外接圆半径(多边形的最大半径)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line">    <span class="comment">// 多边形边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mEdgeCount = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 多边形个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPolygonCount = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 每条边对应的圆心角（正数时为逆时针）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCentralAngle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpiderView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、构造（初始化）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpiderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mCentralAngle = (<span class="keyword">float</span>) ((Math.PI * <span class="number">2</span>) / mEdgeCount);</span><br><span class="line">        mMaxThreshold = getMaxThreshold();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getMaxThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> value : mDimenData) &#123;</span><br><span class="line">            result = Math.max(value, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、获取控件最终大小（在onLayout中获取可能更精确）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">        <span class="keyword">this</span>.mRadius = (w / <span class="number">2</span>) * <span class="number">0.9f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、绘制控件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 设置画布背景色</span></span><br><span class="line">        canvas.drawColor(Color.CYAN);</span><br><span class="line">        <span class="comment">// 绘制多个多边形</span></span><br><span class="line">        drawPolygon(canvas);</span><br><span class="line">        <span class="comment">// 绘制多条直线</span></span><br><span class="line">        drawLines(canvas);</span><br><span class="line">        <span class="comment">// 绘制文本</span></span><br><span class="line">        drawText(canvas);</span><br><span class="line">        <span class="comment">// 绘制辐射区域</span></span><br><span class="line">        drawRegion(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPolygon</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">3F</span>);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 绘制多个多边形</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mPolygonCount; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> currentR = (mRadius / mPolygonCount) * i;<span class="comment">// 当前多边形半径</span></span><br><span class="line">            mPath.reset();</span><br><span class="line">            mPath.moveTo(currentR, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 绘制一个多边形（连接多条边）</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mEdgeCount; j++) &#123;</span><br><span class="line">                <span class="keyword">float</span> px = (<span class="keyword">float</span>) (currentR * Math.cos(mCentralAngle * j));</span><br><span class="line">                <span class="keyword">float</span> py = (<span class="keyword">float</span>) (currentR * Math.sin(mCentralAngle * j));</span><br><span class="line">                mPath.lineTo(px, py);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawPath(mPath, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            mPath.reset();</span><br><span class="line">            mPath.moveTo(<span class="number">0</span>, <span class="number">0</span>);<span class="comment">// 起点为原点(0,0)</span></span><br><span class="line">            <span class="keyword">float</span> px = (<span class="keyword">float</span>) (mRadius * Math.cos(mCentralAngle * i));</span><br><span class="line">            <span class="keyword">float</span> py = (<span class="keyword">float</span>) (mRadius * Math.sin(mCentralAngle * i));</span><br><span class="line">            mPath.lineTo(px, py);</span><br><span class="line">            canvas.drawPath(mPath, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        mPaint.setTextSize(DensityUtils.sp2px(mContext, <span class="number">10F</span>));</span><br><span class="line">        <span class="keyword">char</span>[] titles = mPeakTitles.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算画笔高度</span></span><br><span class="line">        Paint.FontMetrics fm = mPaint.getFontMetrics();</span><br><span class="line">        <span class="keyword">float</span> fontH = (<span class="keyword">float</span>) Math.ceil(fm.descent - fm.ascent);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> angle = mCentralAngle * i;</span><br><span class="line">            <span class="comment">// 将半径延长一些再描点</span></span><br><span class="line">            <span class="keyword">float</span> x = (<span class="keyword">float</span>) ((mRadius + fontH / <span class="number">2</span>) * Math.cos(angle));</span><br><span class="line">            <span class="keyword">float</span> y = (<span class="keyword">float</span>) ((mRadius + fontH / <span class="number">2</span>) * Math.sin(angle));</span><br><span class="line">            <span class="keyword">float</span> fontW = mPaint.measureText(String.valueOf(titles[i]));  <span class="comment">// 文本长度</span></span><br><span class="line">            canvas.drawText(titles, i, <span class="number">1</span>, x - fontW / <span class="number">2</span>, y + fontH / <span class="number">2</span>, mPaint);<span class="comment">// A、B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            if (angle &gt;= 0 &amp;&amp; angle &lt;= Math.PI / 2) &#123;//  第四象限 A、B</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; Math.PI / 2 &amp;&amp; angle &lt;= Math.PI) &#123;// 三  C、D</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; Math.PI &amp;&amp; angle &lt;= 3 * Math.PI / 2) &#123;// 二 E、F</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; 3 * Math.PI / 2 &amp;&amp; angle &lt;= 2 * Math.PI) &#123;// 一  G、H</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">200</span>, <span class="number">74</span>, <span class="number">132</span>, <span class="number">251</span>));</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPath.reset();</span><br><span class="line">        <span class="keyword">float</span> circleRadius = DensityUtils.dip2px(mContext, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            <span class="comment">// 过原点的线长</span></span><br><span class="line">            <span class="keyword">double</span> lineLen = (mDimenData[i] / mMaxThreshold) * mRadius;</span><br><span class="line">            <span class="comment">// 确保在直线上</span></span><br><span class="line">            <span class="keyword">float</span> x = (<span class="keyword">float</span>) (lineLen * Math.cos(mCentralAngle * i));</span><br><span class="line">            <span class="keyword">float</span> y = (<span class="keyword">float</span>) (lineLen * Math.sin(mCentralAngle * i));</span><br><span class="line">            <span class="comment">// 描点</span></span><br><span class="line">            canvas.drawCircle(x, y, circleRadius, mPaint);</span><br><span class="line">            <span class="comment">// 连线</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                mPath.moveTo(x, y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPath.lineTo(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.drawPath(mPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ********************************************** //</span></span><br><span class="line">    <span class="comment">// *******  下面可以暴露一些数据接口、监听 ******** //</span></span><br><span class="line">    <span class="comment">// ********************************************** //</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置各维度值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dimenData 维度数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDimenData</span><span class="params">(<span class="keyword">double</span>[] dimenData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDimenData = dimenData;</span><br><span class="line">        <span class="keyword">this</span>.mMaxThreshold = getMaxThreshold();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、绘制多个正多边形。&lt;/p&gt;
&lt;p&gt;2、绘制连接顶点并过原点的直线。&lt;/p&gt;
&lt;p&gt;3、绘制顶点上
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android 属性动画</title>
    <link href="http://hawkyAndroid.github.io/2018/11/12/summary-animaton-01/"/>
    <id>http://hawkyAndroid.github.io/2018/11/12/summary-animaton-01/</id>
    <published>2018-11-12T12:34:55.000Z</published>
    <updated>2018-11-17T15:37:21.817Z</updated>
    
    <content type="html"><![CDATA[<p>……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;……&lt;/p&gt;

      
    
    </summary>
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/categories/Animation/"/>
    
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Android View之饼图</title>
    <link href="http://hawkyAndroid.github.io/2018/11/09/summary-view-pie/"/>
    <id>http://hawkyAndroid.github.io/2018/11/09/summary-view-pie/</id>
    <published>2018-11-09T14:20:55.000Z</published>
    <updated>2018-11-15T16:17:38.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、先计算数据总和，再计算出个各扇形(饼图)所占的百分比，就可以得到(1圈)360份里各扇形所占的份数(即扫过的角度sweepAngle)。</p><p>2、设置一个初始角startAngle，然后根据份数去循环叠加扫过的角度sweepAngle，进而更新扇形的起始角，这样就可以绘制一个完整的闭环饼图了。</p><h3 id="（二）Pie的实例"><a href="#（二）Pie的实例" class="headerlink" title="（二）Pie的实例"></a>（二）Pie的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 饼图PieData</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * private String name;// 名称</span></span><br><span class="line"><span class="comment"> * private float value;// 数值</span></span><br><span class="line"><span class="comment"> * private float percent;// 百分比</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * private int color;// 颜色</span></span><br><span class="line"><span class="comment"> * private float angle;// 角度（sweepAngle）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据也可来源于外部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mColors = &#123;Color.RED, Color.GREEN, Color.BLUE, Color.CYAN&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// View的宽、高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始角度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle;</span><br><span class="line">    <span class="comment">// 饼图绘制区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mRectF = <span class="keyword">new</span> RectF();</span><br><span class="line">    <span class="comment">// 多条饼图数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PieData&gt; mDataList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 抗锯齿</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);<span class="comment">// 填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置起始角度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartAngle</span><span class="params">(<span class="keyword">float</span> startAngle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mStartAngle = startAngle;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置（更新）数据UI</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;PieData&gt; list)</span> </span>&#123;</span><br><span class="line">        initData(list);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据（主要目的：设置百分比、初始角度）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">(List&lt;PieData&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList = list;</span><br><span class="line">        <span class="keyword">float</span> sumValue = <span class="number">0</span>;<span class="comment">// 数据总和</span></span><br><span class="line">        <span class="keyword">for</span> (PieData pie : list) &#123;</span><br><span class="line">            sumValue += pie.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (PieData pie : list) &#123;</span><br><span class="line">            <span class="keyword">float</span> percent = pie.getValue() / sumValue;</span><br><span class="line">            <span class="keyword">float</span> angle = percent * <span class="number">360</span>;</span><br><span class="line">            pie.setPercent(percent);<span class="comment">// 设置饼块百分比</span></span><br><span class="line">            pie.setAngle(angle);<span class="comment">// 设置饼块角度(正数为顺时针、负数为逆时针)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mWidth = w;</span><br><span class="line">        mHeight = h;</span><br><span class="line">        <span class="keyword">float</span> r = (<span class="keyword">float</span>) ((Math.min(mWidth, mHeight)) / <span class="number">2</span> * <span class="number">0.9</span>);<span class="comment">// 饼图半径</span></span><br><span class="line">        mRectF.set(-r, -r, r, r);<span class="comment">// 饼图绘制区域</span></span><br><span class="line">        DebugLog.e(<span class="string">"mWidth:"</span> + mWidth + <span class="string">", mHeight:"</span> + mHeight + <span class="string">", r:"</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">float</span> currentStartAngle = mStartAngle; <span class="comment">// 当前起始角度</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>); <span class="comment">// 将画布坐标原点移动到中心位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = mDataList.size(); i &lt; n; i++) &#123;</span><br><span class="line">            PieData data = mDataList.get(i);</span><br><span class="line">            mPaint.setColor(mColors[i]);</span><br><span class="line">            <span class="comment">// 绘制扇形</span></span><br><span class="line">            canvas.drawArc(mRectF, currentStartAngle, data.getAngle(), <span class="keyword">true</span>, mPaint);</span><br><span class="line">            currentStartAngle += data.getAngle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、先计算数据总和，再计算出个各扇形(饼图)所占的百分比，就可以得到(1圈)360份里各扇形所占的份
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之贝赛尔曲线</title>
    <link href="http://hawkyAndroid.github.io/2018/11/09/summary-view-path-bezier/"/>
    <id>http://hawkyAndroid.github.io/2018/11/09/summary-view-path-bezier/</id>
    <published>2018-11-09T11:20:55.000Z</published>
    <updated>2018-11-15T16:20:36.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）-概念-Bezier-curve"><a href="#（一）-概念-Bezier-curve" class="headerlink" title="（一） 概念(Bézier curve)"></a>（一） <a href="http://www.cnblogs.com/jay-dong/archive/2012/09/26/2704188.html" target="_blank" rel="noopener">概念(Bézier curve)</a></h3><p>  贝塞尔曲线是图形开发中的一个重要工具，通过三个点(起点、控制点和终点)确定一条平滑的曲线，又称贝兹曲线或贝济埃曲线。贝塞尔曲线由线段与节点组成，节点是可拖动的支点，线段像是可伸缩的皮筋。其作用是实时控制曲线状态，并可以通过改变控制点的状态实时让曲线进行平滑的状态变化。</p><h3 id="（二）绘制曲线用法"><a href="#（二）绘制曲线用法" class="headerlink" title="（二）绘制曲线用法"></a>（二）绘制曲线用法</h3><p>  绘制一条二阶贝塞尔曲线，必须调用 moveTo()方法定义起点，再调用quadTo(float x1, float y1, float x2, float y2)方法绘制贝塞尔曲线，其中（x1，y1）是控制点，（x2，y2）是终点。说明：控制点的作用是确定曲线的弯曲程度。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制二阶贝塞尔曲线（1个控制点）</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.moveTo(x, y);<span class="comment">// 起始点(x,y)</span></span><br><span class="line">path.quadTo(x1, y1, x2, y2);<span class="comment">// 控制点(x1,y1)，终点(x2,y2)</span></span><br><span class="line">canvas.drawPath(path, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制三阶贝塞尔曲线（2个控制点）</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.moveTo(x, y);<span class="comment">// 起始点(x,y)</span></span><br><span class="line">path.cubicTo(<span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">float</span> x2, <span class="keyword">float</span> y2, <span class="keyword">float</span> x3, <span class="keyword">float</span> y3);<span class="comment">// 控制点(x1,y1)、(x2,y2)，终点(x3,y3)</span></span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><h3 id="（三）二阶贝塞尔曲线的实例"><a href="#（三）二阶贝塞尔曲线的实例" class="headerlink" title="（三）二阶贝塞尔曲线的实例"></a>（三）二阶贝塞尔曲线的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 二阶贝塞尔曲线</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuadBezierView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中心点坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据点（起点）</span></span><br><span class="line">    <span class="keyword">private</span> PointF startPoint;</span><br><span class="line">    <span class="comment">// 数据点（终点）</span></span><br><span class="line">    <span class="keyword">private</span> PointF endPoint;</span><br><span class="line">    <span class="comment">// 控制点</span></span><br><span class="line">    <span class="keyword">private</span> PointF controlPoint;</span><br><span class="line">    <span class="comment">// 圆点半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuadBezierView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuadBezierView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        startPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">        endPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">        controlPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">        mRadius = DensityUtils.dip2px(mContext, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.centerX = w / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.centerY = h / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        startPoint.x = centerX - <span class="number">300</span>;</span><br><span class="line">        startPoint.y = centerY;</span><br><span class="line"></span><br><span class="line">        endPoint.x = centerX + <span class="number">300</span>;</span><br><span class="line">        endPoint.y = centerY;</span><br><span class="line"></span><br><span class="line">        controlPoint.x = centerX;</span><br><span class="line">        controlPoint.y = centerY - <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 触摸事件：控制点坐标随着手指变化，进而影响贝塞尔曲线的平滑状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                controlPoint.x = event.getX();</span><br><span class="line">                controlPoint.y = event.getY();</span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制数据点和控制点</span></span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">20F</span>);</span><br><span class="line">        canvas.drawCircle(startPoint.x, startPoint.y, mRadius, mPaint);</span><br><span class="line">        canvas.drawCircle(endPoint.x, endPoint.y, mRadius, mPaint);</span><br><span class="line">        canvas.drawCircle(controlPoint.x, controlPoint.y, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制控制连线</span></span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        canvas.drawLine(startPoint.x, startPoint.y, controlPoint.x, controlPoint.y, mPaint);</span><br><span class="line">        canvas.drawLine(endPoint.x, endPoint.y, controlPoint.x, controlPoint.y, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制贝塞尔曲线</span></span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">225</span>, <span class="number">237</span>, <span class="number">77</span>, <span class="number">52</span>));</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">10F</span>);</span><br><span class="line">        mPath.reset();</span><br><span class="line">        mPath.moveTo(startPoint.x, startPoint.y);</span><br><span class="line">        mPath.quadTo(controlPoint.x, controlPoint.y, endPoint.x, endPoint.y);</span><br><span class="line">        canvas.drawPath(mPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        DebugLog.e(<span class="string">"处理线程、动画等资源的回收操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）-概念-Bezier-curve&quot;&gt;&lt;a href=&quot;#（一）-概念-Bezier-curve&quot; class=&quot;headerlink&quot; title=&quot;（一） 概念(Bézier curve)&quot;&gt;&lt;/a&gt;（一） &lt;a href=&quot;http://www.cnbl
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Path</title>
    <link href="http://hawkyAndroid.github.io/2018/11/08/summary-view-path/"/>
    <id>http://hawkyAndroid.github.io/2018/11/08/summary-view-path/</id>
    <published>2018-11-08T12:23:55.000Z</published>
    <updated>2018-11-17T15:31:28.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Path添加线条"><a href="#（一）Path添加线条" class="headerlink" title="（一）Path添加线条"></a>（一）Path添加线条</h3><p>注意：Path中任何线段都是有方向性的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 将画笔移动到点A（x，y）的位置，使用的是绝对定位。</span></span><br><span class="line">path.moveTo(<span class="keyword">float</span> x, <span class="keyword">float</span> y);</span><br><span class="line"><span class="comment">// 与moveTo类似。区别是重置上一次操作的最后一个点(上个点成为无效点)</span></span><br><span class="line">path.setLastPoint(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"><span class="comment">// 新点在上一个点的基础上偏移（dx，dy），使用的是相对定位(X=x+dx)。</span></span><br><span class="line">path.rMoveTo(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"><span class="comment">// 将画笔移动到点A（x，y）的位置，并在上一个点与当前点之前画一条直线。</span></span><br><span class="line"><span class="comment">// 使用的是绝对定位。起点默认为坐标系原点。</span></span><br><span class="line">path.lineTo(<span class="keyword">float</span> x, <span class="keyword">float</span> y);</span><br><span class="line"><span class="comment">// 新点在上一个点的基础上偏移（dx，dy）,并在上一个点与当前点之前画一条直线。</span></span><br><span class="line"><span class="comment">// 使用的是相对定位(X=x+dx)。</span></span><br><span class="line">path.rLineTo(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"><span class="comment">// 在第一个点和最后一个点之前画一条直线，形成闭合区域。</span></span><br><span class="line">path.close();</span><br></pre></td></tr></table></figure><h3 id="（二）Path添加图形"><a href="#（二）Path添加图形" class="headerlink" title="（二）Path添加图形"></a>（二）Path添加图形</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  往 Path 对象中添加矩形。其中最后一个参数为矩形的绘制方向(重要)：</span></span><br><span class="line"><span class="comment">//  CW 表示顺时针，CCW 表示逆时针。</span></span><br><span class="line">path.addRect(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), Path.Direction.CCW);</span><br><span class="line"><span class="comment">//  往 Path 对象中添加圆角矩形。四个角弧度相同(rx,ry)。</span></span><br><span class="line">path.addRoundRect(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), rx, ry, Path.Direction.CW);</span><br><span class="line"><span class="comment">//  往 Path 对象中添加圆角矩形。四个角分别定义不同的弧线弧度。</span></span><br><span class="line">path.addRoundRect(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), <span class="keyword">float</span>[] radii, Path.Direction.CW);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  往 Path 对象中添加椭圆(矩形的内切圆)。</span></span><br><span class="line">path.addOval(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), Path.Direction.CW);</span><br><span class="line"><span class="comment">//  往 Path 对象中添加圆。</span></span><br><span class="line">path.addCircle(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> radius, Path.Direction.CW);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  往 Path 对象中添加一段弧。正数为顺时针，负数为逆时针。</span></span><br><span class="line">path.addArc(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle);</span><br><span class="line"><span class="comment">// 添加一个圆弧到path(如果圆弧的起点和上次最后一个坐标点不相同，就连接两个点)</span></span><br><span class="line">path.arcTo(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制弧线曲线</span></span><br><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.moveTo(px, py);<span class="comment">// 起始点(x,y)</span></span><br><span class="line"><span class="comment">// 参数 forceMoveTo 为 true 时，表示开始一个新的图形，不和上一个点进行连接，为 false 时才和上一个点连接。</span></span><br><span class="line">path.arcTo(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle, <span class="keyword">boolean</span> forceMoveTo);</span><br></pre></td></tr></table></figure><h3 id="（三）Path高级用法"><a href="#（三）Path高级用法" class="headerlink" title="（三）Path高级用法"></a>（三）Path高级用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断path是否为空（是否有内容）</span></span><br><span class="line">path.isEmpty();</span><br><span class="line"><span class="comment">// 判断path是否是一个矩形（推荐与computeBounds配合使用）</span></span><br><span class="line">path.isRect(RectF rect);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算Path的边界（计算结果存放在rectF中）</span></span><br><span class="line">RectF rectF = <span class="keyword">new</span> RectF();</span><br><span class="line">path.computeBounds(rectF, <span class="keyword">boolean</span> exact);<span class="comment">// 参数exact已失效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// path位移。移动(dx,dy)</span></span><br><span class="line">path.offset(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"><span class="comment">// path位移，移动(dx,dy)。注意：如果dst中存在内容时，则dst中原有的内容无效;</span></span><br><span class="line"><span class="comment">// 反之存放平移后的path。</span></span><br><span class="line">path.offset(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy, Path dst);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并两个Path</span></span><br><span class="line">path.addPath(Path src);</span><br><span class="line"><span class="comment">// 将src进行了位移(dx,dy)之后再添加进当前path中</span></span><br><span class="line">path.addPath(Path src, <span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"><span class="comment">// 先进行Matrix矩阵变换，再将src添加到当前path</span></span><br><span class="line">path.addPath(Path src, Matrix matrix);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Path重置（不保留内部数据结构，但会保留FillType）</span></span><br><span class="line">path.reset();</span><br><span class="line"><span class="comment">// Path重置 (会保留内部的数据结构，但不保留FillType)</span></span><br><span class="line">path.rewind();</span><br></pre></td></tr></table></figure><h3 id="（四）Path布尔操作（Op）"><a href="#（四）Path布尔操作（Op）" class="headerlink" title="（四）Path布尔操作（Op）"></a>（四）Path布尔操作（Op）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图形运算（求差集）</span></span><br><span class="line">pathA.op(pathB, Path.Op.DIFFERENCE);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">运算规则</th><th style="text-align:center">名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">Path.Op.DIFFERENCE</td><td style="text-align:center">差集</td><td style="text-align:center">图形 A 减去与图形 B 重叠的区域后A余下的区域</td></tr><tr><td style="text-align:center">Path.Op.INTERSECT</td><td style="text-align:center">交集</td><td style="text-align:center">图形 A 和图形 B 的重叠区域</td></tr><tr><td style="text-align:center">Path.Op.REVERSE_DIFFERENCE</td><td style="text-align:center">反差集</td><td style="text-align:center">图形 B 减去与图形A重叠的区域后B余下的区域</td></tr><tr><td style="text-align:center">Path.Op.UNION</td><td style="text-align:center">并集</td><td style="text-align:center">包含了图形 A 和图形 B 的所有区域</td></tr><tr><td style="text-align:center">Path.Op.XOR</td><td style="text-align:center">补集(异或)</td><td style="text-align:center">即图形 A 和图形 B 的所有区域减去他们的重叠区域后余下的区域</td></tr></tbody></table><h3 id="（五）Path填充类型（FillType）"><a href="#（五）Path填充类型（FillType）" class="headerlink" title="（五）Path填充类型（FillType）"></a>（五）Path填充类型（FillType）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Path有4种填充类型 **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Path填充模式为奇偶模式</span></span><br><span class="line">path.setFillType(Path.FillType.EVEN_ODD);</span><br><span class="line"><span class="comment">// 设置Path填充模式为反奇偶模式</span></span><br><span class="line">path.setFillType(Path.FillType.INVERSE_EVEN_ODD);</span><br><span class="line"><span class="comment">// 设置Path填充模式为(不为0)环绕数模式</span></span><br><span class="line">path.setFillType(Path.FillType.WINDING);</span><br><span class="line"><span class="comment">// 设置Path填充模式为反(不为0)环绕数模式</span></span><br><span class="line">path.setFillType(Path.FillType.INVERSE_WINDING);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前填充规则</span></span><br><span class="line">path.getFillType();</span><br><span class="line"><span class="comment">// 判断是否是反向(INVERSE)规则</span></span><br><span class="line">path.isInverseFillTyp();</span><br><span class="line"><span class="comment">// 切换填充规则(即原有规则与反向规则之间相互切换)</span></span><br><span class="line">path.toggleInverseFillType();</span><br></pre></td></tr></table></figure><p>  使用说明：画笔Paint要设置为填充样式(Paint.Style.FILL)才有效。<br>  其中EVEN_ODD和INVERSE_EVEN_ODD、WINDING和INVERSE_WINDING互为反向填充。</p><p>1&gt;、EVEN_ODD（画笔填充的是补集XOR）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.addCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">path.setFillType(Path.FillType.EVEN_ODD);<span class="comment">// 设置Path填充模式为奇偶模式</span></span><br><span class="line">path.addRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>), Path.Direction.CW);</span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><p>2&gt;、INVERSE_EVEN_ODD（画笔填充的是交集和被矩形边界包裹的部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.addCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">path.setFillType(Path.FillType.INVERSE_EVEN_ODD);<span class="comment">// 设置Path填充模式为反奇偶模式</span></span><br><span class="line">path.addCircle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">canvas.drawPath(path, mPaint);</span><br></pre></td></tr></table></figure><p>3&gt;、WINDING（画笔填充的是并集UNION）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.addCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">path.setFillType(Path.FillType.INVERSE_EVEN_ODD);<span class="comment">// 设置Path填充模式为环绕数模式</span></span><br><span class="line">path.addCircle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">canvas.drawPath(path, mPaint);</span><br></pre></td></tr></table></figure><p>4&gt;、INVERSE_WINDING（画笔填充的是去掉并集UNION外，被矩形边界包裹的部分）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Path path = <span class="keyword">new</span> Path();</span><br><span class="line">path.addCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">path.setFillType(Path.FillType.INVERSE_EVEN_ODD);<span class="comment">// 设置Path填充模式为反环绕数模式</span></span><br><span class="line">path.addCircle(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, Path.Direction.CW);</span><br><span class="line">canvas.drawPath(path, mPaint);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Path添加线条&quot;&gt;&lt;a href=&quot;#（一）Path添加线条&quot; class=&quot;headerlink&quot; title=&quot;（一）Path添加线条&quot;&gt;&lt;/a&gt;（一）Path添加线条&lt;/h3&gt;&lt;p&gt;注意：Path中任何线段都是有方向性的。&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Color</title>
    <link href="http://hawkyAndroid.github.io/2018/11/08/summary-view-color/"/>
    <id>http://hawkyAndroid.github.io/2018/11/08/summary-view-color/</id>
    <published>2018-11-08T11:55:25.000Z</published>
    <updated>2018-11-08T12:01:20.690Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、Color模式"><a href="#1、Color模式" class="headerlink" title="1、Color模式"></a>1、Color模式</h3><table><thead><tr><th style="text-align:center">Color模式</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">Alpha8</td><td style="text-align:center">仅有透明通道(8位)</td></tr><tr><td style="text-align:center">RGB565</td><td style="text-align:center">屏幕默认模式(16位)</td></tr><tr><td style="text-align:center">ARGB4444</td><td style="text-align:center">四通道低精度(16位)</td></tr><tr><td style="text-align:center">ARGB8888</td><td style="text-align:center">四通道高精度(32位)</td></tr></tbody></table><pre><code>说明：如ARGB4444则表示有四个通道(ARGB)，每个对应的通道均用4位来描述。其中 A 、R 、G 、B 的取值范围均为0~255，即16进制的0x00~0xff。A从0x00到0xff表示从透明到不透明。RGB从0x00到0xff表示颜色从浅到深。需要注意的是：当RGB全取最小值(0或0x000000)时颜色为黑色，全取最大值(255或0xffffff)时颜色为白色。Alpha通道主要在两个图像混合的时候生效。</code></pre><h3 id="2、Color的使用"><a href="#2、Color的使用" class="headerlink" title="2、Color的使用"></a>2、Color的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 系统自带绿色</span></span><br><span class="line"><span class="keyword">int</span> color = Color.GREEN;</span><br><span class="line"><span class="comment">// 半透明绿色</span></span><br><span class="line"><span class="keyword">int</span> color = Color.argb(<span class="number">127</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);  </span><br><span class="line"><span class="comment">// 带有透明度的绿色</span></span><br><span class="line"><span class="keyword">int</span> color = <span class="number">0x9900FF00</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、Color模式&quot;&gt;&lt;a href=&quot;#1、Color模式&quot; class=&quot;headerlink&quot; title=&quot;1、Color模式&quot;&gt;&lt;/a&gt;1、Color模式&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:ce
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Paint和Canvas</title>
    <link href="http://hawkyAndroid.github.io/2018/11/07/summary-view-paint-canvas/"/>
    <id>http://hawkyAndroid.github.io/2018/11/07/summary-view-paint-canvas/</id>
    <published>2018-11-07T14:15:25.000Z</published>
    <updated>2018-11-14T11:05:55.563Z</updated>
    
    <content type="html"><![CDATA[<h4 id="（一）Paint的属性及使用"><a href="#（一）Paint的属性及使用" class="headerlink" title="（一）Paint的属性及使用"></a>（一）Paint的属性及使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Paint paint = <span class="keyword">new</span> Paint();<span class="comment">// 创建画笔</span></span><br><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 抗锯齿</span></span><br><span class="line">paint.setColor(Color.GREEN);<span class="comment">// 颜色</span></span><br><span class="line">paint.setStyle(Paint.Style.FILL);<span class="comment">// 填充</span></span><br><span class="line">paint.setTextAlign(Paint.Align.LEFT);<span class="comment">// 向左对齐</span></span><br><span class="line">paint.setTextSize(<span class="number">20f</span>);<span class="comment">// 字体大小</span></span><br><span class="line">paint.setTextSkewX(-<span class="number">0.5f</span>);<span class="comment">// 倾斜程度0-1</span></span><br><span class="line">paint.setUnderlineText(<span class="keyword">true</span>);<span class="comment">// 下划线</span></span><br><span class="line">paint.setFakeBoldText(<span class="keyword">true</span>);<span class="comment">// 加粗</span></span><br><span class="line">paint.setStrokeWidth(<span class="number">20f</span>);<span class="comment">// 笔粗</span></span><br><span class="line">paint.setStrokeJoin(Paint.Join.ROUND);<span class="comment">// 拐角样式</span></span><br><span class="line">paint.setStrokeCap(Paint.Cap.ROUND);<span class="comment">// 落笔样式</span></span><br><span class="line">paint.reset();<span class="comment">//  重置画笔</span></span><br></pre></td></tr></table></figure><h4 id="（二）Canvas的属性及使用"><a href="#（二）Canvas的属性及使用" class="headerlink" title="（二）Canvas的属性及使用"></a>（二）Canvas的属性及使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bitmap = Bitmap.createBitmap(<span class="number">400</span>, <span class="number">400</span>, Bitmap.Config.ARGB_8888);</span><br><span class="line">Canvas canvas = <span class="keyword">new</span> Canvas(bitmap);<span class="comment">// 创建位图作为画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制位图</span></span><br><span class="line">canvas.drawBitmap(bitmap, left, top, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 绘制缩放后的位图</span></span><br><span class="line">canvas.drawBitmap(bmp, srcRect, dstRect, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用单一颜色填充整个画布</span></span><br><span class="line">canvas.drawColor(Color.RED);</span><br><span class="line">canvas.drawRGB(<span class="keyword">int</span> r, <span class="keyword">int</span> g, <span class="keyword">int</span> b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制点(可绘制出正方形)</span></span><br><span class="line">canvas.drawPoint(x, y, paint);</span><br><span class="line"><span class="comment">// 绘制连续多个点。</span></span><br><span class="line"><span class="comment">// 该方法的参数 pts 是一个数组，从下标 0 开始每 2 个数确定一个点。多余的元素会忽略。</span></span><br><span class="line">canvas.drawPoints(pts, paint);</span><br><span class="line"><span class="comment">// 绘制连续若干个点。</span></span><br><span class="line"><span class="comment">// 从 pts 数组中的第 offset 处开始取出 count 个数字，以 2 个数为一组确实一个点。忽略多余的元素。</span></span><br><span class="line">canvas.drawPoints(pts, offset, count, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制直线。在（startX, startY）和（stopX, stopY）两个点之间绘制一条直线</span></span><br><span class="line">canvas.drawLine(<span class="keyword">float</span> startX, <span class="keyword">float</span> startY, <span class="keyword">float</span> stopX, <span class="keyword">float</span> stopY, paint);</span><br><span class="line"><span class="comment">// 绘制多条直线。（每4个点绘制一条线）</span></span><br><span class="line">canvas.drawLines(<span class="keyword">float</span>[] pts, paint);</span><br><span class="line"><span class="comment">// 绘制多条直线。</span></span><br><span class="line"><span class="comment">// 从 pts 数组中的第 offset 处开始取出 count 个数字，以 4 个数为一组确实一个点。忽略多余的元素。</span></span><br><span class="line">canvas.drawLines(<span class="keyword">float</span>[] pts, <span class="keyword">int</span> offset, <span class="keyword">int</span> count, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制矩形 其中：Rect的4个参数为外接矩形的两个点坐标</span></span><br><span class="line">canvas.drawRect(<span class="keyword">new</span> Rect(left, top, right, bottom), paint);<span class="comment">// drawRectF</span></span><br><span class="line"><span class="comment">// 绘制圆角矩形</span></span><br><span class="line"><span class="comment">// left、top、right、bottom 构建一个矩形，rx、ry 分别是圆角处的水平半径和垂直半径。</span></span><br><span class="line">canvas.drawRoundRect(<span class="keyword">new</span> RectF(left, top, right, bottom), <span class="keyword">float</span> rx, <span class="keyword">float</span> ry, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制椭圆(可绘制出圆)。参数和(外切)矩形一致</span></span><br><span class="line">canvas.drawOval(<span class="keyword">new</span> RectF(left, top, right, bottom), paint);</span><br><span class="line"><span class="comment">// 绘制圆形。其中：（cx、cy）为圆心坐标，radius 为圆的半径</span></span><br><span class="line">canvas.drawCircle(<span class="keyword">float</span> cx, <span class="keyword">float</span> cy, <span class="keyword">float</span> radius, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 弧线和扇形本质上更是相似。概念：弧线是椭圆上的一段，而扇形则是将弧线的两个端点和椭圆中心点使用线条连接形成的闭合区域。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制扇形或弧线。参数 startAngle 表示起始角度，sweepAngle 表示扇形或弧线所占的角度，正数表示顺时针，负数表示逆时针。</span></span><br><span class="line"><span class="comment">// useCenter 参数询问是否要使用中心点，为true 表示扇形，为 false 表示弧线。</span></span><br><span class="line">canvas.drawArc(<span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom), <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle, <span class="keyword">boolean</span> useCenter, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定的位置开始绘制文本。</span></span><br><span class="line">canvas.drawText(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, <span class="keyword">float</span> x, <span class="keyword">float</span> y, Paint paint);</span><br><span class="line"><span class="comment">// 沿着 Path 定义好的路径绘制文本。参数 hOffset 和 vOffset 用于定义文字离 Path 的水平偏移量和垂直偏移量。</span></span><br><span class="line">canvas.drawTextOnPath(<span class="keyword">char</span>[] text, <span class="keyword">int</span> index, <span class="keyword">int</span> count, Path path, <span class="keyword">float</span> hOffset, floatvOffset, paint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Picture来录制（保存）Canvas的操作及状态</span></span><br><span class="line">Canvas canvas = picture.beginRecording(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line"><span class="comment">// 结束录制</span></span><br><span class="line">picture.endRecording();</span><br><span class="line"><span class="comment">// 绘制矢量图（可能需要关闭硬件加速）注意：是在onDraw方法中绘制</span></span><br><span class="line">canvas.drawPicture(picture)</span><br><span class="line"><span class="comment">// 绘制矢量图（可能需要关闭硬件加速）</span></span><br><span class="line">canvas.drawPicture(picture, <span class="keyword">new</span> RectF(<span class="keyword">float</span> left, <span class="keyword">float</span> top, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Picture包装成PictureDrawable，并设置绘制区域。</span></span><br><span class="line">PictureDrawable drawable = <span class="keyword">new</span> PictureDrawable(picture);</span><br><span class="line">drawable.setBounds(<span class="keyword">new</span> Rect(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom));</span><br><span class="line">drawable.draw(canvas);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制连线</span></span><br><span class="line">canvas.drawPath(path, paint);</span><br></pre></td></tr></table></figure><h4 id="（三）Canvas的高级用法"><a href="#（三）Canvas的高级用法" class="headerlink" title="（三）Canvas的高级用法"></a>（三）Canvas的高级用法</h4><pre><code>1、Canvas的操作的目的是为了让绘制图形更加简单。所有的画布操作都只影响后续的绘制，对之前已经绘制过的内容没有影响。2、画布Canvas是由多个图层layer构成的。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存当前画布的全部状态（快照）</span></span><br><span class="line">canvas.save();</span><br><span class="line"><span class="comment">// 根据参数saveFlags保存画布的部分状态</span></span><br><span class="line">canvas.save(<span class="keyword">int</span> saveFlags);</span><br><span class="line"><span class="comment">// 回滚到上一次保存的状态（回滚）</span></span><br><span class="line">canvas.restore();</span><br><span class="line"><span class="comment">// 按照画布指定位置的状态进行恢复</span></span><br><span class="line">canvas.restoreToCount(<span class="keyword">int</span> saveCount);</span><br><span class="line"><span class="comment">// 获取画布的保存次数</span></span><br><span class="line">canvas.getSaveCount();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> --- Canvas线性变换的几个操作---</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、画布移动。基于画布当前位置的相对移动（坐标系原点也随之移动）。</span></span><br><span class="line"><span class="comment">// 移动是可以叠加的。</span></span><br><span class="line">canvas.translate(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、画布缩放(sx,sy)。其中sx,sy为缩放比，正数表示缩放;</span></span><br><span class="line"><span class="comment">// 负数则表示缩放后并根据中心轴翻转。</span></span><br><span class="line"><span class="comment">// 注意：缩放中心默认就是坐标系原点。缩放是可以叠加的。</span></span><br><span class="line">canvas.scale(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy);</span><br><span class="line"><span class="comment">// 画布缩放(sx,sy)，缩放中心点为(px,py)</span></span><br><span class="line">canvas.scale(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy, <span class="keyword">float</span> px, <span class="keyword">float</span> py);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、画布旋转。degrees为顺时针旋转，负数为逆时针旋转。</span></span><br><span class="line">canvas.rotate(<span class="keyword">float</span> degrees);</span><br><span class="line"><span class="comment">// 画布旋转。先旋转degrees角度，再偏移(px,py)单位。旋转是可以叠加的。</span></span><br><span class="line">canvas.rotate(<span class="keyword">float</span> degrees, <span class="keyword">float</span> px, <span class="keyword">float</span> py);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、画布斜切。其中sx是将画布在x方向上倾斜相应的角度，sx倾斜角度的tan值。sy同理。</span></span><br><span class="line"><span class="comment">// 即画布变换后：X = sx*y + x;  Y = sy*x + y。</span></span><br><span class="line">canvas.skew(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;（一）Paint的属性及使用&quot;&gt;&lt;a href=&quot;#（一）Paint的属性及使用&quot; class=&quot;headerlink&quot; title=&quot;（一）Paint的属性及使用&quot;&gt;&lt;/a&gt;（一）Paint的属性及使用&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之坐标系</title>
    <link href="http://hawkyAndroid.github.io/2018/11/07/summary-view-coordinate_system/"/>
    <id>http://hawkyAndroid.github.io/2018/11/07/summary-view-coordinate_system/</id>
    <published>2018-11-07T13:56:15.000Z</published>
    <updated>2018-11-08T11:25:53.387Z</updated>
    
    <content type="html"><![CDATA[<h4 id="（一）View的坐标系"><a href="#（一）View的坐标系" class="headerlink" title="（一）View的坐标系"></a>（一）View的坐标系</h4><p>  – 说明： View的坐标系统是相对于父控件而言的。屏幕左上角为坐标原点：向右为x轴增大方向，向下为y轴增大方向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getTop();     <span class="comment">//获取子View左上角距父View顶部的距离</span></span><br><span class="line"></span><br><span class="line">getLeft();    <span class="comment">//获取子View左上角距父View左侧的距离</span></span><br><span class="line"></span><br><span class="line">getBottom();  <span class="comment">//获取子View右下角距父View顶部的距离</span></span><br><span class="line"></span><br><span class="line">getRight();   <span class="comment">//获取子View右下角距父View左侧的距离</span></span><br></pre></td></tr></table></figure><h4 id="（二）MotionEvent中-get-和-getRaw-的区别"><a href="#（二）MotionEvent中-get-和-getRaw-的区别" class="headerlink" title="（二）MotionEvent中 get 和 getRaw 的区别"></a>（二）MotionEvent中 get 和 getRaw 的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.getX();     <span class="comment">//触摸点相对于其所在组件(自身)坐标系的坐标</span></span><br><span class="line">event.getY();</span><br><span class="line"></span><br><span class="line">event.getRawX();  <span class="comment">//触摸点相对于屏幕默认坐标系的坐标</span></span><br><span class="line">event.getRawY();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;（一）View的坐标系&quot;&gt;&lt;a href=&quot;#（一）View的坐标系&quot; class=&quot;headerlink&quot; title=&quot;（一）View的坐标系&quot;&gt;&lt;/a&gt;（一）View的坐标系&lt;/h4&gt;&lt;p&gt;  – 说明： View的坐标系统是相对于父控件而言的。屏幕左上角为
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之绘制篇</title>
    <link href="http://hawkyAndroid.github.io/2018/11/05/summary-view-drawing-01/"/>
    <id>http://hawkyAndroid.github.io/2018/11/05/summary-view-drawing-01/</id>
    <published>2018-11-05T11:42:15.000Z</published>
    <updated>2018-11-15T16:18:16.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-MeasureSpec"><a href="#一-MeasureSpec" class="headerlink" title="(一) MeasureSpec"></a>(一) MeasureSpec</h3><p>  MeasureSpec是一个32位int值。高2位代表SpecMode测量模式，低30位代表SpecSize相应模式下的测量规格大小。</p><h4 id="1-1-SpecMode分为三类"><a href="#1-1-SpecMode分为三类" class="headerlink" title="1.1 SpecMode分为三类"></a>1.1 SpecMode分为三类</h4><p>1、UNSPECIFIED：父容器不限制View的大小。</p><p>2、EXACTLY：对应于LayoutParams中的match_parent和具体的数值。</p><p>3、AT_MOST：对应于LayoutParams中的wrap_content。</p><h4 id="1-2-MeasureSpec与LayoutParams的对应关系"><a href="#1-2-MeasureSpec与LayoutParams的对应关系" class="headerlink" title="1.2 MeasureSpec与LayoutParams的对应关系"></a>1.2 MeasureSpec与LayoutParams的对应关系</h4><p>在测量View的时候，系统会将LayoutParams在父容器的约束下转换成对应的MeasureSpec，然后根据MeasureSpec确定View测量后的宽/高。</p><h3 id="二-View的工作流程"><a href="#二-View的工作流程" class="headerlink" title="(二) View的工作流程"></a>(二) View的工作流程</h3><h4 id="2-1-measure：确定View的测量宽-高"><a href="#2-1-measure：确定View的测量宽-高" class="headerlink" title="2.1 measure：确定View的测量宽/高"></a>2.1 measure：确定View的测量宽/高</h4><p>最佳实践是在onLayout方法中去获取View的测量宽/高 or 最终宽/高。注意：View的measure过程和Activity的生命周期方法不是同步执行的。</p><h4 id="2-2-layout：ViewGroup用来确定子元素的位置。"><a href="#2-2-layout：ViewGroup用来确定子元素的位置。" class="headerlink" title="2.2 layout：ViewGroup用来确定子元素的位置。"></a>2.2 layout：ViewGroup用来确定子元素的位置。</h4><p>– 注意：layout方法确定View本身的位置，而onLayout方法则会确定所有子元素的位置。</p><h4 id="2-3-draw：将View绘制到屏幕上"><a href="#2-3-draw：将View绘制到屏幕上" class="headerlink" title="2.3 draw：将View绘制到屏幕上"></a>2.3 draw：将View绘制到屏幕上</h4><pre><code>1、绘制背景 background.draw(canvas)2、绘制自己(onDraw)3、绘制children(dispatchDraw)4、绘制装饰(onDrawScrollsBars)</code></pre><h4 id="2-4-自定义View的一般流程"><a href="#2-4-自定义View的一般流程" class="headerlink" title="2.4 自定义View的一般流程"></a>2.4 自定义View的一般流程</h4><table><thead><tr><th style="text-align:center">步骤(序号)</th><th style="text-align:center">操作</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">构造函数</td><td style="text-align:center">初始化参数</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">onMeasure()</td><td style="text-align:center">测量View的大小</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">onSizeChanged()</td><td style="text-align:center">确定View的大小(一般用于记录View的当前宽高)</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">onLayout()</td><td style="text-align:center">确定子View的布局(若无子View可不考虑)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">onDraw()</td><td style="text-align:center">绘制图形内容</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">提供外部接口</td><td style="text-align:center">提供接口更新数据</td></tr></tbody></table><h3 id="三-View的注意事项"><a href="#三-View的注意事项" class="headerlink" title="(三) View的注意事项"></a>(三) View的注意事项</h3><p>1、让View支持wrap_content；</p><p>2、如果有必要，让View支持padding；</p><p>3、尽量不要在View中使用Handler(除非是发消息)</p><p>4、View中如果有线程或者动画，一定要重写onDetachedFromWindow()方法进行回收资源(单独封装)。</p><p>5、View带有滑动嵌套情况时，需要处理好滑动冲突。</p><p>– 注意：直接继承View或ViewGroup的控件，padding默认不生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-MeasureSpec&quot;&gt;&lt;a href=&quot;#一-MeasureSpec&quot; class=&quot;headerlink&quot; title=&quot;(一) MeasureSpec&quot;&gt;&lt;/a&gt;(一) MeasureSpec&lt;/h3&gt;&lt;p&gt;  MeasureSpec是一个32位int
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之滑动篇</title>
    <link href="http://hawkyAndroid.github.io/2018/09/30/summary-view-sliding-01/"/>
    <id>http://hawkyAndroid.github.io/2018/09/30/summary-view-sliding-01/</id>
    <published>2018-09-30T15:50:10.000Z</published>
    <updated>2018-11-08T11:47:07.282Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、View实现滑动的3种方式"><a href="#一、View实现滑动的3种方式" class="headerlink" title="一、View实现滑动的3种方式"></a>一、View实现滑动的3种方式</h3><pre><code>1、通过View本身提供的scrollTo/scrollBy方法来实现滑动；2、通过动画给View施加平移效果来实现动画；3、通过改变View的LayoutParams使得View重新布局从而实现滑动。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、View实现滑动的3种方式&quot;&gt;&lt;a href=&quot;#一、View实现滑动的3种方式&quot; class=&quot;headerlink&quot; title=&quot;一、View实现滑动的3种方式&quot;&gt;&lt;/a&gt;一、View实现滑动的3种方式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、通过View本身
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android开发工具类</title>
    <link href="http://hawkyAndroid.github.io/2018/09/25/summary-android-tools/"/>
    <id>http://hawkyAndroid.github.io/2018/09/25/summary-android-tools/</id>
    <published>2018-09-25T15:07:26.000Z</published>
    <updated>2018-11-09T11:45:20.676Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 校验邮箱</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmailValid</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">       Pattern pattern;</span><br><span class="line">       Matcher matcher;</span><br><span class="line">       <span class="keyword">final</span> String EMAIL_PATTERN =</span><br><span class="line">               <span class="string">"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"</span></span><br><span class="line">                       + <span class="string">"[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]&#123;2,&#125;)$"</span>;</span><br><span class="line">       pattern = Pattern.compile(EMAIL_PATTERN);</span><br><span class="line">       matcher = pattern.matcher(email);</span><br><span class="line">       <span class="keyword">return</span> matcher.matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 校验文件合法性</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isLegalFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file != <span class="keyword">null</span> &amp;&amp; file.exists() &amp;&amp; file.canRead() &amp;&amp; file.isFile() &amp;&amp; file.length() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测量文字高度(精确度较高)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getFontHeight</span><span class="params">(Paint paint)</span> </span>&#123;</span><br><span class="line">    Paint.FontMetrics fm = paint.getFontMetrics();</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">float</span>) Math.ceil(fm.descent - fm.ascent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将px值转换为dip或dp值，保证尺寸大小不变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2dip</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / scale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将dip或dp值转换为px值，保证尺寸大小不变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dip2px</span><span class="params">(Context context, <span class="keyword">float</span> dipValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (dipValue * scale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将px值转换为sp值，保证文字大小不变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">px2sp</span><span class="params">(Context context, <span class="keyword">float</span> pxValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (pxValue / fontScale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将sp值转换为px值，保证文字大小不变</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android常见问题及方案</title>
    <link href="http://hawkyAndroid.github.io/2018/09/20/summary-question-solution/"/>
    <id>http://hawkyAndroid.github.io/2018/09/20/summary-question-solution/</id>
    <published>2018-09-20T15:00:10.000Z</published>
    <updated>2018-11-06T11:35:15.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-APP卡顿问题"><a href="#1-APP卡顿问题" class="headerlink" title="1. APP卡顿问题"></a>1. APP卡顿问题</h3><p>原因：Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。(假定刷新帧率由正常的60FPS(Android系统设定的刷新帧率)降到30FPS，用户就会明显感知到卡顿)。由于任何原因导致接收到VSYNC信号的时候无法完成本次刷新操作，就会产生掉帧(卡顿)的现象。</p><h3 id="2-ANR无响应问题"><a href="#2-ANR无响应问题" class="headerlink" title="2. ANR无响应问题"></a>2. ANR无响应问题</h3><h4 id="2-1-ANR触发场景-分类"><a href="#2-1-ANR触发场景-分类" class="headerlink" title="2.1 ANR触发场景(分类)"></a>2.1 ANR触发场景(分类)</h4><pre><code>1. InputDispatching Timeout：输入/触摸事件分发超时5s未响应完毕；2. BroadcastQueue Timeout：前台广播在10s内、后台广播在60秒内未执行完成；3. Service Timeout：前台服务在20s内、后台服务在200s内未执行完成；4. ContentProvider Timeout：内容提供者，在publish过超时10s。</code></pre><h4 id="2-2-ANR解决方案"><a href="#2-2-ANR解决方案" class="headerlink" title="2.2 ANR解决方案"></a>2.2 ANR解决方案</h4><pre><code>1. 开发中使用AndroidPerformanceMonitor检测卡顿进行处理；2. 任何耗时操作适当的移到异步里；3. 合理优化布局，避免OverDraw；4. 优化内存分配，减少GC频率。</code></pre><p>–注意：并不是所有的ANR类型都有章可循，很多偶发的ANR受限于当时发生的环境或者系统Bug；因此对ANR，更应该强调预防而不是分析。</p><h3 id="3-内存泄漏问题"><a href="#3-内存泄漏问题" class="headerlink" title="3. 内存泄漏问题"></a>3. 内存泄漏问题</h3><p>描述：创建的对象在堆上无法被GC回收，从而导致可用内存慢慢减少。</p><pre><code>1. 释放持有对象的引用，使GC及时回收内存；2. 及时关闭和释放无用资源；3. 系统服务尽量使用getApplicationContext()</code></pre><h3 id="4-内存抖动问题"><a href="#4-内存抖动问题" class="headerlink" title="4. 内存抖动问题"></a>4. 内存抖动问题</h3><p>描述：大量的对象被创建又在短时间内马上被释放（频繁GC会影响帧率，甚至卡顿）。</p><pre><code>1. 避免在循环中创建临时对象；2. 避免在onDraw中创建Paint、Bitmap对象等。3. 内存泄漏。</code></pre><h3 id="5-线程异步问题"><a href="#5-线程异步问题" class="headerlink" title="5. 线程异步问题"></a>5. 线程异步问题</h3><pre><code>1. 线程做的工作越多，它的优先级应该越小，以便它不会造成系统资源紧张。2. Thread、AsyncTask适合处理单个任务的场景；3. HandlerThread适合串行处理多任务的场景；4. IntentService适合处理与UI无关的多任务场景；5. 当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择，当然也可以使用AsyncTask传入自定义的线程池；6. 注意线程优先级的设置。</code></pre><h3 id="6-布局优化问题"><a href="#6-布局优化问题" class="headerlink" title="6. 布局优化问题"></a>6. 布局优化问题</h3><pre><code>1. 调试GPU过度绘制，将Overdraw降低到合理范围内；2. 减少嵌套层次及控件个数，保持view的树形结构尽量扁平（使用Hierarchy Viewer可以方便的查看），同时移除所有不需要渲染的view；3. 使用GPU配置渲染工具，定位出问题发生在具体哪个步骤，使用TraceView精准定位代码；4. 使用标签，Merge减少嵌套层次、ViewStub延迟初始化。</code></pre><h3 id="7-Overdraw过度绘制问题"><a href="#7-Overdraw过度绘制问题" class="headerlink" title="7. Overdraw过度绘制问题"></a>7. Overdraw过度绘制问题</h3><pre><code>理论上一个像素每次只绘制一次是最优的，但是由于重叠的布局导致一些像素会被多次绘制，Overdraw由此产生。GPU工具来检测Overdraw(蓝色是可以接受的颜色)：1. 原色 – 没有过度绘制 – 这部分的像素点只在屏幕上绘制了一次。2. 蓝色 – 1次过度绘制– 这部分的像素点只在屏幕上绘制了两次。3. 绿色 – 2次过度绘制 – 这部分的像素点只在屏幕上绘制了三次。4. 粉色 – 3次过度绘制 – 这部分的像素点只在屏幕上绘制了四次。5. 红色 – 4次过度绘制 – 这部分的像素点只在屏幕上绘制了五次。</code></pre><h3 id="8-Handler内存泄露问题"><a href="#8-Handler内存泄露问题" class="headerlink" title="8. Handler内存泄露问题"></a>8. Handler内存泄露问题</h3><p>– 注意：Handler需要使用Looper才能切换线程</p><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据。数据存储后，只能在指定线程中获取存储的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可使用静态内部类 + 弱引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WorkHandler mHandler = <span class="keyword">new</span> WorkHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WorkHandler</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">  mActivity = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">  MainActivity activity = mActivity.get();</span><br><span class="line">  <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-APP卡顿问题&quot;&gt;&lt;a href=&quot;#1-APP卡顿问题&quot; class=&quot;headerlink&quot; title=&quot;1. APP卡顿问题&quot;&gt;&lt;/a&gt;1. APP卡顿问题&lt;/h3&gt;&lt;p&gt;原因：Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Acti
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android WakeLock唤醒锁的使用</title>
    <link href="http://hawkyAndroid.github.io/2018/09/20/summary-wakelock-usage/"/>
    <id>http://hawkyAndroid.github.io/2018/09/20/summary-wakelock-usage/</id>
    <published>2018-09-20T12:31:26.000Z</published>
    <updated>2018-09-20T12:48:08.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WakeLock分类："><a href="#WakeLock分类：" class="headerlink" title="WakeLock分类："></a>WakeLock分类：</h3><table><thead><tr><th style="text-align:left">标记值</th><th style="text-align:left">CPU</th><th style="text-align:left">屏幕</th><th>键盘</th></tr></thead><tbody><tr><td style="text-align:left">PARTIAL_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">关闭</td><td>关闭</td></tr><tr><td style="text-align:left">SCREEN_DIM_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变暗</td><td>关闭</td></tr><tr><td style="text-align:left">SCREEN_BRIGHT_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变亮</td><td>关闭</td></tr><tr><td style="text-align:left">FULL_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变亮</td><td>变亮</td></tr></tbody></table><p>注意：API等级17 开始，FULL_WAKE_LOCK 已被弃用，应使用FLAG_KEEP_SCREEN_ON</p><h3 id="WakeLock使用时机"><a href="#WakeLock使用时机" class="headerlink" title="WakeLock使用时机"></a>WakeLock使用时机</h3><pre><code>WakeLock使用时机：如断线重连、重新登录这些关键逻辑的执行过程，一旦执行成功就应立即释放WakeLock。注意：①注意使用WakeLock最好设置超时时间，这样timeout后系统会自动release。②休眠的情况下如何唤醒来执行任务？用AlarmManager。如推送消息发送心跳包，获取信息等。</code></pre><h3 id="WakeLock使用实例"><a href="#WakeLock使用实例" class="headerlink" title="WakeLock使用实例"></a>WakeLock使用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Flag Value                 CPU        Screen      Keyboard</span></span><br><span class="line"><span class="comment"> PARTIAL_WAKE_LOCK            On           Off         Off</span></span><br><span class="line"><span class="comment"> SCREEN_DIM_WAKE_LOCK         On           Dim         Off</span></span><br><span class="line"><span class="comment"> SCREEN_BRIGHT_WAKE_LOCK      On           Bright      Off</span></span><br><span class="line"><span class="comment"> FULL_WAKE_LOCK               On           Bright      Bright</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttWakeLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MQTT-WakeLock"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PowerManager.WakeLock mWakelock = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PowerManager.<span class="function">WakeLock <span class="title">createPartialWakeLock</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        PowerManager pm = (PowerManager) context.getApplicationContext()</span><br><span class="line">                .getSystemService(Context.POWER_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (pm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取唤醒锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout The timeout after which to release the wake lock, in milliseconds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(Context context, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWakelock = createPartialWakeLock(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock != <span class="keyword">null</span> &amp;&amp; !mWakelock.isHeld()) &#123;</span><br><span class="line">            mWakelock.acquire(timeout);<span class="comment">// timeout后系统会自动release，无需手动调用release()</span></span><br><span class="line">            Log.d(TAG, <span class="string">"[MqttWakeLock] acquire WakeLock"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放唤醒锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock != <span class="keyword">null</span> &amp;&amp; mWakelock.isHeld()) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"[MqttWakeLock] release WakeLock"</span>);</span><br><span class="line">            mWakelock.release();</span><br><span class="line">            mWakelock = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WakeLock分类：&quot;&gt;&lt;a href=&quot;#WakeLock分类：&quot; class=&quot;headerlink&quot; title=&quot;WakeLock分类：&quot;&gt;&lt;/a&gt;WakeLock分类：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android系统广播实例</title>
    <link href="http://hawkyAndroid.github.io/2018/09/19/summary-system-broadcast/"/>
    <id>http://hawkyAndroid.github.io/2018/09/19/summary-system-broadcast/</id>
    <published>2018-09-19T13:52:26.000Z</published>
    <updated>2018-09-25T15:02:39.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-系统广播实例"><a href="#Android-系统广播实例" class="headerlink" title="Android 系统广播实例"></a>Android 系统广播实例</h2><pre><code>一般而言，应用被系统杀死后，基本无法接收系统广播。对于只用于应用内的广播，优先使用 LocalBroadcastManager 来进行注册和发送，LocalBroadcastManager 安全性更好，同时拥有更高的运行效率。</code></pre><h3 id="1-语言切换广播"><a href="#1-语言切换广播" class="headerlink" title="1. 语言切换广播"></a>1. 语言切换广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语言切换广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleChangedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_LOCALE_CHANGED.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"LOCALE-CHANGED"</span>, <span class="string">"[LocaleChangedReceiver] onReceive - "</span> + action);</span><br><span class="line">            ActivityUtils.finishAll();</span><br><span class="line">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">            <span class="comment">// System.exit(0);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML静态注册广播<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语言切换广播监听 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:name</span>=<span class="string">"com.xxx.xxx.receiver.LocaleChangeReceiver"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.LOCALE_CHANGED"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-屏幕解锁广播"><a href="#2-屏幕解锁广播" class="headerlink" title="2. 屏幕解锁广播"></a>2. 屏幕解锁广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屏幕解锁广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPresentReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_USER_PRESENT.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"UNLOCK-SCREEN"</span>, <span class="string">"[UserPresentReceiver] onReceive - "</span> + action);</span><br><span class="line">            <span class="comment">//if (Utils.checkLogin()) &#123;</span></span><br><span class="line">              <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML静态注册广播<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解锁广播监听 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.xxx.xxx.receiver.UserPresentReceiver"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.USER_PRESENT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-网络监听广播"><a href="#3-网络监听广播" class="headerlink" title="3. 网络监听广播"></a>3. 网络监听广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络监听广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"NETWORK-CHANGE"</span>, <span class="string">"[NetworkChangedReceiver] onReceive - "</span> + action);</span><br><span class="line">            <span class="comment">// if (Utils.checkLogin() &amp;&amp; Utils.hasNetwork(context)) &#123;</span></span><br><span class="line">            <span class="comment">// do something....</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android 7.0以后必须动态注册CONNECTIVITY_ACTION<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NetworkChangedReceiver networkReceiver = <span class="keyword">new</span> NetworkChangedReceiver();</span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">registerReceiver(networkReceiver, filter);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-系统广播实例&quot;&gt;&lt;a href=&quot;#Android-系统广播实例&quot; class=&quot;headerlink&quot; title=&quot;Android 系统广播实例&quot;&gt;&lt;/a&gt;Android 系统广播实例&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一般而言，应用被系统杀死后，
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之电量篇</title>
    <link href="http://hawkyAndroid.github.io/2018/09/19/summary-performance-battery/"/>
    <id>http://hawkyAndroid.github.io/2018/09/19/summary-performance-battery/</id>
    <published>2018-09-19T10:55:25.000Z</published>
    <updated>2018-09-19T13:54:28.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="耗电的模块"><a href="#耗电的模块" class="headerlink" title="耗电的模块"></a>耗电的模块</h3><h4 id="1、CPU耗电"><a href="#1、CPU耗电" class="headerlink" title="1、CPU耗电"></a>1、CPU耗电</h4><pre><code>1.1 CPU长期频繁唤醒1.2 CPU长期高负荷工作</code></pre><h4 id="2、屏幕耗电"><a href="#2、屏幕耗电" class="headerlink" title="2、屏幕耗电"></a>2、屏幕耗电</h4><p>  LCD(液晶显示器)屏幕本身不发光。白色光线由背后的灯管发出，透过屏幕照射到我们的眼睛，所以我们能够看到图像。在显示黑色屏幕的时候，尽管LCD屏幕已经全黑了，但是背面的灯管还是发光，所以我们会在边缘看到白色的光斑。</p><p>  OLED屏幕的每个像素都是可以独立发光的。当显示全黑时，所有的像素都不发光，其效果近似关屏，因此黑色的显示效果要好于LCD屏幕，且功耗更低。</p><h4 id="3、Wifi、数据网络耗电"><a href="#3、Wifi、数据网络耗电" class="headerlink" title="3、Wifi、数据网络耗电"></a>3、Wifi、数据网络耗电</h4><pre><code>3.1 流量大小3.2 网络激活次数和间隔</code></pre><h4 id="4、GPS耗电"><a href="#4、GPS耗电" class="headerlink" title="4、GPS耗电"></a>4、GPS耗电</h4><p>GPS处于工作状态的时间长短直接决定了它是否耗电，所以非定位类的APP尽量不要请求用户开启GPS位置权限。</p><h3 id="电量优化方案及检测工具"><a href="#电量优化方案及检测工具" class="headerlink" title="电量优化方案及检测工具"></a>电量优化方案及检测工具</h3><h4 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h4><pre><code>1.1 锁屏、灭屏时：释放WakeLock、停止动画绘制、停止扫描等，尽量让CPU休眠。1.2 若功能需要使用AlarmManager，则可以考虑多个功能合并到一个AlarmManager，且使用过程中要考虑网络变化、用户登录状态改变等场景。</code></pre><p>可使用工具TraceView，获取进程执行信息，定位CPU占用率异常的问题。</p><h4 id="2、Wifi、网络传输"><a href="#2、Wifi、网络传输" class="headerlink" title="2、Wifi、网络传输"></a>2、Wifi、网络传输</h4><pre><code>2.1 压缩数据（流量）大小、请求集中处理、选择更快的传输方式。2.2 减少网络激活次数、增加网络请求间隔。</code></pre><h4 id="3、GPS"><a href="#3、GPS" class="headerlink" title="3、GPS"></a>3、GPS</h4><pre><code>3.1 不同的场景以及不同类型的App对定位更加需要个性化的区分（选择合适的Location Provider、及时注销定位监听、多模块使用定位尽量复用）。</code></pre><h4 id="4、Sensor"><a href="#4、Sensor" class="headerlink" title="4、Sensor"></a>4、Sensor</h4><p>使用传感器，选择合适的采样率，越高的采样率类型则越费电。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;耗电的模块&quot;&gt;&lt;a href=&quot;#耗电的模块&quot; class=&quot;headerlink&quot; title=&quot;耗电的模块&quot;&gt;&lt;/a&gt;耗电的模块&lt;/h3&gt;&lt;h4 id=&quot;1、CPU耗电&quot;&gt;&lt;a href=&quot;#1、CPU耗电&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之测试工具篇</title>
    <link href="http://hawkyAndroid.github.io/2018/08/29/summary-performance-detect-tools/"/>
    <id>http://hawkyAndroid.github.io/2018/08/29/summary-performance-detect-tools/</id>
    <published>2018-08-29T13:00:10.000Z</published>
    <updated>2018-09-30T15:44:42.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-常用检测方法及工具"><a href="#1-常用检测方法及工具" class="headerlink" title="1. 常用检测方法及工具"></a>1. 常用检测方法及工具</h2><h4 id="1-1-获取内存使用情况"><a href="#1-1-获取内存使用情况" class="headerlink" title="1.1 获取内存使用情况"></a>1.1 获取内存使用情况</h4><p>通过命令行adb shell dumpsys meminfo packagename查看内存详细占用情况</p><h4 id="1-2-获取堆内存最大值"><a href="#1-2-获取堆内存最大值" class="headerlink" title="1.2 获取堆内存最大值"></a>1.2 获取堆内存最大值</h4><p> DebugLog.e(“堆内存最大值：” + Runtime.getRuntime().maxMemory());</p><h4 id="1-3-反编译APK-可查看方法数"><a href="#1-3-反编译APK-可查看方法数" class="headerlink" title="1.3 反编译APK(可查看方法数)"></a>1.3 反编译APK(可查看方法数)</h4><p> <a href="https://github.com/google/android-classyshark" target="_blank" rel="noopener">https://github.com/google/android-classyshark</a></p><p>–注意：Android默认没有虚拟内存。App占用内存越多，被Low Memory Killer(劫富济贫)处理掉的机会越大。</p><h4 id="1-4-查看应用的进程优先级"><a href="#1-4-查看应用的进程优先级" class="headerlink" title="1.4 查看应用的进程优先级"></a>1.4 查看应用的进程优先级</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb ps | grep [package_name] #获取应用pid</span><br><span class="line"></span><br><span class="line">$ cat /proc/[pid]/ oom_adj  #获取进程优先级</span><br></pre></td></tr></table></figure><p>–注意：oom_adj越小、优先级越大</p><h4 id="1-5-查看ANR日志"><a href="#1-5-查看ANR日志" class="headerlink" title="1.5 查看ANR日志"></a>1.5 查看ANR日志</h4><p>adb pull /data/anr/traces.txt e:\trace.txt</p><h4 id="1-6-查看嵌套层次及控件个数"><a href="#1-6-查看嵌套层次及控件个数" class="headerlink" title="1.6 查看嵌套层次及控件个数"></a>1.6 查看嵌套层次及控件个数</h4><p>–检测工具：Hierarchy Viewer –&gt; <a href="https://github.com/romainguy/ViewServer" target="_blank" rel="noopener">https://github.com/romainguy/ViewServer</a></p><h4 id="1-7-检测内存泄漏"><a href="#1-7-检测内存泄漏" class="headerlink" title="1.7 检测内存泄漏"></a>1.7 检测内存泄漏</h4><p><a href="https://github.com/markzhai/AndroidPerformanceMonitor" target="_blank" rel="noopener">BlockCanary</a>(A transparent ui-block detection library for Android)</p><h2 id="2-网络检测工具"><a href="#2-网络检测工具" class="headerlink" title="2. 网络检测工具"></a>2. 网络检测工具</h2><h4 id="2-1-抓包工具-入门级-：Fiddler"><a href="#2-1-抓包工具-入门级-：Fiddler" class="headerlink" title="2.1. 抓包工具(入门级)：Fiddler"></a>2.1. 抓包工具(入门级)：Fiddler</h4><p>Fiddler是一款http协议调试代理工具，可延迟HTTP返回。</p><h4 id="2-2-模拟网络请求：Postman-安装谷歌插件即可-chrome-apps"><a href="#2-2-模拟网络请求：Postman-安装谷歌插件即可-chrome-apps" class="headerlink" title="2.2. 模拟网络请求：Postman(安装谷歌插件即可) chrome://apps"></a>2.2. 模拟网络请求：Postman(安装谷歌插件即可) chrome://apps</h4><h4 id="2-3-Stecho-调试神器-chrome-inspect"><a href="#2-3-Stecho-调试神器-chrome-inspect" class="headerlink" title="2.3. Stecho(调试神器) chrome://inspect"></a>2.3. <a href="http://facebook.github.io/stetho" target="_blank" rel="noopener">Stecho</a>(调试神器) chrome://inspect</h4><p>可用于查看布局层级、网络抓包、查看数据库、SharedPreferences文件等数据。具体配置及初始化见官网。</p><h4 id="2-4-协议-流量-分析神器：WireShark"><a href="#2-4-协议-流量-分析神器：WireShark" class="headerlink" title="2.4. 协议(流量)分析神器：WireShark"></a>2.4. 协议(流量)分析神器：<a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">WireShark</a></h4><p>–  WireShark可查看封包详细信息如下：</p><pre><code>Frame:   物理层的数据帧概况Ethernet II: 数据链路层以太网帧头部信息Internet Protocol Version 4: 网络层IP包头部信息Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCPHypertext Transfer Protocol:  应用层的信息，此处是HTTP协议</code></pre><p>– 常用过滤方式</p><pre><code>http.request.method == &quot;POST&quot; &amp;&amp; ip.src == 192.168.xxx.xxxhttp.request.method == &quot;GET&quot; || ip.dst == 192.168.xxx.xxxip.dst == 192.168.xxx.xxx &amp;&amp; udpip.src == 192.168.xxx.xxx || tcptcp.port == XXXXtcp.dstport == XXXXhttp.host == &quot;www.xxx.com&quot;</code></pre><h4 id="2-5-验收测试工具：Fitnesse"><a href="#2-5-验收测试工具：Fitnesse" class="headerlink" title="2.5. 验收测试工具：Fitnesse"></a>2.5. 验收测试工具：<a href="http://www.fitnesse.org/FitNesseDownload" target="_blank" rel="noopener">Fitnesse</a></h4><p><a href="http://www.sohu.com/a/133937049_470023" target="_blank" rel="noopener">Fitnesse使用参考</a> 启动：java -jar D:\fitnesse-standalone.jar -p 2222</p><p>使用实例：FitNesse验收测试Case</p><pre><code>!define TEST_SYSTEM {slim}!path D:\eclipse\workspace\fitnesse\bin|import               ||com.leo.restful      ||com.leo.restful.Calculator||first|second|addition?|minus?|multiply?|divide?|doPost?||4    |3     |         |      |         |       |       |</code></pre><h4 id="2-6-压力测试工具：JMeter、XMeter-收费"><a href="#2-6-压力测试工具：JMeter、XMeter-收费" class="headerlink" title="2.6. 压力测试工具：JMeter、XMeter(收费)"></a>2.6. 压力测试工具：JMeter、XMeter(收费)</h4><p><a href="https://www.cnblogs.com/st-leslie/p/5185376.html" target="_blank" rel="noopener">HTTP测试参考</a>    <a href="https://www.cnblogs.com/saryli/p/6928051.html" target="_blank" rel="noopener">MQTT测试参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-常用检测方法及工具&quot;&gt;&lt;a href=&quot;#1-常用检测方法及工具&quot; class=&quot;headerlink&quot; title=&quot;1. 常用检测方法及工具&quot;&gt;&lt;/a&gt;1. 常用检测方法及工具&lt;/h2&gt;&lt;h4 id=&quot;1-1-获取内存使用情况&quot;&gt;&lt;a href=&quot;#1-1
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之磁盘篇</title>
    <link href="http://hawkyAndroid.github.io/2018/08/28/summary-performance-disk/"/>
    <id>http://hawkyAndroid.github.io/2018/08/28/summary-performance-disk/</id>
    <published>2018-08-28T13:15:25.000Z</published>
    <updated>2018-09-30T15:45:20.638Z</updated>
    
    <content type="html"><![CDATA[<p>–参考书籍：《Android移动性能实战》</p><h2 id="1-StrictMode"><a href="#1-StrictMode" class="headerlink" title="1. StrictMode"></a>1. StrictMode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Applcation/Activity的onCreate方法中使用严苛模式：</span></span><br><span class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">    <span class="comment">// 严苛模式-1：使用线程策略</span></span><br><span class="line">    StrictMode.setThreadPolicy(<span class="keyword">new</span> StrictMode.ThreadPolicy.Builder()</span><br><span class="line">            .detectDiskReads()</span><br><span class="line">            .detectDiskWrites()</span><br><span class="line">            .detectNetwork()</span><br><span class="line">            .penaltyLog()</span><br><span class="line">            .build());</span><br><span class="line">    <span class="comment">// 严苛模式-2：使用VM策略（可与线程策略一起使用）</span></span><br><span class="line">    StrictMode.setVmPolicy(<span class="keyword">new</span> StrictMode.VmPolicy.Builder()</span><br><span class="line">            .detectActivityLeaks()</span><br><span class="line">            .detectLeakedSqlLiteObjects()</span><br><span class="line">            .penaltyLog()</span><br><span class="line">            .build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---查看日志： adb logcat | grep StrictMode</span><br><span class="line">其它用法：直接提示(自定义) StrictMode.noteSlowCall(<span class="string">"slowCall timeout="</span> + timeout);</span><br></pre></td></tr></table></figure><h2 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2. 文件操作"></a>2. 文件操作</h2><ol><li><p>避免冗余读/写：要尽量延迟写入(如：对于SharedPreferences，只保留最后一个apply即可)。</p></li><li><p>减少I/O操作次数：使用6~8KB Buffer读/写、批量更新数据库使用事务。</p></li><li><p>使用LruCache和DiskLruCache做内存和磁盘缓存；</p></li><li><p>不建议在进程间通信中使用SharedPreferences，因为高并发的读写访问可能会丢失数据。</p></li></ol><h2 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3. 数据库操作"></a>3. 数据库操作</h2><h4 id="3-1-缓存数据库连接"><a href="#3-1-缓存数据库连接" class="headerlink" title="3.1  缓存数据库连接"></a>3.1  缓存数据库连接</h4><p>数据库在打开后，先不要关闭，在应用程序退出时再关闭。</p><h4 id="3-2-使用索引"><a href="#3-2-使用索引" class="headerlink" title="3.2 使用索引"></a>3.2 使用索引</h4><p>可提高查询速度，但由于要维护索引会使插入效率有所降低。</p><h4 id="3-3-尽量不使用Autoincrement关键字"><a href="#3-3-尽量不使用Autoincrement关键字" class="headerlink" title="3.3  尽量不使用Autoincrement关键字"></a>3.3  尽量不使用Autoincrement关键字</h4><ol><li><p>作用：会保证主键是严格单调递增的，如果行号的最大值被用过，那么插入新数据时会包SQLITE_FULL错误。</p></li><li><p>原理：SQLite创建一个叫sqlite_sequence的内部表来记录该表使用的最大行号，维护sqlite_sequence表带来的额外开销会导致INSERT效率降低。</p></li><li><p>总结：autoincrement会增加CPU、内存、磁盘空间和磁盘I/O的负担，所以尽量不要用，除非必需(如：客户端需要拿该主键和服务器校对数据，需要保证主键唯一性)</p></li></ol><h4 id="3-4-数据库操作移到工作线程"><a href="#3-4-数据库操作移到工作线程" class="headerlink" title="3.4 数据库操作移到工作线程"></a>3.4 数据库操作移到工作线程</h4><p>  数据库及IO操作都移到工作线程(Thread)，并且设置线程优先级为THREAD_PRIORITY_BACKGROUND，这样工作线程最多能获取到10%的时间片，优先保证主线程执行。</p><h2 id="4-Bitmap操作"><a href="#4-Bitmap操作" class="headerlink" title="4. Bitmap操作"></a>4. Bitmap操作</h2><h4 id="4-1-提高Bitmap解码效率"><a href="#4-1-提高Bitmap解码效率" class="headerlink" title="4.1 提高Bitmap解码效率"></a>4.1 提高Bitmap解码效率</h4><p>可考虑使用decodeStream、decodeResourceStream，并传入BufferedInputStream参数。</p><h4 id="4-2-TinyPng"><a href="#4-2-TinyPng" class="headerlink" title="4.2 TinyPng"></a>4.2 TinyPng</h4><p>由于PNG是一种无损格式，JPG是有损格式。所有：小尺寸、色彩较少或者有alpha通道透明度的时候，使用PNG; 大尺寸、色彩渐变多的使用JPG。<br>—图片压缩工具：<a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPng</a></p><h4 id="4-3-合理选择Bitmap-Config"><a href="#4-3-合理选择Bitmap-Config" class="headerlink" title="4.3 合理选择Bitmap.Config"></a>4.3 合理选择Bitmap.Config</h4><p>Bitmap.Config用来描述图片的像素是怎么被存储的：</p><pre><code>ARGB_8888: 每个像素4字节. 共32位，默认设置。Alpha_8: 只保存透明度，共8位，1字节。ARGB_4444: 共16位，2字节。RGB_565:共16位，2字节，只存储RGB值(推荐)。</code></pre><h4 id="4-4-WebP格式图片"><a href="#4-4-WebP格式图片" class="headerlink" title="4.4 WebP格式图片"></a>4.4 WebP格式图片</h4><p>WebP既支持有损压缩也支持无损压缩。体积小，但占用CPU内存是JPG格式的3倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;–参考书籍：《Android移动性能实战》&lt;/p&gt;
&lt;h2 id=&quot;1-StrictMode&quot;&gt;&lt;a href=&quot;#1-StrictMode&quot; class=&quot;headerlink&quot; title=&quot;1. StrictMode&quot;&gt;&lt;/a&gt;1. StrictMode&lt;/h2&gt;&lt;f
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android开发规范总结</title>
    <link href="http://hawkyAndroid.github.io/2018/07/29/summary-develop-standard/"/>
    <id>http://hawkyAndroid.github.io/2018/07/29/summary-develop-standard/</id>
    <published>2018-07-29T13:14:30.000Z</published>
    <updated>2018-09-19T13:48:26.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-命令规范"><a href="#Android-命令规范" class="headerlink" title="Android 命令规范"></a>Android 命令规范</h3><ol><li><p>类名：名词+动词+组件名。(activity/fragment/adapter/receiver/provider/service)</p></li><li><p>布局组件ID：组件缩写_<em>模块缩写</em>具体业务</p></li><li><p>组件变量：m组件缩写+具体含义，如mIvAvatar</p></li><li><p>string.xml：模块名简称<em>activity名字简称</em>具体意思简称</p></li><li><p>方法命名：<br>initXX（初始化）、<br>isXX/checkXX（检查数据）、<br>handleXX/processXX（处理数据）、<br>displayXX/showXX（显示控件/数据）、<br>updateXX（更新控件/数据）、<br>saveXX/insertXX（保存数据）、<br>resetXX（重置控件/数据）、<br>drawXX（绘制控件）</p></li></ol><h3 id="代码设计原则"><a href="#代码设计原则" class="headerlink" title="代码设计原则"></a>代码设计原则</h3><p>1)找出应用中可能需要改变的地方，把它们“抽取”出来并进行“封装”。</p><p>2)针对接口编程。</p><p>3)多用组合，少用继承。</p><p>4)对扩展开放，对修改关闭。</p><p>5)依赖倒置：要依赖抽象(不管是高层组件还是底层组件)，不要依赖具体类。</p><h3 id="代码注释规范"><a href="#代码注释规范" class="headerlink" title="代码注释规范"></a>代码注释规范</h3><p>File-&gt;Settings-&gt;Editor-&gt;Code Style-&gt;File and Code Templates</p><p>Files-&gt; Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Project: $&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">* @FileName: $&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">* @Package $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* @Author lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* @Date $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @Copyright: $&#123;YEAR&#125; www.hank-tech.com Inc. All rights reserved.</span></span><br><span class="line"><span class="comment">* @Version V1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Includes-&gt; File Header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android-命令规范&quot;&gt;&lt;a href=&quot;#Android-命令规范&quot; class=&quot;headerlink&quot; title=&quot;Android 命令规范&quot;&gt;&lt;/a&gt;Android 命令规范&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类名：名词+动词+组件名。(activit
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
