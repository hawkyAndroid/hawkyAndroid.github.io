<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hawky的博客</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hawkyAndroid.github.io/"/>
  <updated>2018-11-07T14:05:08.559Z</updated>
  <id>http://hawkyAndroid.github.io/</id>
  
  <author>
    <name>Hawky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Paint和Canvas</title>
    <link href="http://hawkyAndroid.github.io/2018/11/07/summary-view-02/"/>
    <id>http://hawkyAndroid.github.io/2018/11/07/summary-view-02/</id>
    <published>2018-11-07T14:15:25.000Z</published>
    <updated>2018-11-07T14:05:08.559Z</updated>
    
    <content type="html"><![CDATA[<h4 id="（一）Paint的属性及使用"><a href="#（一）Paint的属性及使用" class="headerlink" title="（一）Paint的属性及使用"></a>（一）Paint的属性及使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Paint paint = <span class="keyword">new</span> Paint();<span class="comment">// 创建画笔</span></span><br><span class="line">paint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 抗锯齿</span></span><br><span class="line">paint.setColor(Color.GREEN);<span class="comment">// 颜色</span></span><br><span class="line">paint.setStyle(Paint.Style.FILL);<span class="comment">// 填充</span></span><br><span class="line">paint.setTextAlign(Paint.Align.LEFT);<span class="comment">// 向左对齐</span></span><br><span class="line">paint.setTextSize(<span class="number">20f</span>);<span class="comment">// 字体大小</span></span><br><span class="line">paint.setTextSkewX(-<span class="number">0.5f</span>);<span class="comment">// 倾斜程度0-1</span></span><br><span class="line">paint.setUnderlineText(<span class="keyword">true</span>);<span class="comment">// 下划线</span></span><br><span class="line">paint.setFakeBoldText(<span class="keyword">true</span>);<span class="comment">// 加粗</span></span><br><span class="line">paint.setStrokeWidth(<span class="number">20f</span>);<span class="comment">// 笔粗</span></span><br><span class="line">paint.setStrokeJoin(Paint.Join.ROUND);<span class="comment">// 拐角样式</span></span><br><span class="line">paint.setStrokeCap(Paint.Cap.ROUND);<span class="comment">// 落笔样式</span></span><br></pre></td></tr></table></figure><h4 id="（二）Canvas的属性及使用"><a href="#（二）Canvas的属性及使用" class="headerlink" title="（二）Canvas的属性及使用"></a>（二）Canvas的属性及使用</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;（一）Paint的属性及使用&quot;&gt;&lt;a href=&quot;#（一）Paint的属性及使用&quot; class=&quot;headerlink&quot; title=&quot;（一）Paint的属性及使用&quot;&gt;&lt;/a&gt;（一）Paint的属性及使用&lt;/h4&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View的坐标系</title>
    <link href="http://hawkyAndroid.github.io/2018/11/07/summary-view-01/"/>
    <id>http://hawkyAndroid.github.io/2018/11/07/summary-view-01/</id>
    <published>2018-11-07T13:56:15.000Z</published>
    <updated>2018-11-07T14:01:17.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="（一）View的坐标系"><a href="#（一）View的坐标系" class="headerlink" title="（一）View的坐标系"></a>（一）View的坐标系</h4><p>  – 说明： View的坐标系统是相对于父控件而言的。屏幕左上角为坐标原点，向右为x轴增大方向，向下为y轴增大方向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getTop();       <span class="comment">//获取子View左上角距父View顶部的距离</span></span><br><span class="line"></span><br><span class="line">getLeft();      <span class="comment">//获取子View左上角距父View左侧的距离</span></span><br><span class="line"></span><br><span class="line">getBottom();    <span class="comment">//获取子View右下角距父View顶部的距离</span></span><br><span class="line"></span><br><span class="line">getRight();     <span class="comment">//获取子View右下角距父View左侧的距离</span></span><br></pre></td></tr></table></figure><h4 id="（二）MotionEvent中-get-和-getRaw-的区别"><a href="#（二）MotionEvent中-get-和-getRaw-的区别" class="headerlink" title="（二）MotionEvent中 get 和 getRaw 的区别"></a>（二）MotionEvent中 get 和 getRaw 的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">event.getX();       <span class="comment">//触摸点相对于其所在组件(自身)坐标系的坐标</span></span><br><span class="line">event.getY();</span><br><span class="line"></span><br><span class="line">event.getRawX();    <span class="comment">//触摸点相对于屏幕默认坐标系的坐标</span></span><br><span class="line">event.getRawY();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;（一）View的坐标系&quot;&gt;&lt;a href=&quot;#（一）View的坐标系&quot; class=&quot;headerlink&quot; title=&quot;（一）View的坐标系&quot;&gt;&lt;/a&gt;（一）View的坐标系&lt;/h4&gt;&lt;p&gt;  – 说明： View的坐标系统是相对于父控件而言的。屏幕左上角为
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View的绘制篇</title>
    <link href="http://hawkyAndroid.github.io/2018/11/05/summary-view-drawing-01/"/>
    <id>http://hawkyAndroid.github.io/2018/11/05/summary-view-drawing-01/</id>
    <published>2018-11-05T11:42:15.000Z</published>
    <updated>2018-11-05T11:44:51.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-MeasureSpec"><a href="#一-MeasureSpec" class="headerlink" title="(一) MeasureSpec"></a>(一) MeasureSpec</h3><p>  MeasureSpec是一个32位int值。高2位代表SpecMode测量模式，低30位代表SpecSize相应模式下的测量规格大小。</p><h4 id="1-1-SpecMode分为三类"><a href="#1-1-SpecMode分为三类" class="headerlink" title="1.1 SpecMode分为三类"></a>1.1 SpecMode分为三类</h4><p>1、UNSPECIFIED：父容器不限制View的大小。</p><p>2、EXACTLY：对应于LayoutParams中的match_parent和具体的数值。</p><p>3、AT_MOST：对应于LayoutParams总的wrap_content。</p><h4 id="1-2-MeasureSpec与LayoutParams的对应关系"><a href="#1-2-MeasureSpec与LayoutParams的对应关系" class="headerlink" title="1.2 MeasureSpec与LayoutParams的对应关系"></a>1.2 MeasureSpec与LayoutParams的对应关系</h4><p>在测量View的时候，系统会将LayoutParams在父容器的约束下转换成对应的MeasureSpec，然后根据MeasureSpec确定View测量后的宽/高。</p><h3 id="二-View的工作流程"><a href="#二-View的工作流程" class="headerlink" title="(二) View的工作流程"></a>(二) View的工作流程</h3><h4 id="2-1-measure：确定View的测量宽-高"><a href="#2-1-measure：确定View的测量宽-高" class="headerlink" title="2.1 measure：确定View的测量宽/高"></a>2.1 measure：确定View的测量宽/高</h4><p>–最佳实践：在onLayout方法中去获取View的测量宽/高或者最终宽/高。</p><p>– 注意：View的measure过程和Activity的生命周期方法不是同步执行的。</p><h4 id="2-2-layout：ViewGroup用来确定子元素的位置。"><a href="#2-2-layout：ViewGroup用来确定子元素的位置。" class="headerlink" title="2.2 layout：ViewGroup用来确定子元素的位置。"></a>2.2 layout：ViewGroup用来确定子元素的位置。</h4><p>– 注意：layout方法确定View本身的位置，而onLayout方法则会确定所有子元素的位置。</p><h4 id="2-3-draw：将View绘制到屏幕上"><a href="#2-3-draw：将View绘制到屏幕上" class="headerlink" title="2.3 draw：将View绘制到屏幕上"></a>2.3 draw：将View绘制到屏幕上</h4><p>1、绘制背景 background.draw(canvas)</p><p>2、绘制自己(onDraw)</p><p>3、绘制children(dispatchDraw)</p><p>4、绘制装饰(onDrawScrollsBars)</p><h3 id="三-View的注意事项"><a href="#三-View的注意事项" class="headerlink" title="(三) View的注意事项"></a>(三) View的注意事项</h3><p>1、让View支持wrap_content；</p><p>2、如果有必要，让View支持padding；</p><p>3、尽量不要在View中使用Handler(除非是发消息)</p><p>4、View如果有线程或者动画，需要及时停止，可调用View.onDetachedFromWindow。</p><p>5、View带有滑动嵌套情况时，需要处理好滑动冲突。</p><p>– 注意：直接继承View或ViewGroup的控件，padding默认不生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-MeasureSpec&quot;&gt;&lt;a href=&quot;#一-MeasureSpec&quot; class=&quot;headerlink&quot; title=&quot;(一) MeasureSpec&quot;&gt;&lt;/a&gt;(一) MeasureSpec&lt;/h3&gt;&lt;p&gt;  MeasureSpec是一个32位int
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View的滑动篇</title>
    <link href="http://hawkyAndroid.github.io/2018/09/30/summary-view-sliding-01/"/>
    <id>http://hawkyAndroid.github.io/2018/09/30/summary-view-sliding-01/</id>
    <published>2018-09-30T15:50:10.000Z</published>
    <updated>2018-09-30T15:52:44.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、View实现滑动的3种方式"><a href="#一、View实现滑动的3种方式" class="headerlink" title="一、View实现滑动的3种方式"></a>一、View实现滑动的3种方式</h3><pre><code>1、通过View本身提供的scrollTo/scrollBy方法来实现滑动；2、通过动画给View施加平移效果来实现动画；3、通过改变View的LayoutParams使得View重新布局从而实现滑动。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、View实现滑动的3种方式&quot;&gt;&lt;a href=&quot;#一、View实现滑动的3种方式&quot; class=&quot;headerlink&quot; title=&quot;一、View实现滑动的3种方式&quot;&gt;&lt;/a&gt;一、View实现滑动的3种方式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、通过View本身
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android开发工具类</title>
    <link href="http://hawkyAndroid.github.io/2018/09/25/summary-android-tools/"/>
    <id>http://hawkyAndroid.github.io/2018/09/25/summary-android-tools/</id>
    <published>2018-09-25T15:07:26.000Z</published>
    <updated>2018-09-30T15:58:28.449Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 校验邮箱</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmailValid</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">       Pattern pattern;</span><br><span class="line">       Matcher matcher;</span><br><span class="line">       <span class="keyword">final</span> String EMAIL_PATTERN =</span><br><span class="line">               <span class="string">"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"</span></span><br><span class="line">                       + <span class="string">"[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]&#123;2,&#125;)$"</span>;</span><br><span class="line">       pattern = Pattern.compile(EMAIL_PATTERN);</span><br><span class="line">       matcher = pattern.matcher(email);</span><br><span class="line">       <span class="keyword">return</span> matcher.matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 校验文件合法性</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isLegalFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file != <span class="keyword">null</span> &amp;&amp; file.exists() &amp;&amp; file.canRead() &amp;&amp; file.isFile() &amp;&amp; file.length() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android常见问题及方案</title>
    <link href="http://hawkyAndroid.github.io/2018/09/20/summary-question-solution/"/>
    <id>http://hawkyAndroid.github.io/2018/09/20/summary-question-solution/</id>
    <published>2018-09-20T15:00:10.000Z</published>
    <updated>2018-11-06T11:35:15.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-APP卡顿问题"><a href="#1-APP卡顿问题" class="headerlink" title="1. APP卡顿问题"></a>1. APP卡顿问题</h3><p>原因：Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Activity)。(假定刷新帧率由正常的60FPS(Android系统设定的刷新帧率)降到30FPS，用户就会明显感知到卡顿)。由于任何原因导致接收到VSYNC信号的时候无法完成本次刷新操作，就会产生掉帧(卡顿)的现象。</p><h3 id="2-ANR无响应问题"><a href="#2-ANR无响应问题" class="headerlink" title="2. ANR无响应问题"></a>2. ANR无响应问题</h3><h4 id="2-1-ANR触发场景-分类"><a href="#2-1-ANR触发场景-分类" class="headerlink" title="2.1 ANR触发场景(分类)"></a>2.1 ANR触发场景(分类)</h4><pre><code>1. InputDispatching Timeout：输入/触摸事件分发超时5s未响应完毕；2. BroadcastQueue Timeout：前台广播在10s内、后台广播在60秒内未执行完成；3. Service Timeout：前台服务在20s内、后台服务在200s内未执行完成；4. ContentProvider Timeout：内容提供者，在publish过超时10s。</code></pre><h4 id="2-2-ANR解决方案"><a href="#2-2-ANR解决方案" class="headerlink" title="2.2 ANR解决方案"></a>2.2 ANR解决方案</h4><pre><code>1. 开发中使用AndroidPerformanceMonitor检测卡顿进行处理；2. 任何耗时操作适当的移到异步里；3. 合理优化布局，避免OverDraw；4. 优化内存分配，减少GC频率。</code></pre><p>–注意：并不是所有的ANR类型都有章可循，很多偶发的ANR受限于当时发生的环境或者系统Bug；因此对ANR，更应该强调预防而不是分析。</p><h3 id="3-内存泄漏问题"><a href="#3-内存泄漏问题" class="headerlink" title="3. 内存泄漏问题"></a>3. 内存泄漏问题</h3><p>描述：创建的对象在堆上无法被GC回收，从而导致可用内存慢慢减少。</p><pre><code>1. 释放持有对象的引用，使GC及时回收内存；2. 及时关闭和释放无用资源；3. 系统服务尽量使用getApplicationContext()</code></pre><h3 id="4-内存抖动问题"><a href="#4-内存抖动问题" class="headerlink" title="4. 内存抖动问题"></a>4. 内存抖动问题</h3><p>描述：大量的对象被创建又在短时间内马上被释放（频繁GC会影响帧率，甚至卡顿）。</p><pre><code>1. 避免在循环中创建临时对象；2. 避免在onDraw中创建Paint、Bitmap对象等。3. 内存泄漏。</code></pre><h3 id="5-线程异步问题"><a href="#5-线程异步问题" class="headerlink" title="5. 线程异步问题"></a>5. 线程异步问题</h3><pre><code>1. 线程做的工作越多，它的优先级应该越小，以便它不会造成系统资源紧张。2. Thread、AsyncTask适合处理单个任务的场景；3. HandlerThread适合串行处理多任务的场景；4. IntentService适合处理与UI无关的多任务场景；5. 当需要并行的处理多任务之时，ThreadPoolExecutor是更好的选择，当然也可以使用AsyncTask传入自定义的线程池；6. 注意线程优先级的设置。</code></pre><h3 id="6-布局优化问题"><a href="#6-布局优化问题" class="headerlink" title="6. 布局优化问题"></a>6. 布局优化问题</h3><pre><code>1. 调试GPU过度绘制，将Overdraw降低到合理范围内；2. 减少嵌套层次及控件个数，保持view的树形结构尽量扁平（使用Hierarchy Viewer可以方便的查看），同时移除所有不需要渲染的view；3. 使用GPU配置渲染工具，定位出问题发生在具体哪个步骤，使用TraceView精准定位代码；4. 使用标签，Merge减少嵌套层次、ViewStub延迟初始化。</code></pre><h3 id="7-Overdraw过度绘制问题"><a href="#7-Overdraw过度绘制问题" class="headerlink" title="7. Overdraw过度绘制问题"></a>7. Overdraw过度绘制问题</h3><pre><code>理论上一个像素每次只绘制一次是最优的，但是由于重叠的布局导致一些像素会被多次绘制，Overdraw由此产生。GPU工具来检测Overdraw(蓝色是可以接受的颜色)：1. 原色 – 没有过度绘制 – 这部分的像素点只在屏幕上绘制了一次。2. 蓝色 – 1次过度绘制– 这部分的像素点只在屏幕上绘制了两次。3. 绿色 – 2次过度绘制 – 这部分的像素点只在屏幕上绘制了三次。4. 粉色 – 3次过度绘制 – 这部分的像素点只在屏幕上绘制了四次。5. 红色 – 4次过度绘制 – 这部分的像素点只在屏幕上绘制了五次。</code></pre><h3 id="8-Handler内存泄露问题"><a href="#8-Handler内存泄露问题" class="headerlink" title="8. Handler内存泄露问题"></a>8. Handler内存泄露问题</h3><p>– 注意：Handler需要使用Looper才能切换线程</p><p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据。数据存储后，只能在指定线程中获取存储的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可使用静态内部类 + 弱引用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WorkHandler mHandler = <span class="keyword">new</span> WorkHandler(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WorkHandler</span><span class="params">(MainActivity activity)</span> </span>&#123;</span><br><span class="line">  mActivity = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">  MainActivity activity = mActivity.get();</span><br><span class="line">  <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-APP卡顿问题&quot;&gt;&lt;a href=&quot;#1-APP卡顿问题&quot; class=&quot;headerlink&quot; title=&quot;1. APP卡顿问题&quot;&gt;&lt;/a&gt;1. APP卡顿问题&lt;/h3&gt;&lt;p&gt;原因：Android系统每隔16ms会发出VSYNC信号重绘我们的界面(Acti
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android WakeLock唤醒锁的使用</title>
    <link href="http://hawkyAndroid.github.io/2018/09/20/summary-wakelock-usage/"/>
    <id>http://hawkyAndroid.github.io/2018/09/20/summary-wakelock-usage/</id>
    <published>2018-09-20T12:31:26.000Z</published>
    <updated>2018-09-20T12:48:08.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WakeLock分类："><a href="#WakeLock分类：" class="headerlink" title="WakeLock分类："></a>WakeLock分类：</h3><table><thead><tr><th style="text-align:left">标记值</th><th style="text-align:left">CPU</th><th style="text-align:left">屏幕</th><th>键盘</th></tr></thead><tbody><tr><td style="text-align:left">PARTIAL_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">关闭</td><td>关闭</td></tr><tr><td style="text-align:left">SCREEN_DIM_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变暗</td><td>关闭</td></tr><tr><td style="text-align:left">SCREEN_BRIGHT_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变亮</td><td>关闭</td></tr><tr><td style="text-align:left">FULL_WAKE_LOCK</td><td style="text-align:left">开启</td><td style="text-align:left">变亮</td><td>变亮</td></tr></tbody></table><p>注意：API等级17 开始，FULL_WAKE_LOCK 已被弃用，应使用FLAG_KEEP_SCREEN_ON</p><h3 id="WakeLock使用时机"><a href="#WakeLock使用时机" class="headerlink" title="WakeLock使用时机"></a>WakeLock使用时机</h3><pre><code>WakeLock使用时机：如断线重连、重新登录这些关键逻辑的执行过程，一旦执行成功就应立即释放WakeLock。注意：①注意使用WakeLock最好设置超时时间，这样timeout后系统会自动release。②休眠的情况下如何唤醒来执行任务？用AlarmManager。如推送消息发送心跳包，获取信息等。</code></pre><h3 id="WakeLock使用实例"><a href="#WakeLock使用实例" class="headerlink" title="WakeLock使用实例"></a>WakeLock使用实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Flag Value                 CPU        Screen      Keyboard</span></span><br><span class="line"><span class="comment"> PARTIAL_WAKE_LOCK            On           Off         Off</span></span><br><span class="line"><span class="comment"> SCREEN_DIM_WAKE_LOCK         On           Dim         Off</span></span><br><span class="line"><span class="comment"> SCREEN_BRIGHT_WAKE_LOCK      On           Bright      Off</span></span><br><span class="line"><span class="comment"> FULL_WAKE_LOCK               On           Bright      Bright</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttWakeLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MQTT-WakeLock"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PowerManager.WakeLock mWakelock = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PowerManager.<span class="function">WakeLock <span class="title">createPartialWakeLock</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        PowerManager pm = (PowerManager) context.getApplicationContext()</span><br><span class="line">                .getSystemService(Context.POWER_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (pm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取唤醒锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout The timeout after which to release the wake lock, in milliseconds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(Context context, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mWakelock = createPartialWakeLock(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock != <span class="keyword">null</span> &amp;&amp; !mWakelock.isHeld()) &#123;</span><br><span class="line">            mWakelock.acquire(timeout);<span class="comment">// timeout后系统会自动release，无需手动调用release()</span></span><br><span class="line">            Log.d(TAG, <span class="string">"[MqttWakeLock] acquire WakeLock"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放唤醒锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mWakelock != <span class="keyword">null</span> &amp;&amp; mWakelock.isHeld()) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"[MqttWakeLock] release WakeLock"</span>);</span><br><span class="line">            mWakelock.release();</span><br><span class="line">            mWakelock = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WakeLock分类：&quot;&gt;&lt;a href=&quot;#WakeLock分类：&quot; class=&quot;headerlink&quot; title=&quot;WakeLock分类：&quot;&gt;&lt;/a&gt;WakeLock分类：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android系统广播实例</title>
    <link href="http://hawkyAndroid.github.io/2018/09/19/summary-system-broadcast/"/>
    <id>http://hawkyAndroid.github.io/2018/09/19/summary-system-broadcast/</id>
    <published>2018-09-19T13:52:26.000Z</published>
    <updated>2018-09-25T15:02:39.027Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-系统广播实例"><a href="#Android-系统广播实例" class="headerlink" title="Android 系统广播实例"></a>Android 系统广播实例</h2><pre><code>一般而言，应用被系统杀死后，基本无法接收系统广播。对于只用于应用内的广播，优先使用 LocalBroadcastManager 来进行注册和发送，LocalBroadcastManager 安全性更好，同时拥有更高的运行效率。</code></pre><h3 id="1-语言切换广播"><a href="#1-语言切换广播" class="headerlink" title="1. 语言切换广播"></a>1. 语言切换广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语言切换广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleChangedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_LOCALE_CHANGED.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"LOCALE-CHANGED"</span>, <span class="string">"[LocaleChangedReceiver] onReceive - "</span> + action);</span><br><span class="line">            ActivityUtils.finishAll();</span><br><span class="line">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">            <span class="comment">// System.exit(0);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML静态注册广播<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 语言切换广播监听 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:name</span>=<span class="string">"com.xxx.xxx.receiver.LocaleChangeReceiver"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.LOCALE_CHANGED"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-屏幕解锁广播"><a href="#2-屏幕解锁广播" class="headerlink" title="2. 屏幕解锁广播"></a>2. 屏幕解锁广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屏幕解锁广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPresentReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_USER_PRESENT.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"UNLOCK-SCREEN"</span>, <span class="string">"[UserPresentReceiver] onReceive - "</span> + action);</span><br><span class="line">            <span class="comment">//if (Utils.checkLogin()) &#123;</span></span><br><span class="line">              <span class="comment">// ...</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML静态注册广播<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 解锁广播监听 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.xxx.xxx.receiver.UserPresentReceiver"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.USER_PRESENT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="3-网络监听广播"><a href="#3-网络监听广播" class="headerlink" title="3. 网络监听广播"></a>3. 网络监听广播</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络监听广播</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetworkChangedReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String action = intent.getAction();</span><br><span class="line">        <span class="keyword">if</span> (ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) &#123;</span><br><span class="line">            Log.d(<span class="string">"NETWORK-CHANGE"</span>, <span class="string">"[NetworkChangedReceiver] onReceive - "</span> + action);</span><br><span class="line">            <span class="comment">// if (Utils.checkLogin() &amp;&amp; Utils.hasNetwork(context)) &#123;</span></span><br><span class="line">            <span class="comment">// do something....</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Android 7.0以后必须动态注册CONNECTIVITY_ACTION<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NetworkChangedReceiver networkReceiver = <span class="keyword">new</span> NetworkChangedReceiver();</span><br><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">registerReceiver(networkReceiver, filter);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-系统广播实例&quot;&gt;&lt;a href=&quot;#Android-系统广播实例&quot; class=&quot;headerlink&quot; title=&quot;Android 系统广播实例&quot;&gt;&lt;/a&gt;Android 系统广播实例&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一般而言，应用被系统杀死后，
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之电量篇</title>
    <link href="http://hawkyAndroid.github.io/2018/09/19/summary-performance-battery/"/>
    <id>http://hawkyAndroid.github.io/2018/09/19/summary-performance-battery/</id>
    <published>2018-09-19T10:55:25.000Z</published>
    <updated>2018-09-19T13:54:28.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="耗电的模块"><a href="#耗电的模块" class="headerlink" title="耗电的模块"></a>耗电的模块</h3><h4 id="1、CPU耗电"><a href="#1、CPU耗电" class="headerlink" title="1、CPU耗电"></a>1、CPU耗电</h4><pre><code>1.1 CPU长期频繁唤醒1.2 CPU长期高负荷工作</code></pre><h4 id="2、屏幕耗电"><a href="#2、屏幕耗电" class="headerlink" title="2、屏幕耗电"></a>2、屏幕耗电</h4><p>  LCD(液晶显示器)屏幕本身不发光。白色光线由背后的灯管发出，透过屏幕照射到我们的眼睛，所以我们能够看到图像。在显示黑色屏幕的时候，尽管LCD屏幕已经全黑了，但是背面的灯管还是发光，所以我们会在边缘看到白色的光斑。</p><p>  OLED屏幕的每个像素都是可以独立发光的。当显示全黑时，所有的像素都不发光，其效果近似关屏，因此黑色的显示效果要好于LCD屏幕，且功耗更低。</p><h4 id="3、Wifi、数据网络耗电"><a href="#3、Wifi、数据网络耗电" class="headerlink" title="3、Wifi、数据网络耗电"></a>3、Wifi、数据网络耗电</h4><pre><code>3.1 流量大小3.2 网络激活次数和间隔</code></pre><h4 id="4、GPS耗电"><a href="#4、GPS耗电" class="headerlink" title="4、GPS耗电"></a>4、GPS耗电</h4><p>GPS处于工作状态的时间长短直接决定了它是否耗电，所以非定位类的APP尽量不要请求用户开启GPS位置权限。</p><h3 id="电量优化方案及检测工具"><a href="#电量优化方案及检测工具" class="headerlink" title="电量优化方案及检测工具"></a>电量优化方案及检测工具</h3><h4 id="1、CPU"><a href="#1、CPU" class="headerlink" title="1、CPU"></a>1、CPU</h4><pre><code>1.1 锁屏、灭屏时：释放WakeLock、停止动画绘制、停止扫描等，尽量让CPU休眠。1.2 若功能需要使用AlarmManager，则可以考虑多个功能合并到一个AlarmManager，且使用过程中要考虑网络变化、用户登录状态改变等场景。</code></pre><p>可使用工具TraceView，获取进程执行信息，定位CPU占用率异常的问题。</p><h4 id="2、Wifi、网络传输"><a href="#2、Wifi、网络传输" class="headerlink" title="2、Wifi、网络传输"></a>2、Wifi、网络传输</h4><pre><code>2.1 压缩数据（流量）大小、请求集中处理、选择更快的传输方式。2.2 减少网络激活次数、增加网络请求间隔。</code></pre><h4 id="3、GPS"><a href="#3、GPS" class="headerlink" title="3、GPS"></a>3、GPS</h4><pre><code>3.1 不同的场景以及不同类型的App对定位更加需要个性化的区分（选择合适的Location Provider、及时注销定位监听、多模块使用定位尽量复用）。</code></pre><h4 id="4、Sensor"><a href="#4、Sensor" class="headerlink" title="4、Sensor"></a>4、Sensor</h4><p>使用传感器，选择合适的采样率，越高的采样率类型则越费电。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;耗电的模块&quot;&gt;&lt;a href=&quot;#耗电的模块&quot; class=&quot;headerlink&quot; title=&quot;耗电的模块&quot;&gt;&lt;/a&gt;耗电的模块&lt;/h3&gt;&lt;h4 id=&quot;1、CPU耗电&quot;&gt;&lt;a href=&quot;#1、CPU耗电&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之测试工具篇</title>
    <link href="http://hawkyAndroid.github.io/2018/08/29/summary-performance-detect-tools/"/>
    <id>http://hawkyAndroid.github.io/2018/08/29/summary-performance-detect-tools/</id>
    <published>2018-08-29T13:00:10.000Z</published>
    <updated>2018-09-30T15:44:42.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-常用检测方法及工具"><a href="#1-常用检测方法及工具" class="headerlink" title="1. 常用检测方法及工具"></a>1. 常用检测方法及工具</h2><h4 id="1-1-获取内存使用情况"><a href="#1-1-获取内存使用情况" class="headerlink" title="1.1 获取内存使用情况"></a>1.1 获取内存使用情况</h4><p>通过命令行adb shell dumpsys meminfo packagename查看内存详细占用情况</p><h4 id="1-2-获取堆内存最大值"><a href="#1-2-获取堆内存最大值" class="headerlink" title="1.2 获取堆内存最大值"></a>1.2 获取堆内存最大值</h4><p> DebugLog.e(“堆内存最大值：” + Runtime.getRuntime().maxMemory());</p><h4 id="1-3-反编译APK-可查看方法数"><a href="#1-3-反编译APK-可查看方法数" class="headerlink" title="1.3 反编译APK(可查看方法数)"></a>1.3 反编译APK(可查看方法数)</h4><p> <a href="https://github.com/google/android-classyshark" target="_blank" rel="noopener">https://github.com/google/android-classyshark</a></p><p>–注意：Android默认没有虚拟内存。App占用内存越多，被Low Memory Killer(劫富济贫)处理掉的机会越大。</p><h4 id="1-4-查看应用的进程优先级"><a href="#1-4-查看应用的进程优先级" class="headerlink" title="1.4 查看应用的进程优先级"></a>1.4 查看应用的进程优先级</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ adb ps | grep [package_name] #获取应用pid</span><br><span class="line"></span><br><span class="line">$ cat /proc/[pid]/ oom_adj  #获取进程优先级</span><br></pre></td></tr></table></figure><p>–注意：oom_adj越小、优先级越大</p><h4 id="1-5-查看ANR日志"><a href="#1-5-查看ANR日志" class="headerlink" title="1.5 查看ANR日志"></a>1.5 查看ANR日志</h4><p>adb pull /data/anr/traces.txt e:\trace.txt</p><h4 id="1-6-查看嵌套层次及控件个数"><a href="#1-6-查看嵌套层次及控件个数" class="headerlink" title="1.6 查看嵌套层次及控件个数"></a>1.6 查看嵌套层次及控件个数</h4><p>–检测工具：Hierarchy Viewer –&gt; <a href="https://github.com/romainguy/ViewServer" target="_blank" rel="noopener">https://github.com/romainguy/ViewServer</a></p><h4 id="1-7-检测内存泄漏"><a href="#1-7-检测内存泄漏" class="headerlink" title="1.7 检测内存泄漏"></a>1.7 检测内存泄漏</h4><p><a href="https://github.com/markzhai/AndroidPerformanceMonitor" target="_blank" rel="noopener">BlockCanary</a>(A transparent ui-block detection library for Android)</p><h2 id="2-网络检测工具"><a href="#2-网络检测工具" class="headerlink" title="2. 网络检测工具"></a>2. 网络检测工具</h2><h4 id="2-1-抓包工具-入门级-：Fiddler"><a href="#2-1-抓包工具-入门级-：Fiddler" class="headerlink" title="2.1. 抓包工具(入门级)：Fiddler"></a>2.1. 抓包工具(入门级)：Fiddler</h4><p>Fiddler是一款http协议调试代理工具，可延迟HTTP返回。</p><h4 id="2-2-模拟网络请求：Postman-安装谷歌插件即可-chrome-apps"><a href="#2-2-模拟网络请求：Postman-安装谷歌插件即可-chrome-apps" class="headerlink" title="2.2. 模拟网络请求：Postman(安装谷歌插件即可) chrome://apps"></a>2.2. 模拟网络请求：Postman(安装谷歌插件即可) chrome://apps</h4><h4 id="2-3-Stecho-调试神器-chrome-inspect"><a href="#2-3-Stecho-调试神器-chrome-inspect" class="headerlink" title="2.3. Stecho(调试神器) chrome://inspect"></a>2.3. <a href="http://facebook.github.io/stetho" target="_blank" rel="noopener">Stecho</a>(调试神器) chrome://inspect</h4><p>可用于查看布局层级、网络抓包、查看数据库、SharedPreferences文件等数据。具体配置及初始化见官网。</p><h4 id="2-4-协议-流量-分析神器：WireShark"><a href="#2-4-协议-流量-分析神器：WireShark" class="headerlink" title="2.4. 协议(流量)分析神器：WireShark"></a>2.4. 协议(流量)分析神器：<a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">WireShark</a></h4><p>–  WireShark可查看封包详细信息如下：</p><pre><code>Frame:   物理层的数据帧概况Ethernet II: 数据链路层以太网帧头部信息Internet Protocol Version 4: 网络层IP包头部信息Transmission Control Protocol:  传输层T的数据段头部信息，此处是TCPHypertext Transfer Protocol:  应用层的信息，此处是HTTP协议</code></pre><p>– 常用过滤方式</p><pre><code>http.request.method == &quot;POST&quot; &amp;&amp; ip.src == 192.168.xxx.xxxhttp.request.method == &quot;GET&quot; || ip.dst == 192.168.xxx.xxxip.dst == 192.168.xxx.xxx &amp;&amp; udpip.src == 192.168.xxx.xxx || tcptcp.port == XXXXtcp.dstport == XXXXhttp.host == &quot;www.xxx.com&quot;</code></pre><h4 id="2-5-验收测试工具：Fitnesse"><a href="#2-5-验收测试工具：Fitnesse" class="headerlink" title="2.5. 验收测试工具：Fitnesse"></a>2.5. 验收测试工具：<a href="http://www.fitnesse.org/FitNesseDownload" target="_blank" rel="noopener">Fitnesse</a></h4><p><a href="http://www.sohu.com/a/133937049_470023" target="_blank" rel="noopener">Fitnesse使用参考</a> 启动：java -jar D:\fitnesse-standalone.jar -p 2222</p><p>使用实例：FitNesse验收测试Case</p><pre><code>!define TEST_SYSTEM {slim}!path D:\eclipse\workspace\fitnesse\bin|import               ||com.leo.restful      ||com.leo.restful.Calculator||first|second|addition?|minus?|multiply?|divide?|doPost?||4    |3     |         |      |         |       |       |</code></pre><h4 id="2-6-压力测试工具：JMeter、XMeter-收费"><a href="#2-6-压力测试工具：JMeter、XMeter-收费" class="headerlink" title="2.6. 压力测试工具：JMeter、XMeter(收费)"></a>2.6. 压力测试工具：JMeter、XMeter(收费)</h4><p><a href="https://www.cnblogs.com/st-leslie/p/5185376.html" target="_blank" rel="noopener">HTTP测试参考</a>    <a href="https://www.cnblogs.com/saryli/p/6928051.html" target="_blank" rel="noopener">MQTT测试参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-常用检测方法及工具&quot;&gt;&lt;a href=&quot;#1-常用检测方法及工具&quot; class=&quot;headerlink&quot; title=&quot;1. 常用检测方法及工具&quot;&gt;&lt;/a&gt;1. 常用检测方法及工具&lt;/h2&gt;&lt;h4 id=&quot;1-1-获取内存使用情况&quot;&gt;&lt;a href=&quot;#1-1
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android性能优化之磁盘篇</title>
    <link href="http://hawkyAndroid.github.io/2018/08/28/summary-performance-disk/"/>
    <id>http://hawkyAndroid.github.io/2018/08/28/summary-performance-disk/</id>
    <published>2018-08-28T13:15:25.000Z</published>
    <updated>2018-09-30T15:45:20.638Z</updated>
    
    <content type="html"><![CDATA[<p>–参考书籍：《Android移动性能实战》</p><h2 id="1-StrictMode"><a href="#1-StrictMode" class="headerlink" title="1. StrictMode"></a>1. StrictMode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Applcation/Activity的onCreate方法中使用严苛模式：</span></span><br><span class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">    <span class="comment">// 严苛模式-1：使用线程策略</span></span><br><span class="line">    StrictMode.setThreadPolicy(<span class="keyword">new</span> StrictMode.ThreadPolicy.Builder()</span><br><span class="line">            .detectDiskReads()</span><br><span class="line">            .detectDiskWrites()</span><br><span class="line">            .detectNetwork()</span><br><span class="line">            .penaltyLog()</span><br><span class="line">            .build());</span><br><span class="line">    <span class="comment">// 严苛模式-2：使用VM策略（可与线程策略一起使用）</span></span><br><span class="line">    StrictMode.setVmPolicy(<span class="keyword">new</span> StrictMode.VmPolicy.Builder()</span><br><span class="line">            .detectActivityLeaks()</span><br><span class="line">            .detectLeakedSqlLiteObjects()</span><br><span class="line">            .penaltyLog()</span><br><span class="line">            .build());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">---查看日志： adb logcat | grep StrictMode</span><br><span class="line">其它用法：直接提示(自定义) StrictMode.noteSlowCall(<span class="string">"slowCall timeout="</span> + timeout);</span><br></pre></td></tr></table></figure><h2 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="2. 文件操作"></a>2. 文件操作</h2><ol><li><p>避免冗余读/写：要尽量延迟写入(如：对于SharedPreferences，只保留最后一个apply即可)。</p></li><li><p>减少I/O操作次数：使用6~8KB Buffer读/写、批量更新数据库使用事务。</p></li><li><p>使用LruCache和DiskLruCache做内存和磁盘缓存；</p></li><li><p>不建议在进程间通信中使用SharedPreferences，因为高并发的读写访问可能会丢失数据。</p></li></ol><h2 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3. 数据库操作"></a>3. 数据库操作</h2><h4 id="3-1-缓存数据库连接"><a href="#3-1-缓存数据库连接" class="headerlink" title="3.1  缓存数据库连接"></a>3.1  缓存数据库连接</h4><p>数据库在打开后，先不要关闭，在应用程序退出时再关闭。</p><h4 id="3-2-使用索引"><a href="#3-2-使用索引" class="headerlink" title="3.2 使用索引"></a>3.2 使用索引</h4><p>可提高查询速度，但由于要维护索引会使插入效率有所降低。</p><h4 id="3-3-尽量不使用Autoincrement关键字"><a href="#3-3-尽量不使用Autoincrement关键字" class="headerlink" title="3.3  尽量不使用Autoincrement关键字"></a>3.3  尽量不使用Autoincrement关键字</h4><ol><li><p>作用：会保证主键是严格单调递增的，如果行号的最大值被用过，那么插入新数据时会包SQLITE_FULL错误。</p></li><li><p>原理：SQLite创建一个叫sqlite_sequence的内部表来记录该表使用的最大行号，维护sqlite_sequence表带来的额外开销会导致INSERT效率降低。</p></li><li><p>总结：autoincrement会增加CPU、内存、磁盘空间和磁盘I/O的负担，所以尽量不要用，除非必需(如：客户端需要拿该主键和服务器校对数据，需要保证主键唯一性)</p></li></ol><h4 id="3-4-数据库操作移到工作线程"><a href="#3-4-数据库操作移到工作线程" class="headerlink" title="3.4 数据库操作移到工作线程"></a>3.4 数据库操作移到工作线程</h4><p>  数据库及IO操作都移到工作线程(Thread)，并且设置线程优先级为THREAD_PRIORITY_BACKGROUND，这样工作线程最多能获取到10%的时间片，优先保证主线程执行。</p><h2 id="4-Bitmap操作"><a href="#4-Bitmap操作" class="headerlink" title="4. Bitmap操作"></a>4. Bitmap操作</h2><h4 id="4-1-提高Bitmap解码效率"><a href="#4-1-提高Bitmap解码效率" class="headerlink" title="4.1 提高Bitmap解码效率"></a>4.1 提高Bitmap解码效率</h4><p>可考虑使用decodeStream、decodeResourceStream，并传入BufferedInputStream参数。</p><h4 id="4-2-TinyPng"><a href="#4-2-TinyPng" class="headerlink" title="4.2 TinyPng"></a>4.2 TinyPng</h4><p>由于PNG是一种无损格式，JPG是有损格式。所有：小尺寸、色彩较少或者有alpha通道透明度的时候，使用PNG; 大尺寸、色彩渐变多的使用JPG。<br>—图片压缩工具：<a href="https://tinypng.com/" target="_blank" rel="noopener">TinyPng</a></p><h4 id="4-3-合理选择Bitmap-Config"><a href="#4-3-合理选择Bitmap-Config" class="headerlink" title="4.3 合理选择Bitmap.Config"></a>4.3 合理选择Bitmap.Config</h4><p>Bitmap.Config用来描述图片的像素是怎么被存储的：</p><pre><code>ARGB_8888: 每个像素4字节. 共32位，默认设置。Alpha_8: 只保存透明度，共8位，1字节。ARGB_4444: 共16位，2字节。RGB_565:共16位，2字节，只存储RGB值(推荐)。</code></pre><h4 id="4-4-WebP格式图片"><a href="#4-4-WebP格式图片" class="headerlink" title="4.4 WebP格式图片"></a>4.4 WebP格式图片</h4><p>WebP既支持有损压缩也支持无损压缩。体积小，但占用CPU内存是JPG格式的3倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;–参考书籍：《Android移动性能实战》&lt;/p&gt;
&lt;h2 id=&quot;1-StrictMode&quot;&gt;&lt;a href=&quot;#1-StrictMode&quot; class=&quot;headerlink&quot; title=&quot;1. StrictMode&quot;&gt;&lt;/a&gt;1. StrictMode&lt;/h2&gt;&lt;f
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android开发规范总结</title>
    <link href="http://hawkyAndroid.github.io/2018/07/29/summary-develop-standard/"/>
    <id>http://hawkyAndroid.github.io/2018/07/29/summary-develop-standard/</id>
    <published>2018-07-29T13:14:30.000Z</published>
    <updated>2018-09-19T13:48:26.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-命令规范"><a href="#Android-命令规范" class="headerlink" title="Android 命令规范"></a>Android 命令规范</h3><ol><li><p>类名：名词+动词+组件名。(activity/fragment/adapter/receiver/provider/service)</p></li><li><p>布局组件ID：组件缩写_<em>模块缩写</em>具体业务</p></li><li><p>组件变量：m组件缩写+具体含义，如mIvAvatar</p></li><li><p>string.xml：模块名简称<em>activity名字简称</em>具体意思简称</p></li><li><p>方法命名：<br>initXX（初始化）、<br>isXX/checkXX（检查数据）、<br>handleXX/processXX（处理数据）、<br>displayXX/showXX（显示控件/数据）、<br>updateXX（更新控件/数据）、<br>saveXX/insertXX（保存数据）、<br>resetXX（重置控件/数据）、<br>drawXX（绘制控件）</p></li></ol><h3 id="代码设计原则"><a href="#代码设计原则" class="headerlink" title="代码设计原则"></a>代码设计原则</h3><p>1)找出应用中可能需要改变的地方，把它们“抽取”出来并进行“封装”。</p><p>2)针对接口编程。</p><p>3)多用组合，少用继承。</p><p>4)对扩展开放，对修改关闭。</p><p>5)依赖倒置：要依赖抽象(不管是高层组件还是底层组件)，不要依赖具体类。</p><h3 id="代码注释规范"><a href="#代码注释规范" class="headerlink" title="代码注释规范"></a>代码注释规范</h3><p>File-&gt;Settings-&gt;Editor-&gt;Code Style-&gt;File and Code Templates</p><p>Files-&gt; Class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Project: $&#123;PROJECT_NAME&#125;</span></span><br><span class="line"><span class="comment">* @FileName: $&#123;NAME&#125;</span></span><br><span class="line"><span class="comment">* @Package $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* @Author lhy_ycu@163.com</span></span><br><span class="line"><span class="comment">* @Date $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @Copyright: $&#123;YEAR&#125; www.hank-tech.com Inc. All rights reserved.</span></span><br><span class="line"><span class="comment">* @Version V1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>Includes-&gt; File Header</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Android-命令规范&quot;&gt;&lt;a href=&quot;#Android-命令规范&quot; class=&quot;headerlink&quot; title=&quot;Android 命令规范&quot;&gt;&lt;/a&gt;Android 命令规范&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类名：名词+动词+组件名。(activit
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android屏幕适配</title>
    <link href="http://hawkyAndroid.github.io/2018/07/29/summary-android-screen-adaptation/"/>
    <id>http://hawkyAndroid.github.io/2018/07/29/summary-android-screen-adaptation/</id>
    <published>2018-07-29T09:34:15.000Z</published>
    <updated>2018-07-29T12:26:19.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Res资源下的文件夹说明"><a href="#Res资源下的文件夹说明" class="headerlink" title="Res资源下的文件夹说明"></a>Res资源下的文件夹说明</h3><ol><li>anim：存放组件动画文件。</li><li>drawable：存放组件属性(含选择器)样式文件、.9图片。</li><li>drawable-xxhdpi：存放图片。</li><li>mipmap-xxhdpi：存放图标。</li><li>raw：原生流(音视频)文件。</li></ol><h3 id="Android-屏幕适配方案"><a href="#Android-屏幕适配方案" class="headerlink" title="Android 屏幕适配方案"></a>Android 屏幕适配方案</h3><ol><li><p>适应大部分屏幕时：使用自动生多个屏幕分辨率values-XXXxXXX/dimen配置文件<a href="https://blog.csdn.net/lmj623565791/article/details/45460089" target="_blank" rel="noopener">工具</a>。适用范围：边距、字体大小等都用px(像素)。注意：虚拟按键时需要减去虚拟按键高度(略小于差值也可以)。</p></li><li><p>适应异形、宽屏、平板等小部分屏幕时：需要手动编写多个相应的layout-XXXxXXX/actvity_xxx文件。</p></li><li><p>横竖屏切换时：</p></li></ol><p>①新建layout-land（横向布局文件夹） 和 layout-port （竖想布局文件夹），然后要在配置Activity的时候进行如下的配置：android:configChanges=”keyboardHidden|orientation”</p><p>②不重启Activity：一般需要重写Activity的onConfigurationChanged方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">    <span class="comment">//切换到竖屏  </span></span><br><span class="line">    <span class="comment">//修改布局文件  </span></span><br><span class="line">    setContentView(R.layout.activity_main);  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) &#123;</span><br><span class="line">    <span class="comment">//切换到横屏  </span></span><br><span class="line">     <span class="comment">//修改布局文件  </span></span><br><span class="line">     setContentView(R.layout.activity_main);  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③重启Activity：一般需要重写onSaveInstanceState、onRestoreInstanceState方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.Resources;</span><br><span class="line"><span class="keyword">import</span> android.util.DisplayMetrics;</span><br><span class="line"><span class="keyword">import</span> android.util.TypedValue;</span><br><span class="line"><span class="keyword">import</span> android.view.Display;</span><br><span class="line"><span class="keyword">import</span> android.view.WindowManager;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 像素单位转换工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DensityUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DensityUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* cannot be instantiated */</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"cannot be instantiated"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dp转px</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(Context context, <span class="keyword">float</span> dpVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dpVal, context.getResources().getDisplayMetrics());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dp转px</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dp2px</span><span class="params">(<span class="keyword">float</span> dpVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> scale = Resources.getSystem().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (dpVal * scale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * px转dp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">px2dp</span><span class="params">(Context context, <span class="keyword">float</span> pxVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> scale = context.getResources().getDisplayMetrics().density;</span><br><span class="line">        <span class="keyword">return</span> (pxVal / scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sp转px</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, spVal, context.getResources().getDisplayMetrics());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * px转sp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">px2sp</span><span class="params">(Context context, <span class="keyword">float</span> pxVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (pxVal / context.getResources().getDisplayMetrics().scaledDensity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布局参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LinearLayout.<span class="function">LayoutParams <span class="title">getLayoutParams</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, DensityUtils.dp2px(height));</span><br><span class="line">        layoutParams.setMargins(DensityUtils.dp2px(<span class="number">10</span>), DensityUtils.dp2px(<span class="number">10</span>), DensityUtils.dp2px(<span class="number">10</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> layoutParams;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取屏幕原始尺寸高度（含虚拟功能键高度）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalHeight</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        Display display = windowManager.getDefaultDisplay();</span><br><span class="line">        DisplayMetrics displayMetrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class c = Class.forName(<span class="string">"android.view.Display"</span>);</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            Method method = c.getMethod(<span class="string">"getRealMetrics"</span>, DisplayMetrics.class);</span><br><span class="line">            method.invoke(display, displayMetrics);</span><br><span class="line">            <span class="keyword">return</span> displayMetrics.heightPixels;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取屏幕内容高度(不含虚拟按键)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getScreenHeight</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        WindowManager wm = (WindowManager) context</span><br><span class="line">                .getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">        DisplayMetrics outMetrics = <span class="keyword">new</span> DisplayMetrics();</span><br><span class="line">        wm.getDefaultDisplay().getMetrics(outMetrics);</span><br><span class="line">        <span class="keyword">return</span> outMetrics.heightPixels;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附上像素文件生成工具(来源网络)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * values-XXXxXXX/dimens.xml 像素文件生成工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateValueFiles</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> baseW;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> baseH;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String dirStr = <span class="string">"./res"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String WTemplate = <span class="string">"    &lt;dimen name=\"x&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String HTemplate = <span class="string">"    &lt;dimen name=\"y&#123;0&#125;\"&gt;&#123;1&#125;px&lt;/dimen&gt;\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;0&#125;-HEIGHT</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String VALUE_TEMPLATE = <span class="string">"values-&#123;0&#125;x&#123;1&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SUPPORT_DIMESION = <span class="string">"320,480;480,800;480,854;540,960;600,1024;720,1184;720,1196;720,1280;768,1024;800,1280;1080,1812;1080,1920;1440,2560;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String supportStr = SUPPORT_DIMESION;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GenerateValueFiles</span><span class="params">(<span class="keyword">int</span> baseX, <span class="keyword">int</span> baseY, String supportStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.baseW = baseX;</span><br><span class="line"><span class="keyword">this</span>.baseH = baseY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.supportStr.contains(baseX + <span class="string">","</span> + baseY)) &#123;</span><br><span class="line"><span class="keyword">this</span>.supportStr += baseX + <span class="string">","</span> + baseY + <span class="string">";"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.supportStr += validateInput(supportStr);</span><br><span class="line"></span><br><span class="line">System.out.println(supportStr);</span><br><span class="line"></span><br><span class="line">File dir = <span class="keyword">new</span> File(dirStr);</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">dir.mkdir();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(dir.getAbsoluteFile());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> supportStr</span></span><br><span class="line"><span class="comment"> *            w,h_...w,h;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">validateInput</span><span class="params">(String supportStr)</span> </span>&#123;</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String[] vals = supportStr.split(<span class="string">"_"</span>);</span><br><span class="line"><span class="keyword">int</span> w = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> h = -<span class="number">1</span>;</span><br><span class="line">String[] wh;</span><br><span class="line"><span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (val == <span class="keyword">null</span> || val.trim().length() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">wh = val.split(<span class="string">","</span>);</span><br><span class="line">w = Integer.parseInt(wh[<span class="number">0</span>]);</span><br><span class="line">h = Integer.parseInt(wh[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"skip invalidate params : w,h = "</span> + val);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(w + <span class="string">","</span> + h + <span class="string">";"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String[] vals = supportStr.split(<span class="string">";"</span>);</span><br><span class="line"><span class="keyword">for</span> (String val : vals) &#123;</span><br><span class="line">String[] wh = val.split(<span class="string">","</span>);</span><br><span class="line">generateXmlFile(Integer.parseInt(wh[<span class="number">0</span>]), Integer.parseInt(wh[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateXmlFile</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer sbForWidth = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sbForWidth.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">sbForWidth.append(<span class="string">"&lt;resources&gt;\n"</span>);</span><br><span class="line"><span class="keyword">float</span> cellw = w * <span class="number">1.0f</span> / baseW;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"width : "</span> + w + <span class="string">","</span> + baseW + <span class="string">","</span> + cellw);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseW; i++) &#123;</span><br><span class="line">sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>, change(cellw * i) + <span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line">sbForWidth.append(WTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseW + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>, w + <span class="string">""</span>));</span><br><span class="line">sbForWidth.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">StringBuffer sbForHeight = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sbForHeight.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n"</span>);</span><br><span class="line">sbForHeight.append(<span class="string">"&lt;resources&gt;\n"</span>);</span><br><span class="line"><span class="keyword">float</span> cellh = h * <span class="number">1.0f</span> / baseH;</span><br><span class="line">System.out.println(<span class="string">"height : "</span> + h + <span class="string">","</span> + baseH + <span class="string">","</span> + cellh);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; baseH; i++) &#123;</span><br><span class="line">sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, i + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>, change(cellh * i) + <span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line">sbForHeight.append(HTemplate.replace(<span class="string">"&#123;0&#125;"</span>, baseH + <span class="string">""</span>).replace(<span class="string">"&#123;1&#125;"</span>, h + <span class="string">""</span>));</span><br><span class="line">sbForHeight.append(<span class="string">"&lt;/resources&gt;"</span>);</span><br><span class="line"></span><br><span class="line">File fileDir = <span class="keyword">new</span> File(dirStr + File.separator + VALUE_TEMPLATE.replace(<span class="string">"&#123;0&#125;"</span>, h + <span class="string">""</span>)<span class="comment">//</span></span><br><span class="line">.replace(<span class="string">"&#123;1&#125;"</span>, w + <span class="string">""</span>));</span><br><span class="line">fileDir.mkdir();</span><br><span class="line"></span><br><span class="line">File layxFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_x.xml"</span>);</span><br><span class="line">File layyFile = <span class="keyword">new</span> File(fileDir.getAbsolutePath(), <span class="string">"lay_y.xml"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layxFile));</span><br><span class="line">pw.print(sbForWidth.toString());</span><br><span class="line">pw.close();</span><br><span class="line">pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileOutputStream(layyFile));</span><br><span class="line">pw.print(sbForHeight.toString());</span><br><span class="line">pw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">change</span><span class="params">(<span class="keyword">float</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = (<span class="keyword">int</span>) (a * <span class="number">100</span>);</span><br><span class="line"><span class="keyword">return</span> temp / <span class="number">100f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> baseW = <span class="number">320</span>;</span><br><span class="line"><span class="keyword">int</span> baseH = <span class="number">400</span>;</span><br><span class="line">String addition = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (args.length &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">addition = args[<span class="number">2</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">baseW = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">baseH = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">addition = args[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">System.err.println(<span class="string">"right input params : java -jar xxx.jar width height w,h_w,h_..._w,h;"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.exit(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> GenerateValueFiles(baseW, baseH, addition).generate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Res资源下的文件夹说明&quot;&gt;&lt;a href=&quot;#Res资源下的文件夹说明&quot; class=&quot;headerlink&quot; title=&quot;Res资源下的文件夹说明&quot;&gt;&lt;/a&gt;Res资源下的文件夹说明&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;anim：存放组件动画文件。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Activity的启动模式及其应用场景</title>
    <link href="http://hawkyAndroid.github.io/2018/07/19/summary-activity-launch-mode/"/>
    <id>http://hawkyAndroid.github.io/2018/07/19/summary-activity-launch-mode/</id>
    <published>2018-07-19T13:31:10.000Z</published>
    <updated>2018-09-30T15:46:47.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Task任务栈"><a href="#1-Task任务栈" class="headerlink" title="1. Task任务栈"></a>1. Task任务栈</h3><p>(1)程序打开时就创建了一个任务栈, 用于存储当前程序的activity,所有的activity属于一个任务栈。</p><p>(2)一个任务栈包含了一个activity的集合, 去有序的选择哪一个activity和用户进行交互:只有在任务栈栈顶的activity才可以跟用户进行交互。</p><p>(3)任务栈可以移动到后台, 并且保留了每一个activity的状态. 并且有序的给用户列出它们的任务, 而且还不丢失它们状态信息。</p><p>(4)退出应用程序时：当把所有的任务栈中所有的activity清除出栈时,任务栈会被销毁,程序退出。</p><h3 id="2-LaunchMode启动模式"><a href="#2-LaunchMode启动模式" class="headerlink" title="2.LaunchMode启动模式"></a>2.LaunchMode启动模式</h3><p>启动模式（launchMode）在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。</p><h3 id="3-Activity一共有4个启动模式"><a href="#3-Activity一共有4个启动模式" class="headerlink" title="3 Activity一共有4个启动模式"></a>3 Activity一共有4个启动模式</h3><h4 id="3-1-standard"><a href="#3-1-standard" class="headerlink" title="3.1 standard"></a>3.1 standard</h4><p>standard模式是默认的启动模式。不管有没有已存在的实例，都生成新的实例。</p><h4 id="3-2-singleTop-栈顶复用"><a href="#3-2-singleTop-栈顶复用" class="headerlink" title="3.2 singleTop(栈顶复用)"></a>3.2 singleTop(栈顶复用)</h4><p>singleTop启动模式，如果Activity实例已经位于栈顶，则不再生成新的实例；反则生成新的实例。使用场景：singleTop适合接收通知启动的内容显示页面。例如，某个新闻客户端的新闻内容页面。</p><h4 id="3-3-singleTask-栈内复用-单例模式"><a href="#3-3-singleTask-栈内复用-单例模式" class="headerlink" title="3.3 singleTask(栈内复用-单例模式)"></a>3.3 singleTask(栈内复用-单例模式)</h4><p>singleTask启动模式，发现有对应的Activity实例，则使此Activity实例之上的其它的Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。使用场景：例如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</p><h4 id="3-4-singleInstance"><a href="#3-4-singleInstance" class="headerlink" title="3.4 singleInstance"></a>3.4 singleInstance</h4><p>singleInstance这种启动模式比较特殊，因为它会启用一个新的栈结构，将Activity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。使用场景：singleInstance适合需要与程序分离开的页面。例如闹铃提醒(将闹铃提醒与闹铃设置分离)， 呼叫来电界面等。</p><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><p>  1&gt; Activity被异常销毁关键执行顺序：onSaveInstanceState(保存数据)、onStop、onStart、onRestoreInstanceState(恢复数据)。而onPause可能执行在onSaveInstanceState前，也可能在其后。</p><p>  2&gt; onPause：主要做一些存储数据、停止动画等工作；onPause必须执行完，新的Activity的onResume才会执行。</p><p>  3&gt; 如果一个进程中没有四大组件在执行，那么这个进程将很快被系统杀死。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Task任务栈&quot;&gt;&lt;a href=&quot;#1-Task任务栈&quot; class=&quot;headerlink&quot; title=&quot;1. Task任务栈&quot;&gt;&lt;/a&gt;1. Task任务栈&lt;/h3&gt;&lt;p&gt;(1)程序打开时就创建了一个任务栈, 用于存储当前程序的activity,所有的
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>UDP 使用详解</title>
    <link href="http://hawkyAndroid.github.io/2018/06/01/summary-udp-01/"/>
    <id>http://hawkyAndroid.github.io/2018/06/01/summary-udp-01/</id>
    <published>2018-06-01T15:22:24.000Z</published>
    <updated>2018-06-01T14:54:34.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UDP的使用范例"><a href="#UDP的使用范例" class="headerlink" title="UDP的使用范例"></a>UDP的使用范例</h3><h4 id="BroadcastData-广播数据包对象"><a href="#BroadcastData-广播数据包对象" class="headerlink" title="BroadcastData -广播数据包对象"></a>BroadcastData -广播数据包对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收的广播数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastData</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PacketRx packetRx;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BroadcastData</span><span class="params">(PacketRx packetRx, String ip, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.packetRx = packetRx;</span><br><span class="line"><span class="keyword">this</span>.ip = ip;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PacketRx <span class="title">getPacketRx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> packetRx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BroadcastRunnable-广播发送线程"><a href="#BroadcastRunnable-广播发送线程" class="headerlink" title="BroadcastRunnable -广播发送线程"></a>BroadcastRunnable -广播发送线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP广播一直发送：每秒发1次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BroadcastRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIXED_BROADCAST_IP = <span class="string">"255.255.255.255"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIXED_BROADCAST_PORT = <span class="number">9002</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> FIXED_BROADCAST_PERIOD = <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DatagramSocket mSocket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BroadcastRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止广播</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopBroadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!mSocket.isClosed()) &#123;</span><br><span class="line">mSocket.close();</span><br><span class="line">&#125;</span><br><span class="line">mSocket.disconnect();</span><br><span class="line">mSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start BroadcastThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">mSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">byte</span>[] data; <span class="comment">// 待发送的数据包、待赋值</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length,</span><br><span class="line"><span class="keyword">new</span> InetSocketAddress(FIXED_BROADCAST_IP, FIXED_BROADCAST_PORT));</span><br><span class="line">System.out.println(<span class="string">"Broadcast Address:"</span> + packet.getSocketAddress());</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">mSocket.send(packet);</span><br><span class="line">System.out.println(<span class="string">"Broadcast data send success &gt;&gt;"</span> + bytesToHexString(data));</span><br><span class="line">Thread.sleep(FIXED_BROADCAST_PERIOD);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopBroadcast();</span><br><span class="line">System.out.println(<span class="string">"-----end BroadcastThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReceiveRunnable-广播接收线程"><a href="#ReceiveRunnable-广播接收线程" class="headerlink" title="ReceiveRunnable -广播接收线程"></a>ReceiveRunnable -广播接收线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收UDP数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ReceiveRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIXED_BROADCAST_IP = <span class="string">"255.255.255.255"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIXED_BROADCAST_PORT = <span class="number">58888</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DatagramSocket mSocket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BroadcastDataListener mOnDataListener;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReceiveRunnable</span><span class="params">(BroadcastDataListener listener)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mOnDataListener = listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止广播</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopBroadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!mSocket.isClosed()) &#123;</span><br><span class="line">mSocket.close();</span><br><span class="line">&#125;</span><br><span class="line">mSocket.disconnect();</span><br><span class="line">mSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start ReceiveThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mSocket = <span class="keyword">new</span> DatagramSocket(<span class="keyword">new</span> InetSocketAddress(FIXED_BROADCAST_IP, FIXED_BROADCAST_PORT));</span><br><span class="line">mSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];<span class="comment">// 大小需要结合实际情况来定</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length);</span><br><span class="line">mSocket.receive(packet);<span class="comment">// 接收广播数据包</span></span><br><span class="line"><span class="comment">// 这里可将data解析（解密）封装成数据包对象packetRx</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">System.out.println(<span class="string">"Socket Address:"</span> + packet.getSocketAddress());</span><br><span class="line">System.out.println(<span class="string">"receive broadcast data--&lt;&lt;"</span> + packetRx);</span><br><span class="line"><span class="keyword">if</span> (mOnDataListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">mOnDataListener.onReceiveData(<span class="keyword">new</span> BroadcastData(packetRx, packet.getAddress().getHostAddress(), packet.getPort()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopBroadcast();</span><br><span class="line">System.out.println(<span class="string">"-----end ReceiveThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BroadcastDataListener-广播数据包监听"><a href="#BroadcastDataListener-广播数据包监听" class="headerlink" title="BroadcastDataListener -广播数据包监听"></a>BroadcastDataListener -广播数据包监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听广播数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BroadcastDataListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceiveData</span><span class="params">(BroadcastData broadcastData)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolManager-线程池管理"><a href="#ThreadPoolManager-线程池管理" class="headerlink" title="ThreadPoolManager -线程池管理"></a>ThreadPoolManager -线程池管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span></span><br><span class="line">        service = Executors.newCachedThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        service.execute(runnable);<span class="comment">// 仍到线程池中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolManager INSTANCE = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UDP的使用范例&quot;&gt;&lt;a href=&quot;#UDP的使用范例&quot; class=&quot;headerlink&quot; title=&quot;UDP的使用范例&quot;&gt;&lt;/a&gt;UDP的使用范例&lt;/h3&gt;&lt;h4 id=&quot;BroadcastData-广播数据包对象&quot;&gt;&lt;a href=&quot;#Broadcas
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>TCP 使用详解</title>
    <link href="http://hawkyAndroid.github.io/2018/06/01/summary-tcp-01/"/>
    <id>http://hawkyAndroid.github.io/2018/06/01/summary-tcp-01/</id>
    <published>2018-06-01T14:12:26.000Z</published>
    <updated>2018-06-01T14:54:38.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP的使用范例"><a href="#TCP的使用范例" class="headerlink" title="TCP的使用范例"></a>TCP的使用范例</h3><h4 id="SocketClient-客户端对象"><a href="#SocketClient-客户端对象" class="headerlink" title="SocketClient -客户端对象"></a>SocketClient -客户端对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SocketClient</span><span class="params">(Socket socket, String ip, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.socket = socket;</span><br><span class="line"><span class="keyword">this</span>.ip = ip;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送数据给Socket客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> *            加密后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">socket.getOutputStream().write(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (socket == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket.getInputStream().close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket.getOutputStream().close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(ip + <span class="string">"----Socket client closed----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SocketClient [socket="</span> + socket + <span class="string">", ip="</span> + ip + <span class="string">", port="</span> + port + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCPClientRunnable-客户端线程"><a href="#TCPClientRunnable-客户端线程" class="headerlink" title="TCPClientRunnable -客户端线程"></a>TCPClientRunnable -客户端线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单独封装一个线程来处理客户端接收的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TCPClientRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> SocketClient mSocketClient;<span class="comment">// Socket客户端</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TCPClientRunnable</span><span class="params">(SocketClient socketClient)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mSocketClient = socketClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start TCPClientThread-----"</span>);</span><br><span class="line">DataInputStream br = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">"Socket client is coming---"</span> + mSocketClient.getIp() + <span class="string">":"</span> + mSocketClient.getPort());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(mSocketClient.getSocket().getInputStream()));<span class="comment">// 读取客户端数据(每次循环读取一条完整的数据指令)</span></span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0xFF</span> &amp; br.readByte();<span class="comment">// 没有数据时处于阻塞状态</span></span><br><span class="line">System.out.println(<span class="string">"head:"</span> + head);</span><br><span class="line"><span class="keyword">if</span> (head != <span class="number">0xFF</span>) <span class="keyword">continue</span>;<span class="comment">// 需要根据协议来定</span></span><br><span class="line"><span class="keyword">int</span> length = br.readShort();<span class="comment">// 需要根据协议来定，这里写死2字节</span></span><br><span class="line">System.err.println(<span class="string">"length:"</span> + length);</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[length];<span class="comment">// 总的具体数据大小</span></span><br><span class="line"><span class="keyword">int</span> hasRead;<span class="comment">// 每次读的数据长度</span></span><br><span class="line"><span class="keyword">int</span> totalRead = <span class="number">0</span>;<span class="comment">// 累计读的数据长度</span></span><br><span class="line"><span class="keyword">while</span> ((hasRead = br.read(buff, totalRead, length - totalRead)) != -<span class="number">1</span>) &#123;<span class="comment">// length - totalRead：剩余数据长度</span></span><br><span class="line">totalRead += hasRead;</span><br><span class="line"><span class="keyword">if</span> (totalRead &gt;= length) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面可以将：head、length、buff（具体消息体）（解密）封装成一个包对象packetRx</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 提供回调接口，方便UI更新</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : TCPServerRunnable.sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onReceiveMessage(mSocketClient, packetRx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (TCPServerRunnable.sSocketClients) &#123;</span><br><span class="line">TCPServerRunnable.sSocketClients.remove(mSocketClient);</span><br><span class="line">System.out.println(<span class="string">"The number of Socket client is："</span> + TCPServerRunnable.sSocketClients.size());</span><br><span class="line"><span class="comment">// 客户端数量发生变化</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : TCPServerRunnable.sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onClientsChanged(TCPServerRunnable.sSocketClients);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----end TCPClientThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCPServerRunnable-服务器线程"><a href="#TCPServerRunnable-服务器线程" class="headerlink" title="TCPServerRunnable -服务器线程"></a>TCPServerRunnable -服务器线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TCPServerRunnable.class.getSimpleName();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket客户端集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> Set&lt;SocketClient&gt; sSocketClients = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;SocketClient&gt;());</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设备数据回调监听（只针对多个界面更新，不针对Socket客户端）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;TCPCallback&gt; sDeviceMessageCallbacks = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务 默认端口58888</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TCP_PORT = <span class="number">58888</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP端口随机生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tcpPort = DEFAULT_TCP_PORT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> ServerSocket mServerSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TCPServerRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTcpPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tcpPort;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start TCPServerThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mServerSocket = <span class="keyword">new</span> ServerSocket(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取随机端口</span></span><br><span class="line">tcpPort = mServerSocket.getLocalPort();</span><br><span class="line">System.out.println(<span class="string">"Socket server waiting connect...tcpPort:"</span> + tcpPort);</span><br><span class="line">stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="comment">// 等待连接, 此时线程处于阻塞状态</span></span><br><span class="line">Socket socket = mServerSocket.accept();</span><br><span class="line"><span class="comment">// 60s读取超时</span></span><br><span class="line">socket.setSoTimeout(<span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 这里需要判断：如果来了一个已存在的IP-Socket，则需要断开原来的连接</span></span><br><span class="line">SocketClient socketClient = findSocketClientByIP(socket.getInetAddress().getHostAddress());</span><br><span class="line"><span class="keyword">if</span> (socketClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">socketClient.close();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">socketClient = <span class="keyword">new</span> SocketClient(socket, socket.getInetAddress().getHostAddress(), socket.getPort());</span><br><span class="line"><span class="keyword">synchronized</span> (sSocketClients) &#123;</span><br><span class="line">sSocketClients.add(socketClient);</span><br><span class="line">System.out.println(<span class="string">"The number of Socket client is："</span> + sSocketClients.size());</span><br><span class="line"><span class="comment">// 客户端数量发生变化</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onClientsChanged(sSocketClients);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadPoolManager.getInstance().execute(<span class="keyword">new</span> TCPClientRunnable(socketClient));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopTCPServer();</span><br><span class="line">System.out.println(<span class="string">"-----end TCPServerThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止TCP服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopTCPServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mServerSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mServerSocket.close();</span><br><span class="line">closeAllSocketClient();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">mServerSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭所有Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeAllSocketClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (sSocketClients) &#123;</span><br><span class="line"><span class="keyword">for</span> (SocketClient client : sSocketClients) &#123;</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过IP获取SocketClient</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment"> *            IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketClient <span class="title">findSocketClientByIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SocketClient client : sSocketClients) &#123;</span><br><span class="line"><span class="keyword">if</span> (ip.equals(client.getIp())) &#123;</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过IP向某个客户端发消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDataByIP</span><span class="params">(String ip, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SocketClient client = findSocketClientByIP(ip);</span><br><span class="line"><span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">client.sendData(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolManager-线程池管理"><a href="#ThreadPoolManager-线程池管理" class="headerlink" title="ThreadPoolManager -线程池管理"></a>ThreadPoolManager -线程池管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span></span><br><span class="line">        service = Executors.newCachedThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        service.execute(runnable);<span class="comment">// 仍到线程池中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolManager INSTANCE = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP的使用范例&quot;&gt;&lt;a href=&quot;#TCP的使用范例&quot; class=&quot;headerlink&quot; title=&quot;TCP的使用范例&quot;&gt;&lt;/a&gt;TCP的使用范例&lt;/h3&gt;&lt;h4 id=&quot;SocketClient-客户端对象&quot;&gt;&lt;a href=&quot;#SocketClien
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Socket知识点总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/31/summary-socket-01/"/>
    <id>http://hawkyAndroid.github.io/2018/05/31/summary-socket-01/</id>
    <published>2018-05-31T14:02:23.000Z</published>
    <updated>2018-09-19T13:55:36.257Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络分层"><a href="#计算机网络分层" class="headerlink" title="计算机网络分层"></a>计算机网络分层</h3><p>计算机网络分为五层：物理层、数据链路层、网络层、传输层、应用层。<br>其中：网络层：负责根据IP找到目的地址的主机。传输层：通过端口把数据传到目的主机的目的进程，来实现进程与进程之间的通信。</p><h3 id="C-S结构"><a href="#C-S结构" class="headerlink" title="C/S结构"></a>C/S结构</h3><p>定义：即客户端/服务器结构，是软件系统体系结构<br>作用：充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。Socket正是使用这种结构建立连接的，一个套接字接客户端，一个套接字接服务器。</p><h3 id="Socket的使用类型主要有两种："><a href="#Socket的使用类型主要有两种：" class="headerlink" title="Socket的使用类型主要有两种："></a>Socket的使用类型主要有两种：</h3><p>流套接字（streamsocket） ：基于 TCP协议，采用 流的方式 提供可靠的字节流服务<br>数据报套接字(datagramsocket)：基于 UDP协议，采用 数据报文 提供数据打包发送的服务</p><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>定义：Transmission Control Protocol，即传输控制协议，是一种传输层通信协议。<b>三次握手</b>的目的是为了防止服务器端因为接收了早已失效的连接请求报文从而一直等待客户端请求，从而浪费资源。</p><h4 id="特点：面向连接、面向字节流、全双工通信、可靠"><a href="#特点：面向连接、面向字节流、全双工通信、可靠" class="headerlink" title="特点：面向连接、面向字节流、全双工通信、可靠."></a>特点：面向连接、面向字节流、全双工通信、可靠.</h4><p>①面向连接：指的是要使用TCP传输数据，必须先建立TCP连接，传输完成后释放连接，就像打电话一样必须先拨号建立一条连接，打完后挂机释放连接。</p><p>②全双工通信：即一旦建立了TCP连接，通信双方可以在任何时候都能发送数据。</p><p>③可靠的：指的是通过TCP连接传送的数据，无差错，不丢失，不重复，并且按序到达。</p><p>④面向字节流：流，指的是流入到进程或从进程流出的字符序列。简单来说，虽然有时候要传输的数据流太大，TCP报文长度有限制，不能一次传输完，要把它分为好几个数据块，但是由于可靠性保证，接收方可以按顺序接收数据块然后重新组成分块之前的数据流，所以TCP看起来就像直接互相传输字节流一样，面向字节流。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>定义：User Datagram Protocol，即用户数据报协议，是一种传输层通信协议。</p><h4 id="特点：无连接的、不可靠的、面向报文、没有拥塞控制"><a href="#特点：无连接的、不可靠的、面向报文、没有拥塞控制" class="headerlink" title="特点：无连接的、不可靠的、面向报文、没有拥塞控制."></a>特点：无连接的、不可靠的、面向报文、没有拥塞控制.</h4><p>无连接的：和TCP要建立连接不同，UDP传输数据不需要建立连接，就像写信，在信封写上收信人名称、地址就可以交给邮局发送了，至于能不能送到，就要看邮局的送信能力和送信过程的困难程度了。</p><p>不可靠的：因为UDP发出去的数据包发出去就不管了，不管它会不会到达，所以很可能会出现丢包现象，使传输的数据出错。</p><p>面向报文：数据报文，就相当于一个数据包，应用层交给UDP多大的数据包，UDP就照样发送，不会像TCP那样拆分。</p><p>没有拥塞控制：拥塞，是指到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象，就像交通堵塞一样。TCP建立连接后如果发送的数据因为信道质量的原因不能到达目的地，它会不断重发，有可能导致越来越塞，所以需要一个复杂的原理来控制拥塞。而UDP就没有这个烦恼，发出去就不管了。</p><h4 id="UDP协议应用场景"><a href="#UDP协议应用场景" class="headerlink" title="UDP协议应用场景"></a>UDP协议应用场景</h4><p>很多的实时应用（如IP电话、实时视频会议、某些多人同时在线游戏等）要求源主机以很定的速率发送数据，并且允许在网络发生拥塞时候丢失一些数据，但是要求不能有太大的延时，UDP就刚好适合这种要求。所以说，只有不适合的技术，没有真正没用的技术。</p><h3 id="Socket-与-Http-对比"><a href="#Socket-与-Http-对比" class="headerlink" title="Socket 与 Http 对比"></a>Socket 与 Http 对比</h3><ol><li><p>工作性质不同。Socket属于传输层，因为 TCP / IP协议属于传输层，解决的是<b>数据如何在网络中传输的问题</b>。而HTTP协议 属于 应用层，解决的是<b>数据如何包装的问题</b>。</p></li><li><p>工作方式不同。Http：采用<b> 请求-响应</b> 方式即建立网络连接后，当 客户端 向 服务器 发送请求后，服务器端才能向客户端返回数据。可理解为：是客户端有需要才进行通信。而Socket：采用<b> 服务器主动发送数据 </b>的方式即建立网络连接后，服务器可主动发送消息给客户端，而不需要由客户端向服务器发送请求可理解为：是服务器端有需要才进行通信。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络分层&quot;&gt;&lt;a href=&quot;#计算机网络分层&quot; class=&quot;headerlink&quot; title=&quot;计算机网络分层&quot;&gt;&lt;/a&gt;计算机网络分层&lt;/h3&gt;&lt;p&gt;计算机网络分为五层：物理层、数据链路层、网络层、传输层、应用层。&lt;br&gt;其中：网络层：负责根据IP找
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>AS使用总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/30/summary-as-develop-2018-5-28/"/>
    <id>http://hawkyAndroid.github.io/2018/05/30/summary-as-develop-2018-5-28/</id>
    <published>2018-05-30T15:02:36.000Z</published>
    <updated>2018-05-30T15:03:17.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-gradle依赖的几种方式"><a href="#android-gradle依赖的几种方式" class="headerlink" title="android gradle依赖的几种方式"></a>android gradle依赖的几种方式</h3><p></p><h5>implementation</h5><br>使用了该命令编译的依赖，它仅仅对当前的Moudle提供接口。<br>好处： 1. 加快编译速度。2. 隐藏对外不必要的接口。<p></p><p></p><h5>api</h5><br>跟 2.x 版本的 compile完全相同。与implementation的区别是：implementation内部module使用，而api可对外提供接口。<p></p><p></p><h5>provided（compileOnly）</h5><br>只在编译时有效，不会参与打包<br>可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。<p></p><p></p><h5>apk（runtimeOnly）</h5><br>只在生成apk的时候参与打包，编译时不会参与，很少用。<p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;android-gradle依赖的几种方式&quot;&gt;&lt;a href=&quot;#android-gradle依赖的几种方式&quot; class=&quot;headerlink&quot; title=&quot;android gradle依赖的几种方式&quot;&gt;&lt;/a&gt;android gradle依赖的几种方式&lt;/
      
    
    </summary>
    
      <category term="AS总结" scheme="http://hawkyAndroid.github.io/categories/AS%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="AS" scheme="http://hawkyAndroid.github.io/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>为人处世</title>
    <link href="http://hawkyAndroid.github.io/2018/05/27/summary-do-something-2018-5-27/"/>
    <id>http://hawkyAndroid.github.io/2018/05/27/summary-do-something-2018-5-27/</id>
    <published>2018-05-27T08:54:10.000Z</published>
    <updated>2018-05-27T08:54:55.537Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>看望病友：安慰、鼓励、善意的“欺骗”。</p></li><li><p>日常朋友聊天：谦逊、求同存异、“不离间”。</p></li><li><p>问朋友借东西：用商量的语气、别说气话、礼貌归还。</p></li><li><p>为朋友劝架：心平气和、用幽默解围、不要有个人情绪。</p></li><li><p>邻里相处：平等、表扬、切勿探究别人的私事。</p></li><li><p>对朋友下逐客令：把理由说清楚、商量性的提醒、安排他干点别的事。</p></li><li><p>在酒桌上说话：话题顾忌他人，尊重宾主、别强求劝酒。</p></li><li><p>同事之间：巧用称谓搞好关系、不要过分表现自己、建设性口气。</p></li><li><p>寻找陌生人之间话题：发现共同点、话题符合身份、避免过多使用专业术语、尽量选择众人关心的事件、不要轻易转移话题、虚心请教、换位思考、目的性不要太强。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;看望病友：安慰、鼓励、善意的“欺骗”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;日常朋友聊天：谦逊、求同存异、“不离间”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问朋友借东西：用商量的语气、别说气话、礼貌归还。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为朋友劝架：心平气和
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>MQTT协议总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/09/summary-mqtt-protocol/"/>
    <id>http://hawkyAndroid.github.io/2018/05/09/summary-mqtt-protocol/</id>
    <published>2018-05-09T14:51:10.000Z</published>
    <updated>2018-05-09T15:55:56.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MQTT控制报文的格式"><a href="#1-MQTT控制报文的格式" class="headerlink" title="1. MQTT控制报文的格式"></a>1. MQTT控制报文的格式</h3><h4 id="1-1-MQTT控制报文的结构"><a href="#1-1-MQTT控制报文的结构" class="headerlink" title="1.1 MQTT控制报文的结构"></a>1.1 MQTT控制报文的结构</h4><table><thead><tr><th style="text-align:center">MQTT控制报文的结构</th></tr></thead><tbody><tr><td style="text-align:center">Fixed header 固定报头，所有控制报文都包含</td></tr><tr><td style="text-align:center">Variable header 可变报头，部分控制报文包含</td></tr><tr><td style="text-align:center">Payload 有效载荷，部分控制报文包含</td></tr></tbody></table><h4 id="1-2-固定报头（2个字节）"><a href="#1-2-固定报头（2个字节）" class="headerlink" title="1.2 固定报头（2个字节）"></a>1.2 固定报头（2个字节）</h4><table><br>    <tr><br>        <td>Bit</td><br>        <td>7</td><br>        <td>6</td><br>        <td>5</td><br>        <td>4</td><br>        <td>3</td><br>        <td>2</td><br>        <td>1</td><br>        <td>0</td><br>   </tr><br>    <tr><br>        <td>byte 1</td><br>        <td colspan="4" align="center">MQTT控制报文的类型</td><br>        <td colspan="4" align="center">用于指定控制报文类型的标志位</td><br>    </tr><br>    <tr><br>        <td>byte 2</td><br>        <td colspan="8" align="center">剩余长度</td><br>    </tr><br></table><h5 id="1-2-1-控制报文的类型（14种）–高四位"><a href="#1-2-1-控制报文的类型（14种）–高四位" class="headerlink" title="1.2.1 控制报文的类型（14种）–高四位"></a>1.2.1 控制报文的类型（14种）–高四位</h5><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">值</th><th style="text-align:center">报文流动方向</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">1</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端请求连接服务端</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">2</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">连接报文确认</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">3</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布消息</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">4</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 1 消息发布收到确认</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">5</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布收到（保证交付第一步）</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">6</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布释放（保证交付第二步）</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">7</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 2 消息发布完成（保证交互第三步）</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">8</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端订阅请求</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">9</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">订阅请求报文确认</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">10</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端取消订阅请求</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">11</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">取消订阅报文确认</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">12</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">心跳请求</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">13</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">心跳响应</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">14</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端断开连接</td></tr><tr><td style="text-align:center">Reserved</td><td style="text-align:center">15</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr></tbody></table><h5 id="1-2-2-标志位-–低四位"><a href="#1-2-2-标志位-–低四位" class="headerlink" title="1.2.2 标志位 –低四位"></a>1.2.2 标志位 –低四位</h5><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">固定报头标志</th><th style="text-align:center">Bit 3</th><th style="text-align:center">Bit 2</th><th>Bit 1</th><th>Bit 0</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">Used in MQTT 3.1.1</td><td style="text-align:center">DUP 1</td><td style="text-align:center">QoS 2</td><td>QoS 2</td><td>RETAIN 3</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center"></td><td style="text-align:center">0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h5 id="1-2-3-剩余长度-–从第-2-个字节开始位置"><a href="#1-2-3-剩余长度-–从第-2-个字节开始位置" class="headerlink" title="1.2.3 剩余长度 –从第 2 个字节开始位置"></a>1.2.3 剩余长度 –从第 2 个字节开始位置</h5><p>剩余长度（Remaining Length）表示当前报文剩余部分的字节数，包括可变报头和负载的数据。剩余长度不包括用于编码剩余长度字段本身的字节数。</p><p>剩余长度字段使用一个变长度编码方案，对小于 128 的值它使用单字节编码。更大的值按下面的方式处理。低 7 位有效位用于编码数据，最高有效位用于指示是否有更多的字节。因此每个字节可以编码 128 个数值和一个 延续位（ continuation bit ） 。剩余长度字段最大 4 个字节。</p><p>分别表示（每个字节的低 7 位用于编码数据，最高位是标志位）：<br>1 个字节时，从 0(0x00)到 127(0x7f)<br>2 个字节时，从 128(0x80,0x01)到 16383(0Xff,0x7f)<br>3 个字节时，从 16384(0x80,0x80,0x01)到 2097151(0xFF,0xFF,0x7F)<br>4 个字节时，从 2097152(0x80,0x80,0x80,0x01)到 268435455(0xFF,0xFF,0xFF,0x7F)</p><h4 id="1-3-可变报头"><a href="#1-3-可变报头" class="headerlink" title="1.3 可变报头"></a>1.3 可变报头</h4><p>某些 MQTT 控制报文包含一个可变报头部分。它在固定报头和负载之间。可变报头的内容根据报文类型的不同而不同。可变报头的报文标识符（Packet Identifier）字段存在于在多个类型的报文里。</p><p>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。这些报文是 PUBLISH（QoS&gt;0 时），PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE, SUBACK，UNSUBSCIBE，UNSUBACK。</p><p>注意：QoS 设置为 0 的 PUBLISH 报文 不能包含报文标识符。PUBACK, PUBREC, PUBREL 报文 必须包含与最初发送的 PUBLISH 报文相同的报文标识符。类似地，SUBACK 和 UNSUBACK  必须包含在对应的 SUBSCRIBE 和 UNSUBSCRIBE 报文中使用的<br>报文标识符。</p><h4 id="1-4-有效载荷"><a href="#1-4-有效载荷" class="headerlink" title="1.4 有效载荷"></a>1.4 有效载荷</h4><p>某些 MQTT 控制报文在报文的最后部分包含一个有效载荷。对于PUBLIC来说，有效载荷就是应用消息。</p><h5 id="1-4-1-包含有效载荷的控制报文"><a href="#1-4-1-包含有效载荷的控制报文" class="headerlink" title="1.4.1 包含有效载荷的控制报文"></a>1.4.1 包含有效载荷的控制报文</h5><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">有效载荷</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">可选</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">不需要</td></tr></tbody></table><h3 id="2-MQTT控制报文（14种）"><a href="#2-MQTT控制报文（14种）" class="headerlink" title="2. MQTT控制报文（14种）"></a>2. MQTT控制报文（14种）</h3><h4 id="2-1-CONNECT-–-连接服务端"><a href="#2-1-CONNECT-–-连接服务端" class="headerlink" title="2.1 CONNECT –  连接服务端"></a>2.1 CONNECT –  连接服务端</h4><p>客户端到服务端的网络连接建立后，客户端发送给服务端的第一个报文必须是CONNECT报文。<br>在一个网络连接上，客户端只能发送一次 CONNECT 报文。服务端 必须将客户端发送的第二个 CONNECT报文当作协议违规处理并断开客户端的连接。有效载荷包含一个或多个编码的字段。包括客户端的唯一标识符，Will 主题，Will 消息，用户名和密码。除了客户端标识之外，其它的字段都是可选的，基于标志位来决定可变报头中是否需要包含这些字段。</p><h4 id="2-2-CONNACK-–-确认连接请求"><a href="#2-2-CONNACK-–-确认连接请求" class="headerlink" title="2.2 CONNACK – 确认连接请求"></a>2.2 CONNACK – 确认连接请求</h4><p>服务端发送 CONNACK 报文响应从客户端收到的 CONNECT 报文。服务端发送给客户端的第一个报文必须须是 CONNACK。如果客户端在合理的时间内没有收到服务端的 CONNACK 报文，客户端 应该关闭网络连接。合理的时间取决于应用的类型和通信基础设施。</p><h5 id="连接返回码的值"><a href="#连接返回码的值" class="headerlink" title="连接返回码的值"></a>连接返回码的值</h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">返回码响应</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0x00 连接已接受</td><td style="text-align:center">连接已被服务端接受</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0x01 连接已拒绝，不支持的协议版本</td><td style="text-align:center">服务端不支持客户端请求的 MQTT 协议级别</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0x02 连接已拒绝，不合格的客户端标识符</td><td style="text-align:center">客户端标识符是正确的 UTF-8 编码，但服务端不允许使用</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0x03 连接已拒绝，服务端不可用</td><td style="text-align:center">网络连接已建立，但 MQTT 服务不可用</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0x04 连接已拒绝，无效的用户名或密码</td><td style="text-align:center">用户名或密码的数据格式无效</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0x05 连接已拒绝，未授权</td><td style="text-align:center">客户端未被授权连接到此服务器</td></tr><tr><td style="text-align:center">6-255</td><td style="text-align:center"></td><td style="text-align:center">保留</td></tr></tbody></table><p>如果认为上表中的所有连接返回码都不太合适，那么服务端 必须关闭网络连接，不需要发送 CONNACK 报文。</p><h4 id="2-3-PUBLISH-–-发布消息"><a href="#2-3-PUBLISH-–-发布消息" class="headerlink" title="2.3 PUBLISH – 发布消息"></a>2.3 PUBLISH – 发布消息</h4><p>PUBLISH 控制报文是指从客户端向服务端或者服务端向客户端传输一个应用消息。</p><h5 id="PUBLISH-报文固定报头"><a href="#PUBLISH-报文固定报头" class="headerlink" title="PUBLISH 报文固定报头"></a>PUBLISH 报文固定报头</h5><table><br>    <tr><br>        <td>Bit</td><br>        <td>7</td><br>        <td>6</td><br>        <td>5</td><br>        <td>4</td><br>        <td>3</td><br>        <td>2</td><br>        <td>1</td><br>        <td>0</td><br>   </tr><br>    <tr><br>        <td>byte 1</td><br>        <td colspan="4" align="center">MQTT控制报文的类型</td><br>        <td>DUP(重发标志)</td><br>        <td colspan="2">QoS等级</td><br>        <td>RETAIN</td><br>    </tr><br>    <tr><br>        <td>byte 2</td><br>        <td colspan="8" align="center">剩余长度</td><br>    </tr><br></table><p>备注：① 如果 DUP 标志被设置为 0，表示这是客户端或服务端第一次请求发送这个 PUBLISH 报文。如果 DUP 标志被设置为 1，表示这可能是一个早前报文请求的重发。② QoS=0表示最多分发1次、QoS=1表示至少分发一次、QoS=2表示只分发一次。③ 如果客户端发给服务端的 PUBLISH 报文的保留标志位 0，服务端 不能存储这个消息也 不能移除或替换任何现存的保留消息。④ 服务端发送给订阅客户端的 PUBLISH 报文的主题名 必须匹配该订阅的主题过滤器。</p><h4 id="2-4-PUBACK-–-发布确认"><a href="#2-4-PUBACK-–-发布确认" class="headerlink" title="2.4 PUBACK – 发布确认"></a>2.4 PUBACK – 发布确认</h4><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应。</p><h4 id="2-5-PUBREC-–-发布收到"><a href="#2-5-PUBREC-–-发布收到" class="headerlink" title="2.5 PUBREC – 发布收到"></a>2.5 PUBREC – 发布收到</h4><p>PUBREC 报文是对 QoS 等级 2 的 PUBLISH 报文的响应。它是 QoS 2 等级协议交换的第二个报文。</p><h4 id="2-6-PUBREL-–-发布释放"><a href="#2-6-PUBREL-–-发布释放" class="headerlink" title="2.6 PUBREL – 发布释放"></a>2.6 PUBREL – 发布释放</h4><p>PUBREL 报文是对 PUBREC 报文的响应。它是 QoS 2 等级协议交换的第三个报文。</p><h4 id="2-7-PUBCOMP-–-发布完成"><a href="#2-7-PUBCOMP-–-发布完成" class="headerlink" title="2.7  PUBCOMP – 发布完成"></a>2.7  PUBCOMP – 发布完成</h4><p>PUBCOMP报文是对PUBREL报文的响应。它是QoS 2等级协议交换的第四个也是最后一个报文。</p><h4 id="2-8-SUBSCRIBE-订阅主题"><a href="#2-8-SUBSCRIBE-订阅主题" class="headerlink" title="2.8 SUBSCRIBE - 订阅主题"></a>2.8 SUBSCRIBE - 订阅主题</h4><p>客户端向服务端发送 SUBSCRIBE 报文用于创建一个或多个订阅。每个订阅注册客户端关心的一个或多个主题。为了将应用消息转发给与那些订阅匹配的主题，服务端发送 PUBLISH 报文给客户端。SUBSCRIBE报文也（为每个订阅）指定了最大的 QoS 等级，服务端根据这个发送应用消息给客户端。SUBSCRIBE 报文的有效载荷包含了一个主题过滤器列表，它们表示客户端想要订阅的主题。每一个过滤器后面跟着一个字节，这个字节被叫做服务质量要求（Requested QoS）。它给出了服务端向客户端发送应用消息所允许的最大 QoS 等级。SUBSCRIBE 报文的有效载荷 必须包含至少一对主题过滤器 和 QoS 等级字段组合。服务端收到客户端发送的一个 SUBSCRIBE 报文时， 必须使用 SUBACK 报文响应SUBACK 报文 必须和等待确认的 SUBSCRIBE 报文有相同的报文标识符。</p><h4 id="2-9-SUBACK-–-订阅确认"><a href="#2-9-SUBACK-–-订阅确认" class="headerlink" title="2.9  SUBACK – 订阅确认"></a>2.9  SUBACK – 订阅确认</h4><p>服务端发送 SUBACK 报文给客户端，用于确认它已收到并且正在处理 SUBSCRIBE 报文。SUBACK 报文包含一个返回码清单，它们指定了 SUBSCRIBE 请求的每个订阅被授予的最大 QoS 等级。SUBACK有效载荷包含一个返回码清单。每个返回码对应等待确认的 SUBSCRIBE 报文中的一个主题过滤器。返回码的顺序 必须和 SUBSCRIBE 报文中主题过滤器的顺序相同。</p><h4 id="2-10-UNSUBSCRIBE-–-取消订阅"><a href="#2-10-UNSUBSCRIBE-–-取消订阅" class="headerlink" title="2.10 UNSUBSCRIBE – 取消订阅"></a>2.10 UNSUBSCRIBE – 取消订阅</h4><p>客户端发送 UNSUBSCRIBE 报文给服务端，用于取消订阅主题。UNSUBSCRIBE 报文固定报头的第 3,2,1,0 位是保留位且 必须分别设置为 0,0,1,0。服务端 必须认为任何其<br>它的值都是不合法的并关闭网络连接。UNSUBSCRIBE 报文的有效载荷 必须至少包含一个消息过滤器。</p><h4 id="2-11-UNSUBACK-–-取消订阅确认"><a href="#2-11-UNSUBACK-–-取消订阅确认" class="headerlink" title="2.11 UNSUBACK – 取消订阅确认"></a>2.11 UNSUBACK – 取消订阅确认</h4><p>服务端发送 UNSUBACK 报文给客户端用于确认收到 UNSUBSCRIBE 报文。</p><h4 id="2-12-12-PINGREQ-–-心跳请求"><a href="#2-12-12-PINGREQ-–-心跳请求" class="headerlink" title="2.12 12 PINGREQ – 心跳请求"></a>2.12 12 PINGREQ – 心跳请求</h4><p>客户端发送 PINGREQ 报文给服务端的。用于：</p><ol><li>在没有任何其它控制报文从客户端发给服务的时，告知服务端客户端还活着。</li><li>请求服务端发送 响应确认它还活着。</li><li>使用网络以确认网络连接没有断开。</li></ol><p>—注意：保持连接（Keep Alive）处理中用到这个报文</p><h4 id="2-13-PINGRESP-–-心跳响应"><a href="#2-13-PINGRESP-–-心跳响应" class="headerlink" title="2.13 PINGRESP – 心跳响应"></a>2.13 PINGRESP – 心跳响应</h4><p>服务端发送 PINGRESP 报文响应客户端的 PINGREQ 报文。表示服务端还活着。</p><p>—注意：保持连接（Keep Alive）处理中用到这个报文</p><h4 id="2-14-DISCONNECT-–-断开连接"><a href="#2-14-DISCONNECT-–-断开连接" class="headerlink" title="2.14 DISCONNECT – 断开连接"></a>2.14 DISCONNECT – 断开连接</h4><p>DISCONNECT 报文是客户端发给服务端的最后一个控制报文。表示客户端正常断开连接。<br>服务端在收到 DISCONNECT 报文时：</p><ol><li>必须丢弃任何与当前连接关联的未发布的遗嘱消息。</li><li>应该关闭网络连接，如果客户端还没有这么做。</li></ol><h3 id="3-服务质量等级"><a href="#3-服务质量等级" class="headerlink" title="3. 服务质量等级"></a>3. 服务质量等级</h3><h4 id="3-1-QoS-0-最多分发一次"><a href="#3-1-QoS-0-最多分发一次" class="headerlink" title="3.1  QoS 0: 最多分发一次"></a>3.1  QoS 0: 最多分发一次</h4><p>消息的分发依赖于底层网络的能力。接收者不会发送响应，发送者也不会重试。消息可能送达一次也可能根本没送达。</p><ol><li>对于 QoS 0 的分发协议，发送者必须发送 QoS 等于 0，DUP 等于 0 的 PUBLISH 报文。</li><li>对于 QoS 0 的分发协议，接收者接受 PUBLISH 报文时同时接受消息的所有权。</li></ol><h4 id="3-2-QoS-1-至少分发一次（推荐）"><a href="#3-2-QoS-1-至少分发一次（推荐）" class="headerlink" title="3.2 QoS 1:  至少分发一次（推荐）"></a>3.2 QoS 1:  至少分发一次（推荐）</h4><p>服务质量确保消息至少送达一次。QoS 1 的 PUBLISH 报文的可变报头中包含一个报文标识符，需要PUBACK 报文确认。</p><h6 id="3-2-1-对于QoS-1的分发协议，发送者"><a href="#3-2-1-对于QoS-1的分发协议，发送者" class="headerlink" title="3.2.1 对于QoS 1的分发协议，发送者"></a>3.2.1 对于QoS 1的分发协议，发送者</h6><ol><li>每次发送新的应用消息都必须分配一个未使用的报文标识符。</li><li>发送的 PUBLISH 报文 必须包含报文标识符且 QoS 等于 1，DUP 等于 0。</li><li>必须将这个 PUBLISH 报文看作是未确认的 ，直到从接收者那收到对应的 PUBACK 报文。一旦发送者收到 PUBACK 报文，这个报文标识符就可以重用。</li></ol><h6 id="3-2-2-对于-QoS-1-的分发协议，接收者"><a href="#3-2-2-对于-QoS-1-的分发协议，接收者" class="headerlink" title="3.2.2 对于 QoS 1 的分发协议，接收者"></a>3.2.2 对于 QoS 1 的分发协议，接收者</h6><ol><li>响应的 PUBACK 报文 必须包含一个报文标识符，这个标识符来自接收到的、已经接受所有权的PUBLISH 报文。</li><li>发送了 PUBACK 报文之后，接收者必须将任何包含相同报文标识符的入站 PUBLISH 报文当作一个新的消息，并忽略它的 DUP 标志的值。</li></ol><h4 id="3-3-QoS-2-仅分发一次"><a href="#3-3-QoS-2-仅分发一次" class="headerlink" title="3.3 QoS 2: 仅分发一次"></a>3.3 QoS 2: 仅分发一次</h4><p>这是最高等级的服务质量，消息丢失和重复都是不可接受的。使用这个服务质量等级会有额外的开销。</p><h6 id="3-3-1-对于-QoS-2-的分发协议，发送者"><a href="#3-3-1-对于-QoS-2-的分发协议，发送者" class="headerlink" title="3.3.1 对于 QoS 2 的分发协议，发送者"></a>3.3.1 对于 QoS 2 的分发协议，发送者</h6><ol><li>必须给要发送的新应用消息分配一个未使用的报文标识符。</li><li>发送的 PUBLISH 报文 必须包含报文标识符且报文的 QoS 等于 2,，DUP 等于 0。</li><li>必须将这个 PUBLISH 报文看作是  未确认的 ，直到从接收者那收到对应的 PUBREC 报文。</li><li>收到 PUBREC 报文后 必须发送一个 PUBREL 报文。PUBREL 报文必须包含与原始 PUBLISH 报文相同的报文标识符。</li><li>必须将这个 PUBREL 报文看作是未确认的 ，直到从接收者那收到对应的 PUBCOMP 报文。</li><li>一旦发送了对应的 PUBREL 报文就 不能重发这个 PUBLISH 报文。一旦发送者收到 PUBCOMP 报文，这个报文标识符就可以重用。</li></ol><p>注意：允许发送者在等待确认时使用不同的报文标识符发送后续的 PUBLISH 报文。</p><h6 id="3-3-2-对于QoS-2的分发协议，接收者"><a href="#3-3-2-对于QoS-2的分发协议，接收者" class="headerlink" title="3.3.2 对于QoS 2的分发协议，接收者"></a>3.3.2 对于QoS 2的分发协议，接收者</h6><ol><li>响应的 PUBREC 报文 必须包含报文标识符，这个标识符来自接收到的、已经接受所有权的<br>PUBLISH 报文。</li><li>在收到对应的 PUBREL 报文之前，接收者 必须发送 PUBREC 报文确认任何后续的具有相同标识符的 PUBLISH 报文。 在这种情况下，它不能重复分发消息给任何后续的接收者。</li><li>响应 PUBREL 报文的 PUBCOMP 报文 必须包含与 PUBREL 报文相同的标识符。</li><li>发送 PUBCOMP 报文之后，接收者必须将包含相同报文标识符的任何后续 PUBLISH 报文当作一个新的发布。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-MQTT控制报文的格式&quot;&gt;&lt;a href=&quot;#1-MQTT控制报文的格式&quot; class=&quot;headerlink&quot; title=&quot;1. MQTT控制报文的格式&quot;&gt;&lt;/a&gt;1. MQTT控制报文的格式&lt;/h3&gt;&lt;h4 id=&quot;1-1-MQTT控制报文的结构&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="MQTT" scheme="http://hawkyAndroid.github.io/categories/MQTT/"/>
    
    
      <category term="MQTT" scheme="http://hawkyAndroid.github.io/tags/MQTT/"/>
    
  </entry>
  
</feed>
