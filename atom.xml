<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hawky的博客</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hawkyAndroid.github.io/"/>
  <updated>2019-01-05T13:28:54.738Z</updated>
  <id>http://hawkyAndroid.github.io/</id>
  
  <author>
    <name>Hawky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android View之Xfermode</title>
    <link href="http://hawkyAndroid.github.io/2019/01/04/summery-view-porterduffxfermode/"/>
    <id>http://hawkyAndroid.github.io/2019/01/04/summery-view-porterduffxfermode/</id>
    <published>2019-01-04T12:18:55.000Z</published>
    <updated>2019-01-05T13:28:54.738Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）-Xfermode-概述"><a href="#（一）-Xfermode-概述" class="headerlink" title="（一） Xfermode 概述"></a>（一） Xfermode 概述</h3><p>Xfermode图层混合模式：主要用于处理图形图像的绘制。最常用也是最核心的就是其子类PorterDuffXfermode，而PorterDuffXfermode使用的是 PorterDuff 模式创建一个图层混合模式，PorterDuff用于(2D)数字图像的合成。</p><h3 id="（二）-PorterDuff-Mode-枚举"><a href="#（二）-PorterDuff-Mode-枚举" class="headerlink" title="（二） PorterDuff.Mode 枚举"></a>（二） PorterDuff.Mode 枚举</h3><p><a href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode" target="_blank" rel="noopener">PorterDuff.Mode</a> 定义了18种混合模式：</p><table><thead><tr><th>PorterDuff.Mode</th><th>Desc</th></tr></thead><tbody><tr><td>ADD</td><td>Saturate(S + D)</td></tr><tr><td>CLEAR</td><td>[0, 0]</td></tr><tr><td>DARKEN</td><td>[Sa + Da - Sa<em>Da, Sc</em>(1 - Da) + Dc*(1 - Sa) + min(Sc, Dc)]</td></tr><tr><td>DST</td><td>[Da, Dc]</td></tr><tr><td>DST_ATOP</td><td>[Sa, Sa <em> Dc + Sc </em> (1 - Da)]</td></tr><tr><td>DST_IN</td><td>[Sa <em> Da, Sa </em> Dc]</td></tr><tr><td>DST_OUT</td><td>[Da <em> (1 - Sa), Dc </em> (1 - Sa)]</td></tr><tr><td>DST_OVER</td><td>[Sa + (1 - Sa)<em>Da, Rc = Dc + (1 - Da)</em>Sc]</td></tr><tr><td>LIGHTEN</td><td>[Sa + Da - Sa<em>Da, Sc</em>(1 - Da) + Dc*(1 - Sa) + max(Sc, Dc)]</td></tr><tr><td>MULTIPLY</td><td>[Sa <em> Da, Sc </em> Dc]</td></tr><tr><td>OVERLAY</td><td></td></tr><tr><td>SCREEN</td><td>[Sa + Da - Sa <em> Da, Sc + Dc - Sc </em> Dc]</td></tr><tr><td>SRC</td><td>[Sa, Sc]</td></tr><tr><td>SRC_ATOP</td><td>[Da, Sc <em> Da + (1 - Sa) </em> Dc]</td></tr><tr><td>SRC_IN</td><td>[Sa <em> Da, Sc </em> Da]</td></tr><tr><td>SRC_OUT</td><td>[Sa <em> (1 - Da), Sc </em> (1 - Da)]</td></tr><tr><td>SRC_OVER</td><td>[Sa + (1 - Sa)<em>Da, Rc = Sc + (1 - Sa)</em>Dc]</td></tr><tr><td>XOR</td><td>[Sa + Da - 2 <em> Sa </em> Da, Sc <em> (1 - Da) + (1 - Sa) </em> Dc]</td></tr></tbody></table><p>其中： Sa 代表source alpha，Da 代表 Destination alpha ，Sc 代表 source color，Dc 代表 Destination color。</p><pre><code>1、 SRC       只保留源图像的 alpha 和 color2、 DST       只保留目标图像的 alpha 和 color3、 SRC_OVER  在目标图片顶部绘制源图像4、 DST_OVER  将目标图像绘制在上方5、 SRC_IN    在两者相交的地方绘制源图像，并且绘制的效果会受到目标图像对应地方透明度的影响；6、 DST_IN    在两者相交的地方绘制目标图像，并且绘制的效果会受到源图像对应地方透明度的影响；7、 SRC_OUT   在不相交的地方绘制源图像，相交处根据目标alpha进行过滤，目标色完全不透明时则完全过滤，完全透明则不过滤；8、 DST_OUT   在不相交的地方绘制目标图像，相交处根据源图像alpha进行过滤，完全不透明处则完全过滤，完全透明则不过滤；9、 SRC_ATOP  源图像和目标图像相交处绘制源图像，不相交的地方绘制目标图像，并且相交处的效果会受到源图像和目标图像alpha的影响；10、DST_ATOP  源图像和目标图像相交处绘制目标图像，不相交的地方绘制源图像，并且相交处的效果会受到源图像和目标图像alpha的影响；11、 XOR      在不相交的地方按原样绘制源图像和目标图像，相交的地方受到对应alpha和色值影响，按上面公式进行计算，如果都完全不透明则相交处完全不绘制；12、 DARKEN   该模式处理过后，会感觉效果变暗，即进行对应像素的比较，取较暗值，如果色值相同则进行混合；13、 LIGHTEN  如果在均完全不透明的情况下 ，色值取源色值和目标色值中的较大值，否则按上面算法进行计算；14、 MULTIPLY 正片叠底，即查看每个通道中的颜色信息，并将基色与混合色复合。结果色总是较暗的颜色。15、 SCREEN   滤色，滤色模式与我们所用的显示屏原理相同。16、 ADD     饱和度叠加17、 OVERLAY 像素是进行 Multiply （正片叠底）混合还是 Screen （屏幕）混合，取决于底层颜色，但底层颜色的高光与阴影部分的亮度细节会被保留；18、 CLEAR   所有点的像素的alpha 和color 都为 0。</code></pre><h4 id="图像合成效果图"><a href="#图像合成效果图" class="headerlink" title="图像合成效果图"></a>图像合成效果图</h4><p><img src="https://upload-images.jianshu.io/upload_images/2041548-d964105abf4be5d9.jpg?imageMogr2/auto-orient/" alt="图像合成效果图"></p><h3 id="（三）-PorterDuffXfermode-实例"><a href="#（三）-PorterDuffXfermode-实例" class="headerlink" title="（三） PorterDuffXfermode 实例"></a>（三） PorterDuffXfermode 实例</h3><p>1、基础效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   - Xfermode 图层混合模式的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PorterDuffXfermodeView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图层混合模式</span></span><br><span class="line">    <span class="keyword">private</span> Xfermode mXfermode;</span><br><span class="line">    <span class="comment">// 控件大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap mSourceBitmap;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mDestBitmap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rect mBottomSrcRect;</span><br><span class="line">    <span class="keyword">private</span> Rect mBottomDestRect;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Rect mTopSrcRect;</span><br><span class="line">    <span class="keyword">private</span> Rect mTopDestRect;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PorterDuffXfermodeView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PorterDuffXfermodeView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mSourceBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_src);</span><br><span class="line">        mDestBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_dest);</span><br><span class="line"></span><br><span class="line">        mXfermode = <span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mWidth = w;</span><br><span class="line">        mHeight = h;</span><br><span class="line">        mBottomSrcRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mDestBitmap.getWidth(), mDestBitmap.getHeight());</span><br><span class="line">        mBottomDestRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        mTopSrcRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mSourceBitmap.getWidth(), mSourceBitmap.getHeight());</span><br><span class="line">        mTopDestRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.drawColor(Color.WHITE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里会生成了一个全新的bitmap，之后所有的绘图操作都是在这个bitmap上进行的</span></span><br><span class="line">        <span class="comment">// 目的是区分哪一步的图形,应该与合成模式的bitmap去合成 运算；</span></span><br><span class="line">        <span class="keyword">int</span> saveCount = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight, mPaint, Canvas.ALL_SAVE_FLAG);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意：先绘制目标图（底部）</span></span><br><span class="line">        canvas.drawBitmap(mDestBitmap, mBottomSrcRect, mBottomDestRect, mPaint);</span><br><span class="line">        <span class="comment">// 设置转换模式</span></span><br><span class="line">        mPaint.setXfermode(mXfermode);</span><br><span class="line">        <span class="comment">// 绘制源图 （顶部）</span></span><br><span class="line">        canvas.drawBitmap(mSourceBitmap, mTopSrcRect, mTopDestRect, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除转换模式</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        canvas.restoreToCount(saveCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、进度上色效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Xfermode 进度上色效果</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XfermodeLoadingColorView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="comment">// 控件大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Xfermode mXfermode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标图</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap mDestBitmap;</span><br><span class="line">    <span class="keyword">private</span> Rect mSrcRect;</span><br><span class="line">    <span class="keyword">private</span> Rect mDestRect;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源图</span></span><br><span class="line">    <span class="keyword">private</span> Rect mDynamicRect;</span><br><span class="line">    <span class="comment">// 起点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSrcStart;</span><br><span class="line">    <span class="comment">// 终点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSrcEnd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XfermodeLoadingColorView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XfermodeLoadingColorView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 去锯齿</span></span><br><span class="line">        mPaint.setDither(<span class="keyword">true</span>);<span class="comment">// 防抖动</span></span><br><span class="line">        mPaint.setFilterBitmap(<span class="keyword">true</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化Bitmap</span></span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = <span class="number">2</span>;<span class="comment">// 缩小2倍</span></span><br><span class="line">        mDestBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_xfermode_dest, options);</span><br><span class="line">        mSrcRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, mDestBitmap.getWidth(), mDestBitmap.getHeight());</span><br><span class="line">        mDestRect = <span class="keyword">new</span> Rect();</span><br><span class="line">        mDynamicRect = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line">        mXfermode = <span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mWidth = w;</span><br><span class="line">        mHeight = h;</span><br><span class="line"></span><br><span class="line">        mDestRect.set((w - mDestBitmap.getWidth()) / <span class="number">2</span>, (h - mDestBitmap.getHeight()) / <span class="number">2</span>, (w + mDestBitmap.getWidth()) / <span class="number">2</span>, (h + mDestBitmap.getHeight()) / <span class="number">2</span>);</span><br><span class="line">        mDynamicRect.set((w - mDestBitmap.getWidth()) / <span class="number">2</span>, (h + mDestBitmap.getHeight()) / <span class="number">2</span>, (w + mDestBitmap.getWidth()) / <span class="number">2</span>, (h + mDestBitmap.getHeight()) / <span class="number">2</span>);</span><br><span class="line">        mSrcStart = (h + mDestBitmap.getHeight()) / <span class="number">2</span>;</span><br><span class="line">        mSrcEnd = (h - mDestBitmap.getHeight()) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">int</span> saveCount = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight, mPaint, Canvas.ALL_SAVE_FLAG);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先绘制目标图</span></span><br><span class="line">        canvas.drawBitmap(mDestBitmap, mSrcRect, mDestRect, mPaint);</span><br><span class="line">        <span class="comment">// 设置混合模式</span></span><br><span class="line">        mPaint.setXfermode(mXfermode);</span><br><span class="line">        <span class="comment">// 绘制源图</span></span><br><span class="line">        canvas.drawRect(mDynamicRect, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清除混合模式</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        canvas.restoreToCount(saveCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueAnimator animator = ValueAnimator.ofInt(mSrcStart, mSrcEnd);</span><br><span class="line">        animator.setInterpolator(<span class="keyword">new</span> LinearInterpolator());</span><br><span class="line">        animator.setRepeatCount(-<span class="number">1</span>);</span><br><span class="line">        animator.setDuration(<span class="number">3000</span>);</span><br><span class="line">        animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                mDynamicRect.top = (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        animator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3、橡皮檫效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）-Xfermode-概述&quot;&gt;&lt;a href=&quot;#（一）-Xfermode-概述&quot; class=&quot;headerlink&quot; title=&quot;（一） Xfermode 概述&quot;&gt;&lt;/a&gt;（一） Xfermode 概述&lt;/h3&gt;&lt;p&gt;Xfermode图层混合模式：主要用
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之扇形进度动画</title>
    <link href="http://hawkyAndroid.github.io/2019/01/03/summary-view-fanprogress/"/>
    <id>http://hawkyAndroid.github.io/2019/01/03/summary-view-fanprogress/</id>
    <published>2019-01-03T14:34:55.000Z</published>
    <updated>2019-01-03T16:23:28.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）扇形进度思路"><a href="#（一）扇形进度思路" class="headerlink" title="（一）扇形进度思路"></a>（一）扇形进度思路</h3><p>1、绘制边界</p><p>2、绘制左半圆<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据当前进度算出进度条的位置</span></span><br><span class="line"><span class="comment">// （思路：进度关联进度条位置，进而关联到圆心角）</span></span><br><span class="line">mCurrentProgressPosition = mProgress * mProgressWidth / TOTAL_PROGRESS;</span><br><span class="line"><span class="comment">// 算出圆心角</span></span><br><span class="line"><span class="keyword">float</span> angle = (<span class="keyword">float</span>) Math.toDegrees(Math.acos((mArcRadius - mCurrentProgressPosition) / mArcRadius));</span><br><span class="line"><span class="comment">// 再根据进度绘制扇形</span></span><br><span class="line">canvas.drawArc(mArcRectF, <span class="number">180</span> - angle, <span class="number">2</span> * angle, <span class="keyword">false</span>, mPaint);</span><br></pre></td></tr></table></figure></p><p>3、绘制右边矩形<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绘制左边半圆</span></span><br><span class="line">canvas.drawArc(mArcRectF, <span class="number">90</span>, <span class="number">180</span>, <span class="keyword">false</span>, mPaint);</span><br><span class="line"><span class="comment">// 更新矩形右边坐标</span></span><br><span class="line">mRectF.right = mLeftMargin + mCurrentProgressPosition;</span><br><span class="line"><span class="comment">// 再绘制右边矩形</span></span><br><span class="line"><span class="comment">//（思路：通过关联的进度不断更新待绘制的矩形区域）</span></span><br><span class="line"> canvas.drawRect(mRectF, mPaint);</span><br></pre></td></tr></table></figure></p><p>4、暴露接口、更新数据及动画</p><h3 id="（二）扇形进度实现"><a href="#（二）扇形进度实现" class="headerlink" title="（二）扇形进度实现"></a>（二）扇形进度实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带扇形的进度动画</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanProgressView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOTAL_PROGRESS = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前进度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mProgress;</span><br><span class="line">    <span class="comment">// 进度条宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mProgressWidth;</span><br><span class="line">    <span class="comment">// 当前进度条的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCurrentProgressPosition;</span><br><span class="line">    <span class="comment">// 扇形半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mArcRadius;</span><br><span class="line">    <span class="comment">// 左右边距</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLeftMargin;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRightMargin;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扇形区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mArcRectF;</span><br><span class="line">    <span class="comment">// 矩形区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mRectF;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FanProgressView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FanProgressView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mArcRectF = <span class="keyword">new</span> RectF();</span><br><span class="line">        mRectF = <span class="keyword">new</span> RectF();</span><br><span class="line"></span><br><span class="line">        mLeftMargin = DensityUtils.dip2px(context, <span class="number">10</span>);</span><br><span class="line">        mRightMargin = DensityUtils.dip2px(context, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mProgressWidth = w - mLeftMargin - mRightMargin;</span><br><span class="line">        mArcRadius = (h - <span class="number">2</span> * mLeftMargin) / <span class="number">2.0f</span>;</span><br><span class="line">        mArcRectF.set(mLeftMargin, mLeftMargin, <span class="number">2</span> * mArcRadius + mLeftMargin, <span class="number">2</span> * mArcRadius + mLeftMargin);</span><br><span class="line">        mRectF.set(mArcRadius + mLeftMargin, mLeftMargin, mLeftMargin + mCurrentProgressPosition, <span class="number">2</span> * mArcRadius + mLeftMargin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        drawBoundary(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据当前进度算出进度条的位置</span></span><br><span class="line">        mCurrentProgressPosition = mProgress * mProgressWidth / TOTAL_PROGRESS;</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        <span class="keyword">if</span> (mCurrentProgressPosition &lt; mArcRadius) &#123; <span class="comment">// 左边：半圆弧</span></span><br><span class="line">            <span class="comment">// 圆心角</span></span><br><span class="line">            <span class="keyword">float</span> angle = (<span class="keyword">float</span>) Math.toDegrees(Math.acos((mArcRadius - mCurrentProgressPosition) / mArcRadius));</span><br><span class="line">            mPaint.setColor(Color.YELLOW);</span><br><span class="line">            canvas.drawArc(mArcRectF, <span class="number">180</span> - angle, <span class="number">2</span> * angle, <span class="keyword">false</span>, mPaint);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 右边：矩形</span></span><br><span class="line">            <span class="comment">// 绘制左边半圆</span></span><br><span class="line">            mPaint.setColor(Color.YELLOW);</span><br><span class="line">            canvas.drawArc(mArcRectF, <span class="number">90</span>, <span class="number">180</span>, <span class="keyword">false</span>, mPaint);</span><br><span class="line">            mRectF.right = mLeftMargin + mCurrentProgressPosition;</span><br><span class="line">            <span class="comment">// 绘制右边矩形</span></span><br><span class="line">            mPaint.setColor(Color.GREEN);</span><br><span class="line">            canvas.drawRect(mRectF, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绘制边界</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBoundary</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        canvas.drawColor(Color.LTGRAY);</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        <span class="comment">// 绘制左半边弧形</span></span><br><span class="line">        canvas.drawArc(mArcRectF, <span class="number">90</span>, <span class="number">180</span>, <span class="keyword">false</span>, mPaint);</span><br><span class="line">        <span class="comment">// 绘制右边矩形</span></span><br><span class="line">        canvas.drawLine(mArcRadius + mLeftMargin, mLeftMargin, mProgressWidth + mLeftMargin, mLeftMargin, mPaint);</span><br><span class="line">        canvas.drawLine(mArcRadius + mLeftMargin, mLeftMargin + <span class="number">2</span> * mArcRadius, mProgressWidth + mLeftMargin, mLeftMargin + <span class="number">2</span> * mArcRadius, mPaint);</span><br><span class="line">        canvas.drawLine(mProgressWidth + mLeftMargin, mLeftMargin, mProgressWidth + mLeftMargin, mLeftMargin + <span class="number">2</span> * mArcRadius, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新进度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> progress 当前进度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mProgress = progress;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方便属性动画更新属性progress的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.mProgress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）扇形进度思路&quot;&gt;&lt;a href=&quot;#（一）扇形进度思路&quot; class=&quot;headerlink&quot; title=&quot;（一）扇形进度思路&quot;&gt;&lt;/a&gt;（一）扇形进度思路&lt;/h3&gt;&lt;p&gt;1、绘制边界&lt;/p&gt;
&lt;p&gt;2、绘制左半圆&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Shader</title>
    <link href="http://hawkyAndroid.github.io/2019/01/02/summery-view-shader/"/>
    <id>http://hawkyAndroid.github.io/2019/01/02/summery-view-shader/</id>
    <published>2019-01-02T11:34:55.000Z</published>
    <updated>2019-01-03T16:08:57.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Shader概述"><a href="#（一）Shader概述" class="headerlink" title="（一）Shader概述"></a>（一）Shader概述</h3><p>Shader是着色器，其作用是给图像着色，配合画笔Paint使用。一般不直接使用，它有自己的子类：BitmapShader、LinearGradient、SweepGradient、RadialGradient、ComposeShader等。</p><h3 id="（二）TileMode平铺模式"><a href="#（二）TileMode平铺模式" class="headerlink" title="（二）TileMode平铺模式"></a>（二）TileMode平铺模式</h3><h4 id="1-gt-Shader-TileMode-CLAMP："><a href="#1-gt-Shader-TileMode-CLAMP：" class="headerlink" title="1&gt; Shader.TileMode.CLAMP："></a>1&gt; Shader.TileMode.CLAMP：</h4><p>边缘拉伸模式，边缘会往外拉伸的一个像素来填充区域。</p><h4 id="2-gt-Shader-TileMode-MIRROR："><a href="#2-gt-Shader-TileMode-MIRROR：" class="headerlink" title="2&gt; Shader.TileMode.MIRROR："></a>2&gt; Shader.TileMode.MIRROR：</h4><p>镜像模式，关于X轴/Y轴（镜面对称）翻转复制。</p><h4 id="3-gt-Shader-TileMode-REPEAT"><a href="#3-gt-Shader-TileMode-REPEAT" class="headerlink" title="3&gt; Shader.TileMode.REPEAT:"></a>3&gt; Shader.TileMode.REPEAT:</h4><p>重复模式，关于X轴/Y轴平移复制。</p><h3 id="（三）Shader实例"><a href="#（三）Shader实例" class="headerlink" title="（三）Shader实例"></a>（三）Shader实例</h3><h4 id="BitmapShader-的用法："><a href="#BitmapShader-的用法：" class="headerlink" title="BitmapShader 的用法："></a>BitmapShader 的用法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用它来创建一个新的着色器，它将用位图绘制。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bitmap 在着色器内部使用的位图。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tileX  在X轴绘制位图的平铺模式。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tileY  在Y轴绘制位图的平铺模式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mBitmapShader = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.MIRROR, Shader.TileMode.MIRROR);</span><br><span class="line"><span class="comment">// 添加着色器</span></span><br><span class="line">mPaint.setShader(mBitmapShader);</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, mPaint);</span><br></pre></td></tr></table></figure><h4 id="LinearGradient-的用法"><a href="#LinearGradient-的用法" class="headerlink" title="LinearGradient 的用法:"></a>LinearGradient 的用法:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 线性渐变着色器。注意：起点和终点是相对于屏幕坐标系而言的。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> (x0, y0) 渐变起点</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> (x1, y1) 渐变终点</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> color0 起点的颜色</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> color1 终点的颜色</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> title 平铺模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mShader = <span class="keyword">new</span> LinearGradient(<span class="keyword">float</span> x0, <span class="keyword">float</span> y0, <span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">int</span> color0, <span class="keyword">int</span> color1, Shader.TileMode tile);</span><br><span class="line">mPaint.setShader(mShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 线性渐变着色器。注意：渐变区域遵循(left, top, right, bottom)。</span></span><br><span class="line"><span class="comment">* (x0, y0) 渐变起点</span></span><br><span class="line"><span class="comment">* (x1, y1) 渐变终点</span></span><br><span class="line"><span class="comment">* colors 传入颜色数组</span></span><br><span class="line"><span class="comment">* positions 传入位置数组(可以为null)  取值范围[0, 1F]</span></span><br><span class="line"><span class="comment">* title 平铺模式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mShader = <span class="keyword">new</span> LinearGradient(-<span class="number">200</span>, -<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Color.RED, Color.YELLOW, Color.GREEN, Color.BLUE&#125;,</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0</span>, <span class="number">0.3F</span>, <span class="number">0.6F</span>, <span class="number">0.8F</span>&#125;, Shader.TileMode.CLAMP);</span><br><span class="line">mPaint.setShader(mShader);</span><br></pre></td></tr></table></figure><h4 id="SweepGradient-的用法"><a href="#SweepGradient-的用法" class="headerlink" title="SweepGradient 的用法"></a>SweepGradient 的用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 梯度渐变着色器，围绕中心点绘制扫描梯度。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cx       The x-coordinate of the center</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cy       The y-coordinate of the center</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color0   The color to use at the start of the sweep</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> color1   The color to use at the end of the sweep</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mShader = <span class="keyword">new</span> SweepGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">int</span> color0, <span class="keyword">int</span> color1);</span><br><span class="line">mPaint.setShader(mShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 梯度渐变着色器，围绕中心点绘制扫描梯度。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cx       The x-coordinate of the center</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> cy       The y-coordinate of the center</span></span><br><span class="line"><span class="comment">* colors 传入颜色数组</span></span><br><span class="line"><span class="comment">* positions 传入位置数组(可以为null)  取值范围[0, 1F]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mShader = <span class="keyword">new</span> SweepGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Color.RED, Color.YELLOW, Color.GREEN&#125;, <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0.2F</span>, <span class="number">0.5F</span>, <span class="number">0.8F</span>&#125;);</span><br><span class="line">mPaint.setShader(mShader);</span><br></pre></td></tr></table></figure><h4 id="RadialGradient-的用法"><a href="#RadialGradient-的用法" class="headerlink" title="RadialGradient 的用法"></a>RadialGradient 的用法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 径向渐变着色器，从圆形中心向四周渐变。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> centerX     The x-coordinate of the center of the radius</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> centerY     The y-coordinate of the center of the radius</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> radius      Must be positive. The radius of the circle for this gradient</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> centerColor The color at the center of the circle.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> edgeColor   The color at the edge of the circle.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tileMode    The Shader tiling mode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">mShader = <span class="keyword">new</span> RadialGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, Color.RED, Color.YELLOW, Shader.TileMode.CLAMP);</span><br><span class="line">mPaint.setShader(mShader);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 径向渐变着色器，从圆形中心向四周渐变。</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> centerX     The x-coordinate of the center of the radius</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> centerY     The y-coordinate of the center of the radius</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> radius      Must be positive. The radius of the circle for this gradient</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> centerColor The color at the center of the circle.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> edgeColor   The color at the edge of the circle.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tileMode    The Shader tiling mode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">mShader = <span class="keyword">new</span> RadialGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Color.RED, Color.YELLOW, Color.BLUE&#125;,</span><br><span class="line"> <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0.1F</span>, <span class="number">0.4F</span>, <span class="number">0.5F</span>&#125;, Shader.TileMode.CLAMP);</span><br><span class="line">mPaint.setShader(mShader);</span><br></pre></td></tr></table></figure><h4 id="ComposeShader-的用法"><a href="#ComposeShader-的用法" class="headerlink" title="ComposeShader 的用法"></a>ComposeShader 的用法</h4><p>两个Shader组合在一起作为一个新Shader<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Shader shader01 = <span class="keyword">new</span> BitmapShader(mBitmap, Shader.TileMode.MIRROR, Shader.TileMode.MIRROR);</span><br><span class="line">Shader shader02 = <span class="keyword">new</span> SweepGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;Color.RED, Color.YELLOW, Color.GREEN&#125;, <span class="keyword">new</span> <span class="keyword">float</span>[]&#123;<span class="number">0.2F</span>, <span class="number">0.5F</span>, <span class="number">0.8F</span>&#125;);</span><br><span class="line"></span><br><span class="line">mPaint.setShader(<span class="keyword">new</span> ComposeShader(shader01, shader02, PorterDuff.Mode.DARKEN));</span><br><span class="line">canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, mPaint);</span><br></pre></td></tr></table></figure></p><h4 id="Shader的矩阵变换"><a href="#Shader的矩阵变换" class="headerlink" title="Shader的矩阵变换"></a>Shader的矩阵变换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Matrix matrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">matrix.preTranslate(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">matrix.preRotate(<span class="number">20</span>);</span><br><span class="line">matrix.preScale(<span class="number">0.5f</span>, <span class="number">1</span>);</span><br><span class="line">matrix.preSkew(<span class="number">2f</span>, <span class="number">1f</span>);</span><br><span class="line"><span class="comment">// 设置Shader的变换矩阵</span></span><br><span class="line">mShader.setLocalMatrix(matrix);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Shader概述&quot;&gt;&lt;a href=&quot;#（一）Shader概述&quot; class=&quot;headerlink&quot; title=&quot;（一）Shader概述&quot;&gt;&lt;/a&gt;（一）Shader概述&lt;/h3&gt;&lt;p&gt;Shader是着色器，其作用是给图像着色，配合画笔Paint使用。一
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>2018年度总结</title>
    <link href="http://hawkyAndroid.github.io/2019/01/01/annual-summery-for-2018/"/>
    <id>http://hawkyAndroid.github.io/2019/01/01/annual-summery-for-2018/</id>
    <published>2019-01-01T14:08:07.000Z</published>
    <updated>2019-01-01T14:25:41.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018年度总结"><a href="#2018年度总结" class="headerlink" title="2018年度总结"></a>2018年度总结</h2><p>这年真的过得很快，很多事情感觉都没来得及准备或者开始就结束了。整体来说，2018这年真的很失败。</p><h4 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h4><ol><li><p>工作环境：还是原来的公司，不过团队换了不少新人，公司流动性还是很大。</p></li><li><p>业务交流：今年跟业务交流的比较少，而且由于流动性的原因，接触的业务次数更少了。</p></li><li><p>解决方案：当公司或客户提出新需求时，能够比较快的解决。</p></li></ol><h4 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h4><ol><li><p>专业技术：熟悉了学习Android性能优化、基本掌握了学习自定义View。</p></li><li><p>自学股票：未完成。</p></li></ol><h4 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h4><ol><li><p>看病：仍在继续。</p></li><li><p>女票：仍是单身。</p></li><li><p>买房：付首付的钱还是不够。今年要攒够钱付首付、不要乱花钱、理财。</p></li><li><p>旅游：去了一趟日本旅游。</p></li><li><p>书籍：看来不少技术方面的纸质书籍和投资方面的电子书。</p></li><li><p>拿了驾照。</p></li></ol><h2 id="展望2019（改变）"><a href="#展望2019（改变）" class="headerlink" title="展望2019（改变）"></a>展望2019（改变）</h2><ol><li><p>拿教师资格证</p></li><li><p>告别单身</p></li><li><p>掌握一门语言：Koltin</p></li><li><p>看完剩下的书</p></li><li><p>治好病</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018年度总结&quot;&gt;&lt;a href=&quot;#2018年度总结&quot; class=&quot;headerlink&quot; title=&quot;2018年度总结&quot;&gt;&lt;/a&gt;2018年度总结&lt;/h2&gt;&lt;p&gt;这年真的过得很快，很多事情感觉都没来得及准备或者开始就结束了。整体来说，2018这年真的很失
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>Android Animator之XML动画</title>
    <link href="http://hawkyAndroid.github.io/2018/12/26/summary-animation-xml/"/>
    <id>http://hawkyAndroid.github.io/2018/12/26/summary-animation-xml/</id>
    <published>2018-12-26T13:19:55.000Z</published>
    <updated>2018-12-26T13:21:54.056Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）-使用XML编写动画。"><a href="#（一）-使用XML编写动画。" class="headerlink" title="（一） 使用XML编写动画。"></a>（一） 使用XML编写动画。</h3><p>使用 XML 编写动画的优点是：方便重用、可读性较高。</p><h4 id="1、-ValueAnimator-动画：res-animator-value-animator-01-xml"><a href="#1、-ValueAnimator-动画：res-animator-value-animator-01-xml" class="headerlink" title="1、  ValueAnimator 动画：res/animator/value_animator_01.xml"></a>1、  ValueAnimator 动画：res/animator/value_animator_01.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">animator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatCount</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:startOffset</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"intType"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>AnimatorInflater 加载动画并执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载属性动画</span></span><br><span class="line"> ValueAnimator animator = (ValueAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.value_animator_01);</span><br><span class="line"><span class="comment">// 添加（值）数据更新监听</span></span><br><span class="line">animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> value = (<span class="keyword">int</span>) animation.getAnimatedValue();</span><br><span class="line">       DebugLog.e(<span class="string">"value："</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p><h4 id="2、-ObjectAnimator-动画：res-animator-object-animator-01-xml"><a href="#2、-ObjectAnimator-动画：res-animator-object-animator-01-xml" class="headerlink" title="2、  ObjectAnimator 动画：res/animator/object_animator_01.xml"></a>2、  ObjectAnimator 动画：res/animator/object_animator_01.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:duration</span>=<span class="string">"3000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:interpolator</span>=<span class="string">"@android:interpolator/linear"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatCount</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:repeatMode</span>=<span class="string">"reverse"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:startOffset</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueFrom</span>=<span class="string">"0.1F"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueTo</span>=<span class="string">"1F"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>AnimatorInflater 加载动画并执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载属性动画</span></span><br><span class="line">ObjectAnimator animator = (ObjectAnimator) AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.object_animator_01);</span><br><span class="line"><span class="comment">// 设置目标对象</span></span><br><span class="line">animator.setTarget(textView);</span><br><span class="line"><span class="comment">// 添加动画监听</span></span><br><span class="line">animator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画开始"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画结束"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p><h4 id="3、-ValueAnimator-组合动画：res-animator-animator-set-01-xml"><a href="#3、-ValueAnimator-组合动画：res-animator-animator-set-01-xml" class="headerlink" title="3、  ValueAnimator 组合动画：res/animator/animator_set_01.xml"></a>3、  ValueAnimator 组合动画：res/animator/animator_set_01.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:ordering</span>=<span class="string">"together"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"3000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueFrom</span>=<span class="string">"0.1F"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueTo</span>=<span class="string">"1F"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span> <span class="attr">android:ordering</span>=<span class="string">"sequentially"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:duration</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:propertyName</span>=<span class="string">"rotation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueFrom</span>=<span class="string">"0F"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueTo</span>=<span class="string">"180F"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">objectAnimator</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:duration</span>=<span class="string">"1500"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:propertyName</span>=<span class="string">"rotation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueFrom</span>=<span class="string">"180F"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueTo</span>=<span class="string">"0F"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AnimatorInflater 加载组合动画并执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载组合属性动画</span></span><br><span class="line">Animator animator = AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.animator_set_01);</span><br><span class="line"><span class="comment">// 设置目标对象</span></span><br><span class="line">animator.setTarget(textView);</span><br><span class="line">animator.start();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）-使用XML编写动画。&quot;&gt;&lt;a href=&quot;#（一）-使用XML编写动画。&quot; class=&quot;headerlink&quot; title=&quot;（一） 使用XML编写动画。&quot;&gt;&lt;/a&gt;（一） 使用XML编写动画。&lt;/h3&gt;&lt;p&gt;使用 XML 编写动画的优点是：方便重用、可
      
    
    </summary>
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/categories/Animation/"/>
    
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Android Animator之ObjectAnimator</title>
    <link href="http://hawkyAndroid.github.io/2018/12/25/summary-animation-objectanimator/"/>
    <id>http://hawkyAndroid.github.io/2018/12/25/summary-animation-objectanimator/</id>
    <published>2018-12-25T14:14:26.000Z</published>
    <updated>2018-12-27T11:37:26.788Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）ObjectAnimation-概述"><a href="#（一）ObjectAnimation-概述" class="headerlink" title="（一）ObjectAnimation 概述"></a>（一）ObjectAnimation 概述</h3><p>ObjectAnimator：可以直接对任意对象的任意属性进行动画操作。其中控件的属性(必须有对应的get/set方法)可以通过控件本身或者父View的源码查询。</p><h3 id="（二）ObjectAnimation-用法"><a href="#（二）ObjectAnimation-用法" class="headerlink" title="（二）ObjectAnimation 用法"></a>（二）ObjectAnimation 用法</h3><p>1、一般动画 ObjectAnimation<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前控件Y轴缩放比</span></span><br><span class="line"><span class="keyword">float</span> currentScaleX = textView.getScaleX();</span><br><span class="line"><span class="comment">// 控件Y轴放大3倍。属性名scaleY对应 getScaleY()和setScaleY(float scaleY)方法。</span></span><br><span class="line">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"scaleY"</span>, <span class="number">1F</span>, <span class="number">3F</span>);</span><br><span class="line">objectAnimator.setDuration(<span class="number">1000L</span>);</span><br><span class="line">objectAnimator.start();</span><br></pre></td></tr></table></figure></p><p>2、组合动画 AnimatorSet<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line"></span><br><span class="line">ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"alpha"</span>, <span class="number">1F</span>, <span class="number">0.1F</span>);</span><br><span class="line">ObjectAnimator rotationAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"rotation"</span>, <span class="number">0F</span>, <span class="number">360F</span>);</span><br><span class="line">ObjectAnimator scaleXAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"scaleX"</span>, <span class="number">1F</span>, <span class="number">3F</span>);</span><br><span class="line">ObjectAnimator translationXAnimator = ObjectAnimator.ofFloat(textView, <span class="string">"translationX"</span>, <span class="number">0F</span>, -<span class="number">300F</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// with：alphaAnimator与rotationAnimator同时执行</span></span><br><span class="line">animatorSet.play(alphaAnimator).with(rotationAnimator);</span><br><span class="line"><span class="comment">// before：alphaAnimator在translationXAnimator之前执行</span></span><br><span class="line">animatorSet.play(alphaAnimator).before(translationXAnimator);</span><br><span class="line"><span class="comment">// after：alphaAnimator在scaleXAnimator之后执行</span></span><br><span class="line">animatorSet.play(alphaAnimator).after(scaleXAnimator);</span><br><span class="line"><span class="comment">// after：alphaAnimator在1s之后执行</span></span><br><span class="line">animatorSet.play(alphaAnimator).after(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// playTogether：同时执行多个动画</span></span><br><span class="line">animatorSet.playTogether(alphaAnimator, rotationAnimator, scaleXAnimator, translationXAnimator);</span><br><span class="line"><span class="comment">// playSequentially：多个动画按顺序执行</span></span><br><span class="line">animatorSet.playSequentially(alphaAnimator, rotationAnimator, scaleXAnimator, translationXAnimator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 动画加速</span></span><br><span class="line">animatorSet.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());</span><br><span class="line"><span class="comment">// 动画监听</span></span><br><span class="line">animatorSet.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画开始"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画取消"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画重复执行"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationPause</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画暂停"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationResume</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画继续"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">       DebugLog.e(<span class="string">"动画结束"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行时长。若同时执行则为 1s，反之累加。</span></span><br><span class="line">animatorSet.setDuration(<span class="number">1000L</span>);</span><br><span class="line"><span class="comment">// 延时 1s 执行</span></span><br><span class="line">animatorSet.setStartDelay(<span class="number">1000L</span>);</span><br><span class="line">animatorSet.start();</span><br></pre></td></tr></table></figure></p><h3 id="（三）Interpolator-用法"><a href="#（三）Interpolator-用法" class="headerlink" title="（三）Interpolator 用法"></a>（三）Interpolator 用法</h3><p>Interpolator插值器 定义动画的变化率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义一个先减速后加速的Interpolator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecelerateAccelerateInterpolator</span> <span class="keyword">implements</span> <span class="title">TimeInterpolator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> input 系统根据设定的动画时长匀速增加，变化范围是0到1。</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> fraction 斜率决定快慢  - +</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getInterpolation</span><span class="params">(<span class="keyword">float</span> input)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (input &lt; <span class="number">0.5f</span>) &#123;<span class="comment">// x ∈[0, 1/2)</span></span><br><span class="line">          <span class="keyword">return</span> (<span class="keyword">float</span>) (Math.sin(input * Math.PI) / <span class="number">2.0f</span>);<span class="comment">// y∈[0, 1/2] 【-】</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;<span class="comment">// x ∈[1/2, 1]</span></span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span> - (<span class="keyword">float</span>) (Math.sin(input * Math.PI) / <span class="number">2.0f</span>);<span class="comment">// y∈ 1 - [1/2, 0] 【+】</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（四）ObjectAnimation-实例"><a href="#（四）ObjectAnimation-实例" class="headerlink" title="（四）ObjectAnimation 实例"></a>（四）ObjectAnimation 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ObjectAnimator 小球加速下落过程中颜色过渡动画</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnimatorView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CIRCLE_RADIUS = <span class="number">100</span>;<span class="comment">// 圆的半径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth, mHeight;<span class="comment">// 控件大小</span></span><br><span class="line">    <span class="keyword">private</span> Point mCurrentPoint;<span class="comment">// 当前中心点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mColor;<span class="comment">// 颜色值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectAnimatorView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectAnimatorView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line"></span><br><span class="line">        mCurrentPoint = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">        mCurrentPoint.set(mWidth / <span class="number">2</span>, CIRCLE_RADIUS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mColor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mColor = color;</span><br><span class="line">        mPaint.setColor(color);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ObjectAnimator：本对象必须要有关于color属性的set/get方法。 Red -&gt; Green -&gt; Blue颜色变化</span></span><br><span class="line">        ObjectAnimator objectAnimator = ObjectAnimator.ofObject(<span class="keyword">this</span>, <span class="string">"color"</span>, <span class="keyword">new</span> ArgbEvaluator(), Color.RED, Color.GREEN, Color.BLUE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ValueAnimator：中心点的坐标位置过渡</span></span><br><span class="line">        Point startPoint = <span class="keyword">new</span> Point(mWidth / <span class="number">2</span>, CIRCLE_RADIUS);</span><br><span class="line">        Point endPoint = <span class="keyword">new</span> Point(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line">        ValueAnimator valueAnimator = ValueAnimator.ofObject(<span class="keyword">new</span> PointEvaluator(), startPoint, endPoint);</span><br><span class="line">        valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                mCurrentPoint = (Point) animation.getAnimatedValue();</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        valueAnimator.addListener(<span class="keyword">new</span> AnimatorListenerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</span><br><span class="line">                DebugLog.e(<span class="string">"动画结束"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 组合成一个动画</span></span><br><span class="line">        AnimatorSet animatorSet = <span class="keyword">new</span> AnimatorSet();</span><br><span class="line">        animatorSet.play(objectAnimator).with(valueAnimator);</span><br><span class="line">        animatorSet.setDuration(<span class="number">3000L</span>);</span><br><span class="line">        <span class="comment">// 设置插值器：加速变化（默认是AccelerateDecelerateInterpolator）</span></span><br><span class="line">        animatorSet.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator(<span class="number">2F</span>));</span><br><span class="line">        animatorSet.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        canvas.drawCircle(mCurrentPoint.x, mCurrentPoint.y, CIRCLE_RADIUS, mPaint);</span><br><span class="line"></span><br><span class="line">        mPaint.reset();</span><br><span class="line">        canvas.drawLine(<span class="number">0</span>, mHeight / <span class="number">2</span> + CIRCLE_RADIUS, mWidth, mHeight / <span class="number">2</span> + CIRCLE_RADIUS, mPaint);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">15F</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> LIMIT_COUNT = <span class="number">19</span>;</span><br><span class="line">        <span class="keyword">int</span> pointDist = mWidth / LIMIT_COUNT;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LIMIT_COUNT; i++) &#123;</span><br><span class="line">            canvas.drawPoint(pointDist * i, mHeight / <span class="number">2</span> + CIRCLE_RADIUS, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）ObjectAnimation-概述&quot;&gt;&lt;a href=&quot;#（一）ObjectAnimation-概述&quot; class=&quot;headerlink&quot; title=&quot;（一）ObjectAnimation 概述&quot;&gt;&lt;/a&gt;（一）ObjectAnimation 概述&lt;/
      
    
    </summary>
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/categories/Animation/"/>
    
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Android Animator之ValueAnimator</title>
    <link href="http://hawkyAndroid.github.io/2018/12/21/summary-animation-valueanimator/"/>
    <id>http://hawkyAndroid.github.io/2018/12/21/summary-animation-valueanimator/</id>
    <published>2018-12-21T12:34:55.000Z</published>
    <updated>2018-12-26T13:27:34.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Android-动画概述"><a href="#（一）Android-动画概述" class="headerlink" title="（一）Android 动画概述"></a>（一）Android 动画概述</h3><pre><code>补间动画(Tweened Animation)：只会改变View的显示效果，不会改变View的真正属性（比如：按钮经补间动画平移后，点击平移后位置上按钮是无效的）。逐帧动画(Frame-by-Frame Animation)：只是将一个完整的动画拆分成一些单独的图片，然后再将它们按顺序连贯起来进行播放。ValueAnimator：只能用于计算在指定时间内，初始值到结束值之间(中间可能有多个过渡值)平滑的动画过渡。ObjectAnimator：可以直接对任意对象的任意属性进行动画操作。--功能强大View可以直接执行动画： view.animate().x(500).y(500).setDuration(5000);</code></pre><h3 id="（二）TypeEvaluator-用法"><a href="#（二）TypeEvaluator-用法" class="headerlink" title="（二）TypeEvaluator 用法"></a>（二）TypeEvaluator 用法</h3><p>TypeEvaluator：作用是告诉动画系统如何从初始值过渡到结束值。</p><p>自定义一个TypeEvaluator:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PointEvaluator：告诉动画系统起始点到结束点的过渡机制</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointEvaluator</span> <span class="keyword">implements</span> <span class="title">TypeEvaluator</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算初始值到结束值的过渡</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fraction   动画完成进度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startValue 初始值（对象）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endValue   结束值（对象）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">evaluate</span><span class="params">(<span class="keyword">float</span> fraction, Point startValue, Point endValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> floatX = startValue.x + fraction * (endValue.x - startValue.x);</span><br><span class="line">        <span class="keyword">float</span> floatY = startValue.y + fraction * (endValue.y - startValue.y);</span><br><span class="line">        DebugLog.e(<span class="string">"floatX："</span> + floatX + <span class="string">", floatY："</span> + floatY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Point((<span class="keyword">int</span>) floatX, (<span class="keyword">int</span>) floatY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行两个点之间的动画过渡:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PointEvaluator evaluator = <span class="keyword">new</span> PointEvaluator();</span><br><span class="line">Point startPoint = <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">Point endPoint = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">ValueAnimator valueAnimator = ValueAnimator.ofObject(evaluator, startPoint, endPoint);</span><br><span class="line">valueAnimator.setDuration(<span class="number">10000L</span>);</span><br><span class="line">valueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">        Point point = (Point) animation.getAnimatedValue();</span><br><span class="line">        DebugLog.e(<span class="string">"point："</span> + point.toString());<span class="comment">// 新的过渡点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">valueAnimator.start();</span><br></pre></td></tr></table></figure></p><h3 id="（三）ValueAnimator-实例"><a href="#（三）ValueAnimator-实例" class="headerlink" title="（三）ValueAnimator 实例"></a>（三）ValueAnimator 实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ValueAnimator之画圆动画过渡轨迹</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueAnimatorView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mDstPath;<span class="comment">// 目标路径</span></span><br><span class="line">    <span class="keyword">private</span> PathMeasure mPathMeasure;</span><br><span class="line">    <span class="keyword">private</span> ValueAnimator mValueAnimator;<span class="comment">// 值动画</span></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth, mHeight;<span class="comment">// 控件大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCirclePerimeter;<span class="comment">// 圆的周长</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStopD;<span class="comment">// 截取的结束位置距离Path起点的路径(轨迹)长度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueAnimatorView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValueAnimatorView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(DensityUtils.dip2px(mContext, <span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        path.addCircle(<span class="number">0</span>, <span class="number">0</span>, DensityUtils.dip2px(mContext, <span class="number">100</span>), Path.Direction.CW);</span><br><span class="line">        mPathMeasure = <span class="keyword">new</span> PathMeasure(path, <span class="keyword">false</span>);</span><br><span class="line">        mCirclePerimeter = mPathMeasure.getLength();</span><br><span class="line"></span><br><span class="line">        mDstPath = <span class="keyword">new</span> Path();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValueAnimator.isRunning()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mValueAnimator = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mValueAnimator = ValueAnimator.ofFloat(<span class="number">0</span>, <span class="number">1F</span>);<span class="comment">// ValueAnimator.ofFloat(0, 0.8F, 1F);// 后面20%变慢</span></span><br><span class="line">        mValueAnimator.setDuration(<span class="number">3000L</span>);<span class="comment">// 每次持续3s（默认300ms）</span></span><br><span class="line">        mValueAnimator.setRepeatCount(<span class="number">2</span>);<span class="comment">// 重复 2+1 次； 总时间：mValueAnimator.getTotalDuration()</span></span><br><span class="line">        mValueAnimator.setRepeatMode(ValueAnimator.REVERSE);<span class="comment">// 反向重复</span></span><br><span class="line">        mValueAnimator.setInterpolator(<span class="keyword">new</span> AccelerateInterpolator());<span class="comment">// 动画插入器：Interpolator插值器定义动画的变化率。</span></span><br><span class="line">        mValueAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">float</span> value = (<span class="keyword">float</span>) animation.getAnimatedValue();<span class="comment">// [0.0f, 1.0f]</span></span><br><span class="line">                mStopD = mCirclePerimeter * value;</span><br><span class="line">                invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mValueAnimator.setStartDelay(<span class="number">1000L</span>);<span class="comment">// 延时1s执行动画</span></span><br><span class="line">        <span class="comment">//  mValueAnimator.reverse();// 反向执行</span></span><br><span class="line">        mValueAnimator.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pauseAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValueAnimator.isRunning()) &#123;</span><br><span class="line">                mValueAnimator.pause();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继续动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resumeAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValueAnimator.isRunning()) &#123;</span><br><span class="line">                mValueAnimator.resume();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValueAnimator.isRunning()) &#123;</span><br><span class="line">                mValueAnimator.end();</span><br><span class="line">            &#125;</span><br><span class="line">            mValueAnimator = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重启动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restartAnimation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mValueAnimator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mValueAnimator.isRunning()) &#123;</span><br><span class="line">                mValueAnimator.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        startAnimation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        endAnimation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line">        canvas.drawColor(Color.CYAN);</span><br><span class="line"></span><br><span class="line">        mDstPath.reset();</span><br><span class="line">        <span class="keyword">if</span> (mPathMeasure.getSegment(<span class="number">0</span>, mStopD, mDstPath, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            canvas.drawPath(mDstPath, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Android-动画概述&quot;&gt;&lt;a href=&quot;#（一）Android-动画概述&quot; class=&quot;headerlink&quot; title=&quot;（一）Android 动画概述&quot;&gt;&lt;/a&gt;（一）Android 动画概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;补间动画(Tween
      
    
    </summary>
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/categories/Animation/"/>
    
    
      <category term="Animation" scheme="http://hawkyAndroid.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Android View之GestureDetector</title>
    <link href="http://hawkyAndroid.github.io/2018/12/17/summary-view-gesturedetector/"/>
    <id>http://hawkyAndroid.github.io/2018/12/17/summary-view-gesturedetector/</id>
    <published>2018-12-17T11:34:15.000Z</published>
    <updated>2018-12-21T14:23:45.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）GestureDetector-概述"><a href="#（一）GestureDetector-概述" class="headerlink" title="（一）GestureDetector 概述"></a>（一）GestureDetector 概述</h3><p>GestureDetector：主要用来结合MotionEvent检测并识别各种手势事件，注意它只能用来识别并接管触摸事件的MotionEvent。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********  常用步骤  **********/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、创建GestureDetector实例并实现监听。注意：这里只会有一种事件类型的回调触发。</span></span><br><span class="line">GestureDetector gestureDetector = <span class="keyword">new</span> GestureDetector(<span class="keyword">this</span>, <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapConfirmed</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"单击确认（事件），双击发生时不会触发"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDoubleTap</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"双击事件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onDoubleTap(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onLongPress(e);</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"长按事件"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDoubleTapEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.getActionMasked()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"双击事件（手指抬起）"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onDoubleTapEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、为指定控件设置触摸监听并让GestureDetector接管onTouchEvent事件。注意：view1需要是可点击的</span></span><br><span class="line">view1.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mGestureDetector.onTouchEvent(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="（二）GestureDetector-方法"><a href="#（二）GestureDetector-方法" class="headerlink" title="（二）GestureDetector 方法"></a>（二）GestureDetector 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置是否禁用长按事件</span></span><br><span class="line">mGestureDetector.setIsLongpressEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否允许长按事件</span></span><br><span class="line">mGestureDetector.isLongpressEnabled();</span><br></pre></td></tr></table></figure><h3 id="（三）GestureDetector-实例"><a href="#（三）GestureDetector-实例" class="headerlink" title="（三）GestureDetector 实例"></a>（三）GestureDetector 实例</h3><p>1、GestureDetector 手势检测<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认监听OnGestureListener。常用的是SimpleOnGestureListener</span></span><br><span class="line"><span class="keyword">private</span> GestureDetector.OnGestureListener mDefaultGestureListener = <span class="keyword">new</span> GestureDetector.OnGestureListener() &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 当View为文本、图片默认不可点击时，为保证事件被唯一的 View 消费，</span></span><br><span class="line"><span class="comment">      * 要么声明它们的 clickable 为 true，要么onDown回 true。</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> true则被唯一的View消费，反之被可被多个View消费</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"按下"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 按下超过100ms触发，若小于100ms或事件被立即拦截则不会被触发。</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShowPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"onShowPress"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 单击抬起（在双击的第一次抬起时触发）</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"onSingleTapUp"</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 监听滚动</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e1 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e2 手指移动时的MotionEvent</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> distanceX 在 X 轴上滚动的距离</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> distanceY 在 Y 轴上滚动的距离</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScroll</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="keyword">float</span> distanceX, <span class="keyword">float</span> distanceY)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"onScroll#distanceX："</span> + distanceX + <span class="string">",distanceY："</span> + distanceY);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 长按超过500ms触发</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongPress</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"onLongPress"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 抛(投掷)。通过 e1 和 e2 获取到手指按下和抬起时的坐标、时间等。</span></span><br><span class="line"><span class="comment">      * 通过 velocityX 和 velocityY 获取到在这段时间内的运动速度，单位是像素(距离)／秒。</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e1 手指按下时的MotionEvent</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e2 手指移动时的MotionEvent</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> velocityX 在 X 轴上的运动速度(像素／秒)。</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> velocityY 在 Y 轴上的运动速度(像素／秒)。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onFling</span><span class="params">(MotionEvent e1, MotionEvent e2, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span> </span>&#123;</span><br><span class="line">         DebugLog.e(<span class="string">"onScroll#velocityX："</span> + velocityX + <span class="string">",velocityY："</span> + velocityY);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p><p>2、ScaleGestureDetector 缩放手势检测<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * View之ScaleGestureDetector - 缩放手指检测（至少2根手指）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScaleGestureDetectorView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScaleGestureDetector mScaleGestureDetector;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPointCount;<span class="comment">// 手指数量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaleGestureDetectorView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScaleGestureDetectorView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mScaleGestureDetector = <span class="keyword">new</span> ScaleGestureDetector(context, <span class="keyword">new</span> ScaleGestureDetector.OnScaleGestureListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 缩放手势被触发</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> detector 缩放手势</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> true：表示当前缩放事件已被处理，会重新积累缩放因子；false 则会继续积累缩放因子。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">                DebugLog.e(<span class="string">"focus("</span> + detector.getFocusX() + <span class="string">","</span> + detector.getFocusY() + <span class="string">")"</span>); <span class="comment">// 缩放中心(x,y)坐标 -- 焦点</span></span><br><span class="line">                DebugLog.e(<span class="string">"scale = "</span> + detector.getScaleFactor());  <span class="comment">// 缩放因子 -- 比例</span></span><br><span class="line">                DebugLog.e(<span class="string">"mPointCount："</span> + mPointCount);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 缩放手势开始</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> detector 缩放手势</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span> 只有返回true才可使用缩放手势</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">                DebugLog.e(<span class="string">"-----缩放手势开始-----"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 缩放手势结束 MotionEvent.ACTION_POINTER_UP时触发</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> detector 缩放手势</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScaleEnd</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">                DebugLog.e(<span class="string">"-----缩放手势结束-----"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        mPointCount = event.getPointerCount();</span><br><span class="line">        <span class="keyword">return</span> mScaleGestureDetector.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）GestureDetector-概述&quot;&gt;&lt;a href=&quot;#（一）GestureDetector-概述&quot; class=&quot;headerlink&quot; title=&quot;（一）GestureDetector 概述&quot;&gt;&lt;/a&gt;（一）GestureDetector 概述&lt;/
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Region</title>
    <link href="http://hawkyAndroid.github.io/2018/12/13/summary-view-region/"/>
    <id>http://hawkyAndroid.github.io/2018/12/13/summary-view-region/</id>
    <published>2018-12-13T11:08:55.000Z</published>
    <updated>2018-12-14T15:32:48.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Region概述"><a href="#（一）Region概述" class="headerlink" title="（一）Region概述"></a>（一）Region概述</h3><p>Region（区域）是封闭的，可通过关联Path（不封闭图形）来判断特殊形状图形的点击区域（范围）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  区域是否包含指定的点(x, y)</span></span><br><span class="line">region.contains(<span class="keyword">int</span> x, <span class="keyword">int</span> y);</span><br></pre></td></tr></table></figure></p><h3 id="（二）Region实例"><a href="#（二）Region实例" class="headerlink" title="（二）Region实例"></a>（二）Region实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * View - Region 判断点击范围是否在目标图形区域内</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegionView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line">    <span class="keyword">private</span> RectF mBigRectF;</span><br><span class="line">    <span class="keyword">private</span> RectF mSmallRectF;</span><br><span class="line">    <span class="comment">// 目标图形区域</span></span><br><span class="line">    <span class="keyword">private</span> Region targetGraphRegion;</span><br><span class="line">    <span class="comment">// 模板边界区域（范围更大）</span></span><br><span class="line">    <span class="keyword">private</span> Region templateRegion;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按下时的区域标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> touchFlag = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当前的区域标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentFlag = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegionView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RegionView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line">        targetGraphRegion = <span class="keyword">new</span> Region();</span><br><span class="line">        DebugLog.e(<span class="string">"初始化的目标图形区域#targetGraphRegion："</span> + targetGraphRegion.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="comment">// 创建模板边界区域</span></span><br><span class="line">        templateRegion = <span class="keyword">new</span> Region(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">        mBigRectF = <span class="keyword">new</span> RectF(w / <span class="number">2</span> - <span class="number">400</span>, h / <span class="number">2</span> - <span class="number">400</span>, w / <span class="number">2</span> + <span class="number">400</span>, h / <span class="number">2</span> + <span class="number">400</span>);</span><br><span class="line">        mSmallRectF = <span class="keyword">new</span> RectF(w / <span class="number">2</span> - <span class="number">200</span>, h / <span class="number">2</span> - <span class="number">200</span>, w / <span class="number">2</span> + <span class="number">200</span>, h / <span class="number">2</span> + <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> px = (<span class="keyword">int</span>) event.getX();</span><br><span class="line">        <span class="keyword">int</span> py = (<span class="keyword">int</span>) event.getY();</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                currentFlag = touchFlag = containsPoint(px, py);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                currentFlag = containsPoint(px, py);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:<span class="comment">// 释放手指时复位</span></span><br><span class="line">                currentFlag = containsPoint(px, py);</span><br><span class="line">                <span class="comment">// 如果按下的点和释放的点在同一区域而且是目标区域，则认为是点击事件（目标区域被点击）</span></span><br><span class="line">                <span class="keyword">if</span> (currentFlag == touchFlag &amp;&amp; currentFlag != -<span class="number">1</span>) &#123;</span><br><span class="line">                    DebugLog.e(<span class="string">"--在目标图形区域内被点击--"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        mListener.onRegionClickListener(px, py);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                currentFlag = touchFlag = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:<span class="comment">// 被上层控件拦截时复位</span></span><br><span class="line">                currentFlag = touchFlag = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标图形区域是否包含指定的点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">containsPoint</span><span class="params">(<span class="keyword">int</span> px, <span class="keyword">int</span> py)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> targetGraphRegion.contains(px, py) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 图形绘制</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制扇形</span></span><br><span class="line">        mPath.reset();</span><br><span class="line">        <span class="comment">// 添加一个大圆弧到path</span></span><br><span class="line">        mPath.addArc(mBigRectF, <span class="number">230</span>, <span class="number">82</span>);</span><br><span class="line">        <span class="comment">// 添加一个小圆弧到path( 起点与上次最后一个坐标点连接) 310-230=80</span></span><br><span class="line">        mPath.arcTo(mSmallRectF, <span class="number">310</span>, -<span class="number">82</span>);</span><br><span class="line">        <span class="comment">// 连接成闭合曲线</span></span><br><span class="line">        mPath.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这将在templateRegion模板区域上裁剪出一个与路径mPath所绘制的目标图形相同的区域, 然后赋给targetGraphRegion。</span></span><br><span class="line">        <span class="comment">// 如果结果区域targetGraphRegion非空，则返回true。</span></span><br><span class="line">        <span class="comment">// 注意：不管mPath所绘制的目标图形是否闭合，生成的目标区域targetGraphRegion始终是闭合的。</span></span><br><span class="line">        <span class="keyword">boolean</span> success = targetGraphRegion.setPath(mPath, templateRegion);</span><br><span class="line">        DebugLog.e(<span class="string">"success："</span> + success);</span><br><span class="line">        DebugLog.e(<span class="string">"生成后的目标图形区域#targetGraphRegion："</span> + targetGraphRegion.toString());</span><br><span class="line">        <span class="keyword">if</span> (!targetGraphRegion.isEmpty()) &#123;</span><br><span class="line">            DebugLog.e(<span class="string">"targetGraphRegion.getBounds()："</span> + targetGraphRegion.getBounds().toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制Path图形</span></span><br><span class="line">        <span class="comment">// 添加触摸变色效果</span></span><br><span class="line">        <span class="keyword">if</span> (currentFlag == touchFlag &amp;&amp; currentFlag != -<span class="number">1</span>) &#123;</span><br><span class="line">            mPaint.setColor(Color.YELLOW);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mPaint.setColor(Color.RED);</span><br><span class="line">        &#125;</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line"><span class="comment">//        mPaint.setStyle(Paint.Style.STROKE);</span></span><br><span class="line"><span class="comment">//        mPaint.setStrokeWidth(20);</span></span><br><span class="line">        canvas.drawPath(mPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RegionListener mListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(RegionListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegionListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onRegionClickListener</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Region概述&quot;&gt;&lt;a href=&quot;#（一）Region概述&quot; class=&quot;headerlink&quot; title=&quot;（一）Region概述&quot;&gt;&lt;/a&gt;（一）Region概述&lt;/h3&gt;&lt;p&gt;Region（区域）是封闭的，可通过关联Path（不封闭图形）来判断
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之MotionEvent</title>
    <link href="http://hawkyAndroid.github.io/2018/12/11/summary-view-motionevent/"/>
    <id>http://hawkyAndroid.github.io/2018/12/11/summary-view-motionevent/</id>
    <published>2018-12-11T14:26:35.000Z</published>
    <updated>2018-12-15T17:30:42.024Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）MotionEvent-单点触控"><a href="#（一）MotionEvent-单点触控" class="headerlink" title="（一）MotionEvent 单点触控"></a>（一）MotionEvent 单点触控</h3><p>event.getAction()：获取事件类型。</p><table><thead><tr><th>事件类型</th><th>说明</th></tr></thead><tbody><tr><td>ACTION_DOWN</td><td>手指按下时触发</td></tr><tr><td>ACTION_MOVE</td><td>手指在屏幕上滑动时(多次)触发</td></tr><tr><td>ACTION_UP</td><td>手指离开屏幕时触发</td></tr><tr><td>ACTION_CANCEL</td><td>手指被上层控件拦截时触发</td></tr></tbody></table><h3 id="（二）MotionEvent-多点触控"><a href="#（二）MotionEvent-多点触控" class="headerlink" title="（二）MotionEvent 多点触控"></a>（二）MotionEvent 多点触控</h3><p>几个名词解释：</p><pre><code>Action：具体的事件类型pointerIndex：指针（手指）的索引，用于获取具体事件（如：手指的坐标位置）。注意：落下手指时前面有空缺会优先填补空缺; 而手指抬起时后面的也会向前补位。pointerId：指针（手指）的唯一标识ID，用于识别是哪个手指。--推荐注意：pointerId在手指按下和抬起之间ID始终不变。举例说明：0x 00 00 01 0501 表示pointerIndex，05 表示Action</code></pre><p>event.getActionMasked()：获取事件类型。</p><table><thead><tr><th>事件类型</th><th>说明</th></tr></thead><tbody><tr><td>ACTION_DOWN</td><td>第一根手指首次按下时触发</td></tr><tr><td>ACTION_POINTER_DOWN</td><td>其他手指按下时触发</td></tr><tr><td>ACTION_MOVE</td><td>手指在屏幕上滑动时(多次)触发</td></tr><tr><td>ACTION_POINTER_UP</td><td>其他手指抬起时触发</td></tr><tr><td>ACTION_UP</td><td>最后一根手指离开屏幕时触发</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多点触控时获取事件类型（单点触控也可用）</span></span><br><span class="line">event.getActionMasked();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取该事件是哪个指针(手指)产生的（该方法只对DOWN、UP有效）。</span></span><br><span class="line">event.getActionIndex();</span><br><span class="line"><span class="comment">// 获取一个指针(手指)的唯一标识符ID，拿到PointerId用于追踪事件流--推荐。</span></span><br><span class="line"><span class="comment">// 在手指按下和抬起之间ID始终不变</span></span><br><span class="line"><span class="comment">// 参数：这里的pointerIndex就是actionIndex</span></span><br><span class="line">event.getPointerId(<span class="keyword">int</span> pointerIndex);</span><br><span class="line"><span class="comment">// 通过PointerId获取到当前状态下PointIndex，之后通过PointerIndex获取其他内容。</span></span><br><span class="line">event.findPointerIndex(<span class="keyword">int</span> pointerId);</span><br><span class="line"><span class="comment">// 获取在屏幕上指针(手指)的个数。</span></span><br><span class="line">event.getPointerCount();</span><br><span class="line"><span class="comment">// 获取某一个指针(手指)的X坐标</span></span><br><span class="line">event.getX(<span class="keyword">int</span> pointerIndex);</span><br><span class="line"><span class="comment">// 获取某一个指针(手指)的Y坐标</span></span><br><span class="line">event.getY(<span class="keyword">int</span> pointerIndex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取历史事件集合大小（只记录 ACTION_MOVE 事件，所以单点触控也可以用）</span></span><br><span class="line">event.getHistorySize();</span><br><span class="line"><span class="comment">// 获取第index个手指的第pos个历史事件X坐标</span></span><br><span class="line">event.getHistoricalX(<span class="keyword">int</span> index, <span class="keyword">int</span> pos);</span><br><span class="line"><span class="comment">// 获取第index个手指的第pos个历史事件Y坐标</span></span><br><span class="line">event.getHistoricalY(<span class="keyword">int</span> index, <span class="keyword">int</span> pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手指按下时的时间</span></span><br><span class="line">event.getDownTime();</span><br><span class="line"><span class="comment">// 当前事件发生时的时间</span></span><br><span class="line">event.getEventTime();</span><br><span class="line"><span class="comment">// 获取历史事件发生的时间。注意：pos &lt; getHistorySize()</span></span><br><span class="line">event.getHistoricalEventTime(<span class="keyword">int</span> pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取第index手指与屏幕的接触面积大小</span></span><br><span class="line">event.getSize(<span class="keyword">int</span> index);</span><br><span class="line"><span class="comment">// 获取历史数据中第index个手指在第pos次事件中的接触面积</span></span><br><span class="line">event.getHistoricalSize(<span class="keyword">int</span> index, <span class="keyword">int</span> pos);</span><br><span class="line"><span class="comment">// 获取第index个手指的压力大小（可能无效）</span></span><br><span class="line">event.getPressure(<span class="keyword">int</span> index);</span><br><span class="line"><span class="comment">// 获取历史数据中第index个手指在第pos次事件中的压力大小（可能无效）</span></span><br><span class="line">event.getHistoricalPressure(<span class="keyword">int</span> index, <span class="keyword">int</span> pos);</span><br></pre></td></tr></table></figure><h3 id="（三）MotionEvent-多点触控实例"><a href="#（三）MotionEvent-多点触控实例" class="headerlink" title="（三）MotionEvent 多点触控实例"></a>（三）MotionEvent 多点触控实例</h3><p>实例1：追踪手指的轨迹<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * View - MultiTouch 追踪手指的轨迹</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 主要通过 event.getPointerId(event.getActionIndex())来识别是哪根手指（注意：从0开始）</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackFingerView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录第二根手指的位置</span></span><br><span class="line">    <span class="keyword">private</span> PointF pointF;</span><br><span class="line">    <span class="comment">// 是否存在第二根手指</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isPointer2 = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrackFingerView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrackFingerView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        pointF = <span class="keyword">new</span> PointF(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = event.getActionIndex();</span><br><span class="line">        <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:<span class="comment">// 第N根手指按下（N&gt;1）</span></span><br><span class="line">                <span class="keyword">if</span> (event.getPointerId(index) == <span class="number">1</span>) &#123;<span class="comment">// pointerId从0开始</span></span><br><span class="line">                    isPointer2 = <span class="keyword">true</span>;</span><br><span class="line">                    pointF.set(event.getX(), event.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:<span class="comment">// 第N根手指抬起（N&gt;1）</span></span><br><span class="line">                <span class="keyword">if</span> (event.getPointerId(index) == <span class="number">1</span>) &#123;</span><br><span class="line">                    isPointer2 = <span class="keyword">false</span>;</span><br><span class="line">                    pointF.set(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (event.getPointerId(index) == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取第二根手指的索引</span></span><br><span class="line">                    <span class="keyword">int</span> pointerIndex = event.findPointerIndex(<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 通过索引来获取第二根手指的坐标</span></span><br><span class="line">                    pointF.set(event.getX(pointerIndex), event.getY(pointerIndex));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:<span class="comment">// 最后一根手指抬起</span></span><br><span class="line">                isPointer2 = <span class="keyword">false</span>;</span><br><span class="line">                pointF.set(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postInvalidateDelayed(<span class="number">20L</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isPointer2) &#123;</span><br><span class="line">            mPaint.setColor(Color.RED);</span><br><span class="line">            mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">            canvas.drawCircle(pointF.x, pointF.y, <span class="number">300</span>, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例2：可拖动的图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * View - MultiTouch 可拖动的图片(这里只处理第一根手指)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DragBitmapView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="comment">// 图片所在区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mRectF;</span><br><span class="line">    <span class="comment">// 记录最后一个点</span></span><br><span class="line">    <span class="keyword">private</span> PointF mLastPoint;</span><br><span class="line">    <span class="comment">// 用于数值转换</span></span><br><span class="line">    <span class="keyword">private</span> Matrix mMatrix;</span><br><span class="line">    <span class="comment">// 是否可以拖动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enableDrag;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragBitmapView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DragBitmapView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = <span class="number">2</span>;<span class="comment">// 缩小2倍</span></span><br><span class="line">        mBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_logo, options);</span><br><span class="line"></span><br><span class="line">        mRectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mBitmap.getWidth(), mBitmap.getHeight());</span><br><span class="line">        mLastPoint = <span class="keyword">new</span> PointF();</span><br><span class="line">        mMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = event.getActionIndex();</span><br><span class="line">        <span class="keyword">switch</span> (event.getActionMasked()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_DOWN:</span><br><span class="line">                <span class="comment">// 第一根手指 在图片区域内 按下</span></span><br><span class="line">                <span class="keyword">if</span> (event.getPointerId(index) == <span class="number">0</span> &amp;&amp; mRectF.contains(event.getX(), event.getY())) &#123;</span><br><span class="line">                    enableDrag = <span class="keyword">true</span>;</span><br><span class="line">                    mLastPoint.set(event.getX(), event.getY());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                <span class="keyword">if</span> (enableDrag) &#123;</span><br><span class="line">                    <span class="keyword">int</span> pointerIndex = event.findPointerIndex(<span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 图片平移后第一根手指最后一个点的坐标</span></span><br><span class="line">                    mMatrix.postTranslate(event.getX(pointerIndex) - mLastPoint.x, event.getY(pointerIndex) - mLastPoint.y);</span><br><span class="line">                    mLastPoint.set(event.getX(pointerIndex), event.getY(pointerIndex));</span><br><span class="line">                    <span class="comment">// 更新图片区域</span></span><br><span class="line">                    mRectF.set(<span class="number">0</span>, <span class="number">0</span>, mBitmap.getWidth(), mBitmap.getHeight());</span><br><span class="line">                    mMatrix.mapRect(mRectF);</span><br><span class="line">                    invalidate();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_POINTER_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="comment">// 第一根手指 释放时复位</span></span><br><span class="line">                <span class="keyword">if</span> (event.getPointerId(index) == <span class="number">0</span>) &#123;</span><br><span class="line">                    enableDrag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.drawBitmap(mBitmap, mMatrix, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）MotionEvent-单点触控&quot;&gt;&lt;a href=&quot;#（一）MotionEvent-单点触控&quot; class=&quot;headerlink&quot; title=&quot;（一）MotionEvent 单点触控&quot;&gt;&lt;/a&gt;（一）MotionEvent 单点触控&lt;/h3&gt;&lt;p&gt;ev
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Activity横竖屏切换</title>
    <link href="http://hawkyAndroid.github.io/2018/12/06/summary-activity-land-port/"/>
    <id>http://hawkyAndroid.github.io/2018/12/06/summary-activity-land-port/</id>
    <published>2018-12-06T15:12:35.000Z</published>
    <updated>2018-12-06T17:38:10.116Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）configChanges属性"><a href="#（一）configChanges属性" class="headerlink" title="（一）configChanges属性"></a>（一）configChanges属性</h3><p>android:configChanges 属性可以设置多个值，中间使用竖线分割。</p><pre><code>举例1：横竖屏切换时不重启Activity的生命周期(只会执行onConfigurationChanged方法)，则需要配置 android:configChanges=&quot;orientation|keyboardHidden|screenSize&quot;；举例2：禁用横竖屏（只显示竖屏），则需要配置 android:screenOrientation=&quot;portrait&quot;</code></pre><p>  1&gt; configChanges的属性值说明如下：</p><pre><code>1.orientation 屏幕在纵向和横向间旋转2.keyboardHidden 键盘显示或隐藏3.screenSize 屏幕大小改变了4.fontScale 用户变更了首选的字体大小5.locale 用户选择了不同的语言设定6.keyboard 键盘类型变更7.touchscreen或navigation 键盘或导航方式变化(基本不用)</code></pre><p>2&gt; screenOrientation的属性值说明如下：</p><pre><code>1.unspecified 默认值，由系统判断状态自动切换2.landscape 横屏3.portrait 竖屏4.user 用户当前设置的orientation值5.behind 下一个要显示的Activity的orientation值6.sensor 使用传感器的方向7.nosensor 不使用传感器 基本等同于unspecified</code></pre><h3 id="（二）onConfigurationChanged方法"><a href="#（二）onConfigurationChanged方法" class="headerlink" title="（二）onConfigurationChanged方法"></a>（二）onConfigurationChanged方法</h3><p>横竖屏切换时会先回调该方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">    String message = newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE ? <span class="string">"屏幕设置为：横屏"</span> : <span class="string">"屏幕设置为：竖屏"</span>;</span><br><span class="line">    Toast.makeText(<span class="keyword">this</span>, message, Toast.LENGTH_LONG).show();</span><br><span class="line">    <span class="comment">// 需要重新加载资源布局、初始化组件（注意回收资源）并设置监听</span></span><br><span class="line">    <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">        <span class="comment">// res/layout-land/activity_main_land.xml</span></span><br><span class="line">        setContentView(R.layout.activity_main_land);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// res/layout-land/activity_main_port.xml</span></span><br><span class="line">        setContentView(R.layout.activity_main_port);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先回收资源在初始化</span></span><br><span class="line">    initView();</span><br><span class="line">    setListener();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="（三）Activity横竖屏切换实例"><a href="#（三）Activity横竖屏切换实例" class="headerlink" title="（三）Activity横竖屏切换实例"></a>（三）Activity横竖屏切换实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_1;</span><br><span class="line">    <span class="keyword">private</span> View view_1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 横竖屏切换分为两种(含加载相同或不同的布局)：</span></span><br><span class="line">        <span class="comment">// 1、重启生命周期。</span></span><br><span class="line">        <span class="comment">// 2、不重启生命周期：需要配置</span></span><br><span class="line">        <span class="keyword">if</span> (ScreenUtil.isScreenPortrait(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            setContentView(R.layout.activity_main_port);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setContentView(R.layout.activity_main_land);</span><br><span class="line">        &#125;</span><br><span class="line">        initView();</span><br><span class="line">        setListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        recycleResources();</span><br><span class="line">        <span class="keyword">if</span> (ScreenUtil.isScreenPortrait(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            view_1 = findViewById(R.id.view_1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            btn_1 = findViewById(R.id.btn_1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ScreenUtil.isScreenPortrait(<span class="keyword">this</span>)) &#123;</span><br><span class="line">            view_1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            btn_1.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recycleResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        view_1 = <span class="keyword">null</span>;</span><br><span class="line">        btn_1 = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState, PersistableBundle outPersistentState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState, outPersistentState);</span><br><span class="line">        outState.putString(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重启生命周期时无需重写该方法（删除即可）。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        String message = newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE ? <span class="string">"屏幕设置为：横屏"</span> : <span class="string">"屏幕设置为：竖屏"</span>;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, message, Toast.LENGTH_LONG).show();</span><br><span class="line">        <span class="comment">// 需要重新加载资源布局、初始化组件（注意回收资源）并设置监听</span></span><br><span class="line">        <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) &#123;</span><br><span class="line">            setContentView(R.layout.activity_main_land);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setContentView(R.layout.activity_main_port);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先回收资源在初始化</span></span><br><span class="line">        initView();</span><br><span class="line">        setListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.view_1:</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"竖屏View1被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_1:</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"横屏按钮被点击"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）configChanges属性&quot;&gt;&lt;a href=&quot;#（一）configChanges属性&quot; class=&quot;headerlink&quot; title=&quot;（一）configChanges属性&quot;&gt;&lt;/a&gt;（一）configChanges属性&lt;/h3&gt;&lt;p&gt;androi
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android事件分发机制</title>
    <link href="http://hawkyAndroid.github.io/2018/11/29/summary-android-dispatch-event/"/>
    <id>http://hawkyAndroid.github.io/2018/11/29/summary-android-dispatch-event/</id>
    <published>2018-11-29T15:12:35.000Z</published>
    <updated>2018-12-12T13:31:19.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本概念"><a href="#（一）基本概念" class="headerlink" title="（一）基本概念"></a>（一）基本概念</h3><p>①、概述： Android里的View都是树形结构的，因此可能会出现多个View重叠的情况。当我们点击或滑动屏幕上重叠的部分的时候，这些View默认都可以响应。如果此时我们只想要某个View处理（响应/消费）这个事件，这时就可以用事件分发机制去解决这个问题。<br>需要说明的是，Android的事件分发机制是一种典型的责任链模式，可参考<a href="https://blog.csdn.net/lhy_ycu/article/details/40018231" target="_blank" rel="noopener">责任链模式详解</a>。</p><p>②、事件的分发、拦截、消费(响应)</p><table><thead><tr><th>流程</th><th>对应方法</th><th>Activity</th><th>ViewGroup</th><th>View</th></tr></thead><tbody><tr><td>分发</td><td>dispatchTouchEvent</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>拦截</td><td>onInterceptTouchEvent</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>消费</td><td>onTouchEvent</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p>  ③、方法说明：<br>  Android中触摸事件传递过程中最重要的是dispatchTouchEvent()、onInterceptTouchEvent()和onTouchEvent()方法。<br>其中：dispatchTouchEvent 是事件分发机制中的核心，所有的事件(包括点击、长按、触摸等)调度都归它管。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件分发。一般不用重写。</span></span><br><span class="line"><span class="comment">// 执行super.dispatchTouchEvent(ev)表示事件向下分发并等待事件处理(消费)结果回传。</span></span><br><span class="line"><span class="comment">// 注意：如果当前控件的onInterceptTouchEvent()为true则表示事件不再往下继续传递，</span></span><br><span class="line"><span class="comment">// 此时交由自己onTouchEvent处理(消费)并将自己处理的结果回传给自己的dispatchTouchEvent，然后回传至上层控件。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件拦截。返回值决定了事件的传递方向。（仅判断事件是否需要拦截即可）</span></span><br><span class="line"><span class="comment">// 返回为false时事件会传递给子控件（默认为false 不拦截）;</span></span><br><span class="line"><span class="comment">// 返回值为true时事件会传递给当前控件的onTouchEvent()处理（消费）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件处理(消费)。处理的结果回传给自己的dispatchTouchEvent，然后再将结果回传至上层控件。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span>;</span><br></pre></td></tr></table></figure><p>  ④、Touch触摸事件：</p><pre><code>Android中的Touch事件都是从ACTION_DOWN开始的：单手指操作：ACTION_DOWN---ACTION_MOVE----ACTION_UP多手指操作：ACTION_DOWN---ACTION_POINTER_DOWN---ACTION_MOVE--ACTION_POINTER_UP---ACTION_UP.事件的调度顺序是：onTouchListener &gt; onTouchEvent &gt; onLongClickListener &gt; onClickListener需要特别指出的是：如果两个View(View1、View2)有重叠且View2(在上层)遮挡了View1的部分，则当手指点击时：1&gt; 仅当View1可点击时，事件将分配给View1，被View2遮挡的部分仍是View1可点击的区域。2&gt; 仅当View2可点击时，事件将分配给View2。3&gt; 当View1、View2都可以点击时，事件将分配给View2，View1收不到事件。</code></pre><p>⑤、事件总结：</p><pre><code>1、onTouchEvent包含了onClickListener和onLongClickListener事件。2、View的dispatchTouchEvent主要用于调度自身的监听器和onTouchEvent。3、给View注册OnTouchListener监听不会影响View的可点击状态，只要View是可点击的就会消费事件。4、若给ViewGroup及其ChildView同时注册了事件监听器(如：onClick)，则ChildView会被消费，ViewGroup收不到事件(无响应)。5、如果当前正在处理的事件被上层View拦截，会收到一个ACTION_CANCEL，后续事件不会再传递过来。6、为避免一次完整的事件(如：onClick包含ACTION_DOWN、ACTION_UP)分配给不同的View可能造成事件无法被正常消费，因此所有事件都应该被给同一个View消费。</code></pre><h3 id="（二）实例演示"><a href="#（二）实例演示" class="headerlink" title="（二）实例演示"></a>（二）实例演示</h3><pre><code>事件分发：Activity -&gt; RootView -&gt; ViewGroupA -&gt; View1事件回传：Activity &lt;- RootView &lt;- ViewGroupA &lt;- View1</code></pre><p>  MainActivity</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        DebugLog.e(<span class="string">"MainActivity事件分发开始"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"MainActivity事件回传结束"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        DebugLog.e(<span class="string">"MainActivity事件消费---"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  RootView</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RootView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RootView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        DebugLog.e(<span class="string">"RootView事件分发"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"RootView事件回传，"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"RootView事件拦截---"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        DebugLog.e(<span class="string">"RootView事件消费---"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  ViewGroupA<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroupA</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewGroupA</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewGroupA</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        DebugLog.e(<span class="string">"ViewGroupA事件分发"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"ViewGroupA事件回传，"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"ViewGroupA事件拦截---"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">        DebugLog.e(<span class="string">"ViewGroupA事件消费---"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  View1<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View1</span> <span class="keyword">extends</span> <span class="title">View2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        DebugLog.e(<span class="string">"View1事件分发"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">        DebugLog.e(<span class="string">"View1事件回传，"</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">super</span>.onTouchEvent(event);<span class="comment">//</span></span><br><span class="line">        DebugLog.e(<span class="string">"View1事件消费---"</span> + result);</span><br><span class="line"><span class="comment">//        switch (event.getAction()) &#123;</span></span><br><span class="line"><span class="comment">//            case MotionEvent.ACTION_DOWN:</span></span><br><span class="line"><span class="comment">//                DebugLog.e("View1按下...");</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case MotionEvent.ACTION_MOVE:</span></span><br><span class="line"><span class="comment">//                DebugLog.e("View1移动...");</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case MotionEvent.ACTION_UP:</span></span><br><span class="line"><span class="comment">//                DebugLog.e("View1释放...");</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  打印结果如下</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[dispatchTouchEvent:<span class="number">109</span>]MainActivity事件分发开始</span><br><span class="line">[dispatchTouchEvent:<span class="number">26</span>]RootView事件分发</span><br><span class="line">[onInterceptTouchEvent:<span class="number">35</span>]RootView事件拦截---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">25</span>]ViewGroupA事件分发</span><br><span class="line">[onInterceptTouchEvent:<span class="number">34</span>]ViewGroupA事件拦截---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">24</span>]View1事件分发</span><br><span class="line">[onTouchEvent:<span class="number">33</span>]View1事件消费---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">26</span>]View1事件回传，<span class="keyword">false</span></span><br><span class="line">[onTouchEvent:<span class="number">41</span>]ViewGroupA事件消费---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">27</span>]ViewGroupA事件回传，<span class="keyword">false</span></span><br><span class="line">[onTouchEvent:<span class="number">42</span>]RootView事件消费---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">28</span>]RootView事件回传，<span class="keyword">false</span></span><br><span class="line">[onTouchEvent:<span class="number">118</span>]MainActivity事件消费---<span class="keyword">false</span></span><br><span class="line">[dispatchTouchEvent:<span class="number">111</span>]MainActivity事件回传结束</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本概念&quot;&gt;&lt;a href=&quot;#（一）基本概念&quot; class=&quot;headerlink&quot; title=&quot;（一）基本概念&quot;&gt;&lt;/a&gt;（一）基本概念&lt;/h3&gt;&lt;p&gt;①、概述： Android里的View都是树形结构的，因此可能会出现多个View重叠的情况。当我们点
      
    
    </summary>
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/categories/Android%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android开发" scheme="http://hawkyAndroid.github.io/tags/Android%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Camera</title>
    <link href="http://hawkyAndroid.github.io/2018/11/26/summary-view-camera/"/>
    <id>http://hawkyAndroid.github.io/2018/11/26/summary-view-camera/</id>
    <published>2018-11-26T12:02:35.000Z</published>
    <updated>2018-11-27T14:14:58.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Camera概述"><a href="#（一）Camera概述" class="headerlink" title="（一）Camera概述"></a>（一）Camera概述</h3><pre><code>本篇中的Camera是graphic包下的Camera，是专业给View拍照的(Camera)相机。View的摄像机默认位置在屏幕左上角(0, 0, -8)，而且距离屏幕有一段距离。几个概念：①、Camera使用的三维(3D)坐标系是左手坐标系。即左手手臂指向的是X轴正方向，四指弯曲指向的是Y轴正方向(刚好与2D的Y轴正方向相反)，展开的大拇指指向的是Z轴正方向。②、三维投影是将三维空间中的点映射到二维平面上的方法。</code></pre><h3 id="（二）Camera的用法"><a href="#（二）Camera的用法" class="headerlink" title="（二）Camera的用法"></a>（二）Camera的用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存当前状态</span></span><br><span class="line">camera.save();</span><br><span class="line"><span class="comment">// 恢复当前状态</span></span><br><span class="line">camera.restore();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置Camera在左手坐标系(3D)的对应位置。</span></span><br><span class="line"><span class="comment">// 注意：这里Camera平移location一个单位相当于translate 72像素。</span></span><br><span class="line">camera.setLocation(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z);</span><br><span class="line"><span class="comment">// 获取Camera在左手坐标系(3D)的对应位置。</span></span><br><span class="line"><span class="keyword">float</span> locationX = camera.getLocationX();</span><br><span class="line"><span class="keyword">float</span> locationY = camera.getLocationY();</span><br><span class="line"><span class="keyword">float</span> locationZ = camera.getLocationZ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算当前矩阵对应的状态并赋值给参数matrix。</span></span><br><span class="line">camera.getMatrix(Matrix matrix);</span><br><span class="line"><span class="comment">// 计算当前矩阵对应的状态并将计算后的矩阵应用到指定的canvas上。</span></span><br><span class="line">camera.applyToCanvas(Canvas canvas);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// x、将Camera沿X轴正方向平移(与Matrix在沿X轴方向平移一致)。</span></span><br><span class="line"><span class="comment">// y、将Camera沿Y轴正方向平移(注意这里指向的正上方，与Matrix在沿Y轴方向平移相反)。</span></span><br><span class="line"><span class="comment">// z、将Camera沿Z轴正方向平移(近大-Z 远小-XY、视线相交)。</span></span><br><span class="line">camera.translate(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：Camera旋转中心默认是坐标原点。</span></span><br><span class="line"><span class="comment">// 将Camera同时绕X，Y，Z轴旋转，旋转角度为(x,y,z)。</span></span><br><span class="line">camera.rotate(<span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z);</span><br><span class="line"><span class="comment">// 将Camera同时绕X轴旋转，旋转角度为deg。</span></span><br><span class="line">camera.rotateX(<span class="keyword">float</span> deg);</span><br><span class="line"><span class="comment">// 将Camera同时绕Y轴旋转，旋转角度为deg。</span></span><br><span class="line">camera.rotateY(<span class="keyword">float</span> deg);</span><br><span class="line"><span class="comment">// 将Camera同时绕Z轴旋转，旋转角度为deg。</span></span><br><span class="line">camera.rotateZ(<span class="keyword">float</span> deg);</span><br></pre></td></tr></table></figure><h3 id="（三）Camera的实例"><a href="#（三）Camera的实例" class="headerlink" title="（三）Camera的实例"></a>（三）Camera的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Camera 3D旋转动画(绕图片中心旋转)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 参考：https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/animation/Rotate3dAnimation.java</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * http://www.gcssloop.com/customview/matrix-3d-camera</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 动画之间旋转视图在Y轴上的两个指定角度。</span></span><br><span class="line"><span class="comment"> * 这个动画还增加了平移在Z轴(深度)改善效果。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rotate3dAnimation</span> <span class="keyword">extends</span> <span class="title">Animation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mFromDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mToDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mCenterX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mCenterY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span> mDepthZ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> mReverse;</span><br><span class="line">    <span class="keyword">private</span> Camera mCamera;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDensity;<span class="comment">// Pixel density</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context     context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromDegrees the start angle of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toDegrees   the end angle of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> centerX     the X center of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> centerY     the Y center of the 3D rotation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reverse     true if the translation should be reversed, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rotate3dAnimation</span><span class="params">(Context context, <span class="keyword">float</span> fromDegrees, <span class="keyword">float</span> toDegrees,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> depthZ, <span class="keyword">boolean</span> reverse)</span> </span>&#123;</span><br><span class="line">        mFromDegrees = fromDegrees;</span><br><span class="line">        mToDegrees = toDegrees;</span><br><span class="line">        mCenterX = centerX;</span><br><span class="line">        mCenterY = centerY;</span><br><span class="line">        mDepthZ = depthZ;</span><br><span class="line">        mReverse = reverse;</span><br><span class="line">        mDensity = context.getResources().getDisplayMetrics().density;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> parentWidth, <span class="keyword">int</span> parentHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initialize(width, height, parentWidth, parentHeight);</span><br><span class="line">        mCamera = <span class="keyword">new</span> Camera();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime, Transformation t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fromDegrees = mFromDegrees;</span><br><span class="line">        <span class="comment">// 旋转角度 = 起始角度 + 增长角度</span></span><br><span class="line">        <span class="keyword">float</span> degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);</span><br><span class="line">        DebugLog.e(<span class="string">"interpolatedTime："</span> + interpolatedTime + <span class="string">"， degrees："</span> + degrees);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerX = mCenterX;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> centerY = mCenterY;</span><br><span class="line">        <span class="keyword">final</span> Camera camera = mCamera;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Matrix matrix = t.getMatrix();</span><br><span class="line"></span><br><span class="line">        camera.save();</span><br><span class="line">        <span class="comment">//  Adds a translation on the Z axis (depth) to improve the effect</span></span><br><span class="line">        <span class="keyword">if</span> (mReverse) &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * interpolatedTime);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            camera.translate(<span class="number">0.0f</span>, <span class="number">0.0f</span>, mDepthZ * (<span class="number">1.0f</span> - interpolatedTime));</span><br><span class="line">        &#125;</span><br><span class="line">        camera.rotateY(degrees);</span><br><span class="line">        camera.getMatrix(matrix);</span><br><span class="line">        DebugLog.e(<span class="string">"matrix---------------1"</span> + matrix.toShortString());</span><br><span class="line">        camera.restore();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改MPERSP_0、MPERSP_1的值</span></span><br><span class="line">        <span class="keyword">float</span>[] values = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</span><br><span class="line">        matrix.getValues(values);</span><br><span class="line">        values[<span class="number">6</span>] = values[<span class="number">6</span>] / mDensity;</span><br><span class="line">        values[<span class="number">7</span>] = values[<span class="number">7</span>] / mDensity;</span><br><span class="line">        matrix.setValues(values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调节中心点的位置</span></span><br><span class="line">        matrix.preTranslate(-centerX, -centerY);</span><br><span class="line">        matrix.postTranslate(centerX, centerY);</span><br><span class="line"></span><br><span class="line">        DebugLog.e(<span class="string">"matrix---------------2："</span> + matrix.toShortString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  // 测试3D动画</span></span><br><span class="line"><span class="comment">final float centerX = img.getWidth() / 2.0f;</span></span><br><span class="line"><span class="comment">final float centerY = img.getHeight() / 2.0f;</span></span><br><span class="line"><span class="comment">Rotate3dAnimation animation = new Rotate3dAnimation(MainActivity.this, 0, 180, centerX, centerY, 0, true);</span></span><br><span class="line"><span class="comment">animation.setDuration(2000L);</span></span><br><span class="line"><span class="comment">animation.setFillAfter(true);// 保持旋转动画结束后的位置</span></span><br><span class="line"><span class="comment">animation.setInterpolator(new LinearInterpolator());</span></span><br><span class="line"><span class="comment">img.startAnimation(animation);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Camera概述&quot;&gt;&lt;a href=&quot;#（一）Camera概述&quot; class=&quot;headerlink&quot; title=&quot;（一）Camera概述&quot;&gt;&lt;/a&gt;（一）Camera概述&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;本篇中的Camera是graphic包下的Camer
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之Matrix</title>
    <link href="http://hawkyAndroid.github.io/2018/11/25/summary-view-matrix/"/>
    <id>http://hawkyAndroid.github.io/2018/11/25/summary-view-matrix/</id>
    <published>2018-11-25T14:02:35.000Z</published>
    <updated>2018-11-29T15:21:31.546Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）Matrix的概念"><a href="#（一）Matrix的概念" class="headerlink" title="（一）Matrix的概念"></a>（一）Matrix的概念</h3><pre><code>1、矩阵的相关概念：① Matrix是一个矩阵(接近底层)。主要作用是坐标变换(齐次坐标)、数值转换。② 仿射(矩阵)变换是线性变换后进行平移变换（也是齐次空间的线性变换），仿射变换以矩阵的形式表示具有等比性质的齐次坐标。2、矩阵的4个变换：平移(translate)、缩放(scale)、旋转(rotate) 和 错切(skew)。其中每种操作在Matrix中都有3类：前乘(pre)M&apos;=M*S、后乘(post)M&apos;=S*M、而设置(set)直接覆盖掉原来的值(可能导致之前的操作失效)。注意：①、为避免出错，矩阵乘法尽量使用pre或者post其中的一种。②、Matrix matrix = new Matrix();// 创建一个单位矩阵③、Matrix的主要作用范围：Canvas、Path、Bitmap等。④、(x, y, 1) - 点；(x, y, 0) - 向量 // 最后一个参数是标志位3、矩阵的几个性质：① 乘法不满足交换律但满足结合律。② 矩阵与单位矩阵相乘结果不变：即A*I=A、I*A=A。</code></pre><h3 id="（二）Matrix的用法"><a href="#（二）Matrix的用法" class="headerlink" title="（二）Matrix的用法"></a>（二）Matrix的用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印(3*3)矩阵数值</span></span><br><span class="line">matrix.toShortString();</span><br><span class="line"><span class="comment">// 比较两个矩阵的数值是否相同</span></span><br><span class="line">matrix1.equals(matrix2);</span><br><span class="line"><span class="comment">// 是否为仿射矩阵</span></span><br><span class="line">matrix.isAffine();</span><br><span class="line"><span class="comment">// 是否为单位矩阵</span></span><br><span class="line">matrix.isIdentity();</span><br><span class="line"><span class="comment">// 计算matrix1的逆矩阵inverse</span></span><br><span class="line">matrix1.invert(Matrix inverse);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置为单位矩阵</span></span><br><span class="line"><span class="comment">// ([1.0, 0.0, 0.0][0.0, 1.0, 0.0][0.0, 0.0, 1.0])</span></span><br><span class="line">matrix.reset();</span><br><span class="line"><span class="comment">// 将matrix设置为src。若src为null, 则matrix重置为单位矩阵。</span></span><br><span class="line">matrix.set(Matrix src);</span><br><span class="line"><span class="comment">// 将matrix的数值赋值到values数组。</span></span><br><span class="line">matrix.getValues(<span class="keyword">float</span>[] values);</span><br><span class="line"><span class="comment">// 重新赋值。注意matrix为3*3的矩阵，所以这里取的是values前9位(数值)长度。</span></span><br><span class="line">matrix.setValues(<span class="keyword">float</span>[] values);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  1、矩阵的坐标变换（重点）   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵按照(sx, sy)进行缩放（覆盖掉原来的值）。</span></span><br><span class="line">matrix.setScale(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy);</span><br><span class="line"><span class="comment">// 矩阵按照(sx, sy)进行缩放（前乘）。</span></span><br><span class="line">matrix.preScale(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy);</span><br><span class="line"><span class="comment">// 矩阵按照(sx, sy)进行缩放（后乘）。</span></span><br><span class="line">matrix.postScale(<span class="keyword">float</span> sx, <span class="keyword">float</span> sy);</span><br><span class="line"><span class="comment">//... 其余translate、rotate、skew同理 ...//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  2、矩阵的数值转换（重点）   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量并转换一组点基于当前matrix变换（规则）后的位置(坐标)。</span></span><br><span class="line"><span class="comment">// 由于是一组点的坐标，所以pts的长度一般是偶数。</span></span><br><span class="line">matrix.mapPoints(<span class="keyword">float</span>[] pts);</span><br><span class="line"><span class="comment">// dst：变换后的坐标组，src：原坐标组不变。</span></span><br><span class="line">matrix.mapPoints(<span class="keyword">float</span>[] dst, <span class="keyword">float</span>[] src);</span><br><span class="line"><span class="comment">// 指定只计算一部分数值：dstIndex为目标起点坐标索引、srcIndex为原坐标组起点索引。</span></span><br><span class="line">matrix.mapPoints(<span class="keyword">float</span>[] dst, <span class="keyword">int</span> dstIndex, <span class="keyword">float</span>[] src, <span class="keyword">int</span> srcIndex, <span class="keyword">int</span> pointCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// mapVectors 与 mapPoints 基本上是相同的，唯一区别是mapVectors不受位移(xxTranslate)方法影响，即xxTranslate方法对mapVectors无效。</span></span><br><span class="line"><span class="comment">// 由于是一组点的坐标，所以vecs的长度一般是偶数。</span></span><br><span class="line">matrix.mapVectors(<span class="keyword">float</span>[] vecs);</span><br><span class="line"><span class="comment">// dst：变换后的坐标组，src：原坐标组不变。</span></span><br><span class="line">matrix.mapVectors(<span class="keyword">float</span>[] dst, <span class="keyword">float</span>[] src);</span><br><span class="line"><span class="comment">// 指定只计算一部分数值：dstIndex为目标起点坐标索引、srcIndex为原坐标组起点索引。</span></span><br><span class="line">matrix.mapVectors(<span class="keyword">float</span>[] dst, <span class="keyword">int</span> dstIndex, <span class="keyword">float</span>[] src, <span class="keyword">int</span> srcIndex, <span class="keyword">int</span> vectorCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量并转换矩形的位置</span></span><br><span class="line">matrix.mapRect(RectF rectF);</span><br><span class="line"><span class="comment">// src：原矩形不变，dst：变换后的矩形。</span></span><br><span class="line">matrix.mapRect(RectF dst, RectF src);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测量并转换圆的半径（转换后圆可能成为椭圆）</span></span><br><span class="line">newRaduis = matrix.mapRadius(<span class="keyword">float</span> radius);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**  3、矩阵的高级用法（重点）   */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置多边形转多边形：设置指定的矩阵, src坐标(点)组会映射到指定的dst坐标(点)组。</span></span><br><span class="line"><span class="comment">// src：原坐标(点)组。</span></span><br><span class="line"><span class="comment">// srcIndex：原坐标点起始索引。</span></span><br><span class="line"><span class="comment">// dst：目标坐标(点)组。</span></span><br><span class="line"><span class="comment">// dstIndex：目标坐标点起始索引。</span></span><br><span class="line"><span class="comment">// pointCount：测控点的数量，取值范围是: [0..4]</span></span><br><span class="line">matrix.setPolyToPoly(<span class="keyword">float</span>[] src, <span class="keyword">int</span> srcIndex, <span class="keyword">float</span>[] dst, <span class="keyword">int</span> dstIndex, <span class="keyword">int</span> pointCount);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置矩形到矩形：将原矩形的内容填充到目标矩形中。</span></span><br><span class="line"><span class="comment">// src：原矩形</span></span><br><span class="line"><span class="comment">// dst：目标矩形</span></span><br><span class="line"><span class="comment">// stf：原矩形的填充方式(FILL、START、CENTER、END)</span></span><br><span class="line">matrix.setRectToRect(RectF src, RectF dst, ScaleToFit stf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断矩形经过变换后是否仍为矩形</span></span><br><span class="line">matrix.rectStaysRect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置sinCos值，这个是控制Matrix旋转的。</span></span><br><span class="line"><span class="comment">// 这个不常用，可用setRotate(float degrees)代替。</span></span><br><span class="line">mMatrix.setSinCos(<span class="keyword">float</span> sinValue, <span class="keyword">float</span> cosValue);</span><br></pre></td></tr></table></figure><h3 id="（三）Matrix的实例"><a href="#（三）Matrix的实例" class="headerlink" title="（三）Matrix的实例"></a>（三）Matrix的实例</h3><h4 id="1-多边形-gt-多边形"><a href="#1-多边形-gt-多边形" class="headerlink" title="(1)  多边形 -&gt; 多边形"></a>(1)  多边形 -&gt; 多边形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Matrix -- setPolyToPoly()的使用（粗略模拟折叠效果）</span></span><br><span class="line"><span class="comment"> * pointCount的取值说明：</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 0：reset（重置）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1、translate（平移）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2、可以进行 缩放、旋转、平移 变换</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 3、可以进行 缩放、旋转、平移、错切 变换</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 4、任意形变（常用）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatrixSetPolyToPolyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="keyword">private</span> Matrix mMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录触摸的最后一个点坐标</span></span><br><span class="line">    <span class="keyword">private</span> PointF mLastPoint;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatrixSetPolyToPolyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatrixSetPolyToPolyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = <span class="number">2</span>;<span class="comment">// 缩小2倍</span></span><br><span class="line">        mBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_logo, options);</span><br><span class="line"></span><br><span class="line">        mMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">        mLastPoint = <span class="keyword">new</span> PointF(mBitmap.getWidth(), mBitmap.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                mLastPoint.x = Math.min(event.getX(), mBitmap.getWidth());<span class="comment">// 只更新X坐标</span></span><br><span class="line">                <span class="comment">//  mLastPoint.y = Math.min(event.getY(), mBitmap.getHeight());</span></span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        mMatrix.reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4个点（上左A、上右B、右下C、左下D）</span></span><br><span class="line">        <span class="keyword">float</span>[] src = &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                mBitmap.getWidth(), <span class="number">0</span>,</span><br><span class="line">                mBitmap.getWidth(), mBitmap.getHeight(),</span><br><span class="line">                <span class="number">0</span>, mBitmap.getHeight()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span>[] dst = &#123;</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                mLastPoint.x, <span class="number">0</span>,</span><br><span class="line">                mLastPoint.x, mLastPoint.y,</span><br><span class="line">                <span class="number">0</span>, mBitmap.getHeight()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置图形上点的映射</span></span><br><span class="line">        mMatrix.setPolyToPoly(src, <span class="number">0</span>, dst, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        canvas.drawBitmap(mBitmap, mMatrix, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-矩形-gt-矩形"><a href="#2-矩形-gt-矩形" class="headerlink" title="(2)  矩形 -&gt; 矩形"></a>(2)  矩形 -&gt; 矩形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Matrix -- setRectToRect()的使用</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 将原矩形的内容填充到目标矩形中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatrixSetRectToRect</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="keyword">private</span> Matrix mMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制区域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatrixSetRectToRect</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MatrixSetRectToRect</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = <span class="number">3</span>;<span class="comment">// 缩小3倍</span></span><br><span class="line">        mBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_logo, options);</span><br><span class="line"></span><br><span class="line">        mMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        mMatrix.set(<span class="keyword">null</span>);<span class="comment">// 相当于mMatrix.reset();</span></span><br><span class="line"></span><br><span class="line">        RectF src = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mBitmap.getWidth(), mBitmap.getHeight());</span><br><span class="line">        RectF dst = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, mWidth, mHeight);</span><br><span class="line">        <span class="comment">// 将src的内容填充到dst的底部</span></span><br><span class="line">        mMatrix.setRectToRect(src, dst, Matrix.ScaleToFit.END);</span><br><span class="line"></span><br><span class="line">        canvas.drawBitmap(mBitmap, mMatrix, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）Matrix的概念&quot;&gt;&lt;a href=&quot;#（一）Matrix的概念&quot; class=&quot;headerlink&quot; title=&quot;（一）Matrix的概念&quot;&gt;&lt;/a&gt;（一）Matrix的概念&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1、矩阵的相关概念：
① Matrix是一个
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android之数学公式</title>
    <link href="http://hawkyAndroid.github.io/2018/11/20/summary-math-expression/"/>
    <id>http://hawkyAndroid.github.io/2018/11/20/summary-math-expression/</id>
    <published>2018-11-20T14:23:55.000Z</published>
    <updated>2018-11-20T14:28:24.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）圆"><a href="#（一）圆" class="headerlink" title="（一）圆"></a>（一）圆</h3><pre><code>L（弧长）=α（弧度）× r(半径) （弧度制）L（弧长）=n（圆心角度数）× π（1）× r（半径）/180（角度制）</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）圆&quot;&gt;&lt;a href=&quot;#（一）圆&quot; class=&quot;headerlink&quot; title=&quot;（一）圆&quot;&gt;&lt;/a&gt;（一）圆&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;L（弧长）=α（弧度）× r(半径) （弧度制）

L（弧长）=n（圆心角度数）× π（1）× r（半径）/
      
    
    </summary>
    
      <category term="Math" scheme="http://hawkyAndroid.github.io/categories/Math/"/>
    
    
      <category term="Math" scheme="http://hawkyAndroid.github.io/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Android View之PathMeasure</title>
    <link href="http://hawkyAndroid.github.io/2018/11/20/summary-view-pathmeasure/"/>
    <id>http://hawkyAndroid.github.io/2018/11/20/summary-view-pathmeasure/</id>
    <published>2018-11-20T11:23:55.000Z</published>
    <updated>2018-11-20T14:51:16.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）PathMeasure的概念"><a href="#（一）PathMeasure的概念" class="headerlink" title="（一）PathMeasure的概念"></a>（一）PathMeasure的概念</h3><p>PathMeasure是一个用来测量Path的类。主要用来测量Path曲线的轨迹长度、截图片段、计算轨迹的坐标及角度，也可以通过不断截取重绘来模拟曲线动画的轨迹。</p><h3 id="（二）PathMeasure的用法"><a href="#（二）PathMeasure的用法" class="headerlink" title="（二）PathMeasure的用法"></a>（二）PathMeasure的用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造。其中参数forceClosed的值不会影响path之前的绘制，但会影响Path的测量长度。</span></span><br><span class="line"><span class="comment">// 即forceClosed为true时，pathMeasure.getLength()的值始终是Path的闭合长度。</span></span><br><span class="line">pathMeasure = PathMeasure(Path path, <span class="keyword">boolean</span> forceClosed);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Path当前的一条曲线长度</span></span><br><span class="line">pathMeasure.getLength();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到下一条轮廓(路径)</span></span><br><span class="line"><span class="comment">// 注意：一条Path可能由很多条曲线（轮廓）组成</span></span><br><span class="line">pathMeasure.nextContour();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联Path是否闭合。若关联的path有调用close()或者path本身就是闭合的，则结果始终为true。</span></span><br><span class="line"><span class="comment">// 反之以PathMeasure构造时或者setPath方法传入参数forceClosed的值为准。</span></span><br><span class="line">pathMeasure.isClosed();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 【重要方法 - 可模拟图形(动画)绘制轨迹】</span></span><br><span class="line"><span class="comment">// 截取Path的一个片段。(取值范围：0 &lt;= startD &lt; stopD &lt;= Path总长度)</span></span><br><span class="line"><span class="comment">// startD：截取的初始位置距离Path起点的路径(轨迹)长度（注意不是位移，而是轨迹长度）</span></span><br><span class="line"><span class="comment">// stopD：截取的结束位置距离Path起点的路径(轨迹)长度</span></span><br><span class="line"><span class="comment">// dstPath：将截取的Path将会添加到dstPath中。</span></span><br><span class="line"><span class="comment">// startWithMoveTo：true表示pathMeasure从path起始点截取，</span></span><br><span class="line"><span class="comment">// false 表示从截取出来的Path片段的起点移动到dstPath的最后一个点(dstPath可能由多条曲线组成)。</span></span><br><span class="line">pathMeasure.getSegment(<span class="keyword">float</span> startD, <span class="keyword">float</span> stopD, Path dstPath, <span class="keyword">boolean</span> startWithMoveTo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 【重要方法 - 可计算轨迹点的坐标及角度】</span></span><br><span class="line"><span class="comment">// 若相应的位置和正切获取成功，则存放至pos、tan中。</span></span><br><span class="line"><span class="comment">// distance：距离Path起点的轨迹长度（0 &lt;= distance &lt;= getLength）</span></span><br><span class="line"><span class="comment">// pos：当前轨迹点的坐标位置(x,y)</span></span><br><span class="line"><span class="comment">// tan：当前点在曲线上的方向(x,y)，使用Math.atan2(tan[1], tan[0])可得到正切角的弧度值。</span></span><br><span class="line">pathMeasure.getPosTan(distance, pos, tan);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前位置的坐标以及趋势的矩阵。（相当于getPosTan的一次封装，效果是一样的）</span></span><br><span class="line"><span class="comment">// distance：距离Path起点的轨迹长度（0 &lt;= distance &lt;= getLength）</span></span><br><span class="line"><span class="comment">// matrix：根据flags的设置而存入不同的内容</span></span><br><span class="line"><span class="comment">// flags：只有2个取值 -- POSITION_MATRIX_FLAG(位置)  TANGENT_MATRIX_FLAG(正切)</span></span><br><span class="line">pathMeasure.getMatrix(<span class="keyword">float</span> distance, Matrix matrix, PathMeasure.POSITION_MATRIX_FLAG | PathMeasure.TANGENT_MATRIX_FLAG);</span><br></pre></td></tr></table></figure><h3 id="（三）PathMeasure的实例"><a href="#（三）PathMeasure的实例" class="headerlink" title="（三）PathMeasure的实例"></a>（三）PathMeasure的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 带箭头模拟圆的轨迹</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathMeasureArrow</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// View的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圆的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line">    <span class="comment">// 增长因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> currFactor;</span><br><span class="line">    <span class="comment">// 当前轨迹点的坐标位置(x,y)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pos[];</span><br><span class="line">    <span class="comment">// 当前点的正切值（用于计算旋转角度）(x,y)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> tan[];</span><br><span class="line">    <span class="comment">// 箭头Icon</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap;</span><br><span class="line">    <span class="comment">// 矩阵（对图片进行一些操作）</span></span><br><span class="line">    <span class="keyword">private</span> Matrix mMatrix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathMeasureArrow</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathMeasureArrow</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line">        mMatrix = <span class="keyword">new</span> Matrix();</span><br><span class="line"></span><br><span class="line">        pos = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line">        tan = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line">        mRadius = DensityUtils.dip2px(context, <span class="number">100</span>);</span><br><span class="line">        BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">        options.inSampleSize = <span class="number">6</span>;<span class="comment">// 缩小6倍</span></span><br><span class="line">        mBitmap = BitmapFactory.decodeResource(context.getResources(), R.mipmap.ic_arrow, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        mPath.reset();</span><br><span class="line">        mPath.addCircle(<span class="number">0</span>, <span class="number">0</span>, mRadius, Path.Direction.CW);</span><br><span class="line"></span><br><span class="line">        PathMeasure pathMeasure = <span class="keyword">new</span> PathMeasure(mPath, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> distance = pathMeasure.getLength() * Math.min(currFactor, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 若相应的位置和正切获取成功，则存放至pos、tan中。</span></span><br><span class="line">        <span class="comment">// distance：距离 Path 起点的长度（0 &lt;= distance &lt;= getLength）</span></span><br><span class="line">        <span class="comment">// pos：当前轨迹点的坐标位置(x,y)</span></span><br><span class="line">        <span class="comment">// tan：当前点在曲线上的方向，使用 Math.atan2(tan[1], tan[0]) 获取到正切角的弧度。</span></span><br><span class="line">        <span class="keyword">if</span> (pathMeasure.getPosTan(distance, pos, tan)) &#123;</span><br><span class="line">            <span class="keyword">float</span> degrees = (<span class="keyword">float</span>) (Math.atan2(tan[<span class="number">1</span>], tan[<span class="number">0</span>]) * <span class="number">180</span> / Math.PI);<span class="comment">// 获取曲线方向上的角度</span></span><br><span class="line"></span><br><span class="line">            mMatrix.reset();</span><br><span class="line">            mMatrix.postRotate(degrees, mBitmap.getWidth() / <span class="number">2</span>, mBitmap.getHeight() / <span class="number">2</span>);<span class="comment">// 图标旋转的角度</span></span><br><span class="line">            mMatrix.postTranslate(pos[<span class="number">0</span>] - mBitmap.getWidth() / <span class="number">2</span>, pos[<span class="number">1</span>] - mBitmap.getHeight() / <span class="number">2</span>);<span class="comment">// 图标中心移至轨迹点</span></span><br><span class="line"></span><br><span class="line">            mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">            mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">            canvas.drawPath(mPath, mPaint);</span><br><span class="line">            canvas.drawBitmap(mBitmap, mMatrix, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currFactor &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            currFactor += <span class="number">0.002</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currFactor = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）PathMeasure的概念&quot;&gt;&lt;a href=&quot;#（一）PathMeasure的概念&quot; class=&quot;headerlink&quot; title=&quot;（一）PathMeasure的概念&quot;&gt;&lt;/a&gt;（一）PathMeasure的概念&lt;/h3&gt;&lt;p&gt;PathMeasur
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之阴阳鱼</title>
    <link href="http://hawkyAndroid.github.io/2018/11/17/summary-view-yyfish/"/>
    <id>http://hawkyAndroid.github.io/2018/11/17/summary-view-yyfish/</id>
    <published>2018-11-17T15:34:55.000Z</published>
    <updated>2018-11-17T15:41:23.410Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、绘制最外层空心圆及白色实心圆。</p><p>2、绘制左半圆。</p><p>3、添加 1/2 上半圆。</p><p>4、减去 1/2 下半圆。</p><p>5、最后单独绘制两个 1/8 小圆。</p><h3 id="（二）阴阳鱼的绘制"><a href="#（二）阴阳鱼的绘制" class="headerlink" title="（二）阴阳鱼的绘制"></a>（二）阴阳鱼的绘制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 阴阳鱼</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YYFishView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="comment">// 左半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mLeftCirclePath;</span><br><span class="line">    <span class="comment">// 上半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mTopHalfCirclePath;</span><br><span class="line">    <span class="comment">// 下半圆</span></span><br><span class="line">    <span class="keyword">private</span> Path mBottomHalfCirclePath;</span><br><span class="line">    <span class="comment">// 阴阳鱼绘制区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mFishRegion;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最外层圆的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YYFishView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">YYFishView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、构造（初始化）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mLeftCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line">        mTopHalfCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line">        mBottomHalfCirclePath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mRadius = DensityUtils.dip2px(mContext, <span class="number">100</span>);</span><br><span class="line">        mFishRegion = <span class="keyword">new</span> RectF(-mRadius, -mRadius, mRadius, mRadius);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、获取绘制区域宽高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、绘制图形</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制最外层空心圆</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        mPaint.setColor(Color.GRAY);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制最外层实心圆</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaint.setColor(Color.WHITE);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, <span class="number">0</span>, mRadius, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为防止每次看的效果可能不一致，这里要重置Path</span></span><br><span class="line">        mLeftCirclePath.reset();</span><br><span class="line">        mTopHalfCirclePath.reset();</span><br><span class="line">        mBottomHalfCirclePath.reset();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制左半圆</span></span><br><span class="line">        mLeftCirclePath.addArc(mFishRegion, <span class="number">90</span>, <span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加 1/2 上半圆</span></span><br><span class="line">        mTopHalfCirclePath.addCircle(<span class="number">0</span>, -mRadius / <span class="number">2</span>, mRadius / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        mLeftCirclePath.op(mTopHalfCirclePath, Path.Op.UNION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 减去 1/2 下半圆</span></span><br><span class="line">        mBottomHalfCirclePath.addCircle(<span class="number">0</span>, mRadius / <span class="number">2</span>, mRadius / <span class="number">2</span>, Path.Direction.CW);</span><br><span class="line">        mLeftCirclePath.op(mBottomHalfCirclePath, Path.Op.DIFFERENCE);</span><br><span class="line"></span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawPath(mLeftCirclePath, mPaint);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后再在Y轴绘制两个小圆</span></span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, mRadius / <span class="number">2</span>, mRadius / <span class="number">8</span>, mPaint);</span><br><span class="line">        mPaint.setColor(Color.WHITE);</span><br><span class="line">        canvas.drawCircle(<span class="number">0</span>, -mRadius / <span class="number">2</span>, mRadius / <span class="number">8</span>, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、绘制最外层空心圆及白色实心圆。&lt;/p&gt;
&lt;p&gt;2、绘制左半圆。&lt;/p&gt;
&lt;p&gt;3、添加 1/2 
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之心形</title>
    <link href="http://hawkyAndroid.github.io/2018/11/16/summary-view-heart/"/>
    <id>http://hawkyAndroid.github.io/2018/11/16/summary-view-heart/</id>
    <published>2018-11-16T12:15:35.000Z</published>
    <updated>2018-11-16T15:44:10.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）最优因子"><a href="#（一）最优因子" class="headerlink" title="（一）最优因子"></a>（一）最优因子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">对于有n段的贝塞尔曲线来说，到控制点的最优距离(因子)是(4/3)*tan(π/(2n))。</span><br><span class="line"></span><br><span class="line">圆从坐标系来看，由4段圆弧组成，同时对应4个（数据）点。</span><br><span class="line">所以圆的数据点到控制点的最优距离因子为 DIS_FACTOR = (4/3)*tan(π/8)，</span><br><span class="line">由三角形倍角公式：tana/2 = sina/(1+cosa);可得tanπ/8 = √2 - 1;</span><br><span class="line">即 DIS_FACTOR =  (4/3)*(√2 - 1) = 0.5522847498307933984022516...</span><br></pre></td></tr></table></figure><h3 id="（二）心形的实例"><a href="#（二）心形的实例" class="headerlink" title="（二）心形的实例"></a>（二）心形的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 心形（由4段三阶贝塞尔曲线组成）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据点到达控制点的最佳距离因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> DIST_FACTOR = <span class="number">0.552284749831</span>;</span><br><span class="line">    <span class="comment">// 心形变化次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> mTotalCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="comment">// "心形"曲线</span></span><br><span class="line">    <span class="keyword">private</span> Path mHeartPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中心点坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerY;</span><br><span class="line">    <span class="comment">// 圆的半径（可由参数传入）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line">    <span class="comment">// 数据点与控制之间的差值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mDifference;</span><br><span class="line">    <span class="comment">// 当前执行次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCurrentCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4个数据点</span></span><br><span class="line">    <span class="keyword">private</span> PointF[] mDataPoint = <span class="keyword">new</span> PointF[<span class="number">4</span>];</span><br><span class="line">    <span class="comment">// 8个控制点</span></span><br><span class="line">    <span class="keyword">private</span> PointF[] mControlPoint = <span class="keyword">new</span> PointF[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> stopFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeartView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeartView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mHeartPath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mRadius = DensityUtils.dip2px(mContext, <span class="number">100</span>);</span><br><span class="line">        mDifference = (<span class="keyword">float</span>) (mRadius * DIST_FACTOR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化数据点</span></span><br><span class="line">        <span class="comment">// A</span></span><br><span class="line">        mDataPoint[<span class="number">0</span>] = <span class="keyword">new</span> PointF(mRadius, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// B</span></span><br><span class="line">        mDataPoint[<span class="number">1</span>] = <span class="keyword">new</span> PointF(<span class="number">0</span>, -mRadius);</span><br><span class="line">        <span class="comment">// C</span></span><br><span class="line">        mDataPoint[<span class="number">2</span>] = <span class="keyword">new</span> PointF(-mRadius, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// D</span></span><br><span class="line">        mDataPoint[<span class="number">3</span>] = <span class="keyword">new</span> PointF(<span class="number">0</span>, mRadius);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化控制点（从最右边逆时针起，开始描点）</span></span><br><span class="line">        <span class="comment">// A1、A2</span></span><br><span class="line">        mControlPoint[<span class="number">0</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y - mDifference);</span><br><span class="line">        mControlPoint[<span class="number">1</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">1</span>].x + mDifference, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        <span class="comment">// B1、B2</span></span><br><span class="line">        mControlPoint[<span class="number">2</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">1</span>].x - mDifference, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        mControlPoint[<span class="number">3</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y - mDifference);</span><br><span class="line">        <span class="comment">// C1、C2</span></span><br><span class="line">        mControlPoint[<span class="number">4</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y + mDifference);</span><br><span class="line">        mControlPoint[<span class="number">5</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">3</span>].x - mDifference, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        <span class="comment">// D1、D2</span></span><br><span class="line">        mControlPoint[<span class="number">6</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">3</span>].x + mDifference, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        mControlPoint[<span class="number">7</span>] = <span class="keyword">new</span> PointF(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y + mDifference);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.centerX = w / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.centerY = h / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        DebugLog.e(<span class="string">"绘制开始-------1111----"</span>);</span><br><span class="line">        <span class="keyword">if</span> (stopFlag) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(centerX, centerY);</span><br><span class="line">        <span class="comment">// 绘制背景色</span></span><br><span class="line">        canvas.drawColor(Color.CYAN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制坐标系</span></span><br><span class="line">        drawCoordinateSystem(canvas);</span><br><span class="line">        <span class="comment">// 描点</span></span><br><span class="line">        drawPoints(canvas);</span><br><span class="line">        <span class="comment">// 绘制顶点(A、B、C、D)文本</span></span><br><span class="line">        drawPointText(canvas);</span><br><span class="line">        <span class="comment">// 绘制数据点与控制点进行连线</span></span><br><span class="line">        drawLines(canvas);</span><br><span class="line">        <span class="comment">// 绘制心形曲线</span></span><br><span class="line">        drawHeartCurve(canvas);</span><br><span class="line"></span><br><span class="line">        mCurrentCount++;</span><br><span class="line">        <span class="keyword">if</span> (mCurrentCount &lt; mTotalCount) &#123;</span><br><span class="line">            <span class="comment">// 最上面1个数据点上下移</span></span><br><span class="line">            mDataPoint[<span class="number">1</span>].y += <span class="number">200</span> / mTotalCount;</span><br><span class="line">            <span class="comment">// 最下面2个控制点往上移</span></span><br><span class="line">            mControlPoint[<span class="number">5</span>].y -= <span class="number">160</span> / mTotalCount;</span><br><span class="line">            mControlPoint[<span class="number">6</span>].y -= <span class="number">160</span> / mTotalCount;</span><br><span class="line">            <span class="comment">// 最下面旁边2个控制点往内移</span></span><br><span class="line">            mControlPoint[<span class="number">4</span>].x += <span class="number">80</span> / mTotalCount;</span><br><span class="line">            mControlPoint[<span class="number">7</span>].x -= <span class="number">80</span> / mTotalCount;</span><br><span class="line">            postInvalidateDelayed(<span class="number">100L</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 重置关键点坐标</span></span><br><span class="line">            mCurrentCount = <span class="number">0</span>;</span><br><span class="line">            mDataPoint[<span class="number">1</span>].y = -mRadius;</span><br><span class="line">            mControlPoint[<span class="number">5</span>].y = mDataPoint[<span class="number">3</span>].y;</span><br><span class="line">            mControlPoint[<span class="number">6</span>].y = mDataPoint[<span class="number">3</span>].y;</span><br><span class="line">            mControlPoint[<span class="number">4</span>].x = mDataPoint[<span class="number">2</span>].x;</span><br><span class="line">            mControlPoint[<span class="number">7</span>].x = mDataPoint[<span class="number">0</span>].x;</span><br><span class="line">            postInvalidateDelayed(<span class="number">1000L</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DebugLog.e(<span class="string">"绘制结束-------222----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCoordinateSystem</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">3F</span>);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        canvas.drawLine(-centerX, <span class="number">0</span>, centerX, <span class="number">0</span>, mPaint);</span><br><span class="line">        canvas.drawLine(<span class="number">0</span>, -centerY, <span class="number">0</span>, centerY, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPoints</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">20F</span>);</span><br><span class="line">        mPaint.setColor(Color.BLACK);</span><br><span class="line">        canvas.drawPoint(<span class="number">0</span>, <span class="number">0</span>, mPaint);</span><br><span class="line">        <span class="comment">// 绘制数据点</span></span><br><span class="line">        <span class="keyword">for</span> (PointF pointF : mDataPoint) &#123;</span><br><span class="line">            canvas.drawPoint(pointF.x, pointF.y, mPaint);<span class="comment">// A、B、C、D</span></span><br><span class="line">        &#125;</span><br><span class="line">        mPaint.setColor(Color.BLUE);</span><br><span class="line">        <span class="comment">// 绘制控制点</span></span><br><span class="line">        <span class="keyword">for</span> (PointF pointF : mControlPoint) &#123;</span><br><span class="line">            canvas.drawPoint(pointF.x, pointF.y, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPointText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">2F</span>);</span><br><span class="line">        mPaint.setColor(Color.RED);</span><br><span class="line">        mPaint.setTextSize(DensityUtils.sp2px(mContext, <span class="number">8F</span>));</span><br><span class="line">        <span class="keyword">float</span> fontH = DensityUtils.getFontHeight(mPaint);</span><br><span class="line">        <span class="keyword">char</span>[] peakChar = <span class="string">"ABCD"</span>.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDataPoint.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x, mDataPoint[i].y - fontH / <span class="number">2</span>, mPaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x - mPaint.measureText(String.valueOf(peakChar[i])), mDataPoint[i].y + fontH, mPaint);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                canvas.drawText(peakChar, i, <span class="number">1</span>, mDataPoint[i].x, mDataPoint[i].y + fontH, mPaint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">5F</span>);</span><br><span class="line">        mPaint.setColor(Color.GRAY);</span><br><span class="line">        <span class="comment">// A</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">0</span>].x, mControlPoint[<span class="number">0</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">7</span>].x, mControlPoint[<span class="number">7</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// B</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y, mControlPoint[<span class="number">1</span>].x, mControlPoint[<span class="number">1</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y, mControlPoint[<span class="number">2</span>].x, mControlPoint[<span class="number">2</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// C</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">3</span>].x, mControlPoint[<span class="number">3</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">4</span>].x, mControlPoint[<span class="number">4</span>].y, mPaint);</span><br><span class="line">        <span class="comment">// D</span></span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y, mControlPoint[<span class="number">5</span>].x, mControlPoint[<span class="number">5</span>].y, mPaint);</span><br><span class="line">        canvas.drawLine(mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y, mControlPoint[<span class="number">6</span>].x, mControlPoint[<span class="number">6</span>].y, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHeartCurve</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">225</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        mHeartPath.reset();</span><br><span class="line">        mHeartPath.moveTo(mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">0</span>].x, mControlPoint[<span class="number">0</span>].y, mControlPoint[<span class="number">1</span>].x, mControlPoint[<span class="number">1</span>].y, mDataPoint[<span class="number">1</span>].x, mDataPoint[<span class="number">1</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">2</span>].x, mControlPoint[<span class="number">2</span>].y, mControlPoint[<span class="number">3</span>].x, mControlPoint[<span class="number">3</span>].y, mDataPoint[<span class="number">2</span>].x, mDataPoint[<span class="number">2</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">4</span>].x, mControlPoint[<span class="number">4</span>].y, mControlPoint[<span class="number">5</span>].x, mControlPoint[<span class="number">5</span>].y, mDataPoint[<span class="number">3</span>].x, mDataPoint[<span class="number">3</span>].y);</span><br><span class="line">        mHeartPath.cubicTo(mControlPoint[<span class="number">6</span>].x, mControlPoint[<span class="number">6</span>].y, mControlPoint[<span class="number">7</span>].x, mControlPoint[<span class="number">7</span>].y, mDataPoint[<span class="number">0</span>].x, mDataPoint[<span class="number">0</span>].y);</span><br><span class="line">        canvas.drawPath(mHeartPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</span><br><span class="line">        stopFlag = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）最优因子&quot;&gt;&lt;a href=&quot;#（一）最优因子&quot; class=&quot;headerlink&quot; title=&quot;（一）最优因子&quot;&gt;&lt;/a&gt;（一）最优因子&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之蜘蛛网</title>
    <link href="http://hawkyAndroid.github.io/2018/11/14/summary-view-spider/"/>
    <id>http://hawkyAndroid.github.io/2018/11/14/summary-view-spider/</id>
    <published>2018-11-14T11:10:35.000Z</published>
    <updated>2018-11-15T16:17:31.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、绘制多个正多边形。</p><p>2、绘制连接顶点并过原点的直线。</p><p>3、绘制顶点上的文本。</p><p>4、绘制各维度的辐射区域。</p><h3 id="（二）SpiderView的实例"><a href="#（二）SpiderView的实例" class="headerlink" title="（二）SpiderView的实例"></a>（二）SpiderView的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 蜘蛛网（正多边形）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpiderView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 顶点文本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String mPeakTitles = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="comment">// 每条线上(过原点)的各维度值(可由参数传入)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span>[] mDimenData = &#123;<span class="number">90.0</span>, <span class="number">80.5</span>, <span class="number">100.0</span>, <span class="number">50.9</span>, <span class="number">20.3</span>, <span class="number">50.2</span>, <span class="number">30.7</span>, <span class="number">70.8</span>&#125;;</span><br><span class="line">    <span class="comment">// 维度最大阀值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> mMaxThreshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line">    <span class="keyword">private</span> Path mPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 蜘蛛网区域的宽高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正多边形最大层外接圆半径(多边形的最大半径)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRadius;</span><br><span class="line">    <span class="comment">// 多边形边数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mEdgeCount = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 多边形个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPolygonCount = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 每条边对应的圆心角（正数时为逆时针）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mCentralAngle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpiderView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、构造（初始化）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpiderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mPath = <span class="keyword">new</span> Path();</span><br><span class="line"></span><br><span class="line">        mCentralAngle = (<span class="keyword">float</span>) ((Math.PI * <span class="number">2</span>) / mEdgeCount);</span><br><span class="line">        mMaxThreshold = getMaxThreshold();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">getMaxThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0.0</span>D;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> value : mDimenData) &#123;</span><br><span class="line">            result = Math.max(value, result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、测量(控制)View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span></span><br><span class="line">        <span class="keyword">int</span> width = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> height = measureDimension(DensityUtils.dip2px(mContext, <span class="number">250</span>), heightMeasureSpec);</span><br><span class="line">        setMeasuredDimension(width, height);<span class="comment">// 保存最终测量的宽高</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意：这里defaultSize参数可由自定义属性传入构造方法拿到，这里暂时写死。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">measureDimension</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class="line">        <span class="keyword">if</span> (specMode == MeasureSpec.EXACTLY) &#123;</span><br><span class="line">            result = specSize;<span class="comment">// 指定大小</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = defaultSize;<span class="comment">// 默认大小</span></span><br><span class="line">            <span class="keyword">if</span> (specMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">                result = Math.min(result, specSize);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、获取控件最终大小（在onLayout中获取可能更精确）</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        <span class="keyword">this</span>.mWidth = w;</span><br><span class="line">        <span class="keyword">this</span>.mHeight = h;</span><br><span class="line">        <span class="keyword">this</span>.mRadius = (w / <span class="number">2</span>) * <span class="number">0.9f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、绘制控件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="comment">// 将坐标系移动到画布中央</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 设置画布背景色</span></span><br><span class="line">        canvas.drawColor(Color.CYAN);</span><br><span class="line">        <span class="comment">// 绘制多个多边形</span></span><br><span class="line">        drawPolygon(canvas);</span><br><span class="line">        <span class="comment">// 绘制多条直线</span></span><br><span class="line">        drawLines(canvas);</span><br><span class="line">        <span class="comment">// 绘制文本</span></span><br><span class="line">        drawText(canvas);</span><br><span class="line">        <span class="comment">// 绘制辐射区域</span></span><br><span class="line">        drawRegion(canvas);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPolygon</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setStyle(Paint.Style.STROKE);</span><br><span class="line">        mPaint.setStrokeWidth(<span class="number">3F</span>);</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 绘制多个多边形</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mPolygonCount; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> currentR = (mRadius / mPolygonCount) * i;<span class="comment">// 当前多边形半径</span></span><br><span class="line">            mPath.reset();</span><br><span class="line">            mPath.moveTo(currentR, <span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 绘制一个多边形（连接多条边）</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= mEdgeCount; j++) &#123;</span><br><span class="line">                <span class="keyword">float</span> px = (<span class="keyword">float</span>) (currentR * Math.cos(mCentralAngle * j));</span><br><span class="line">                <span class="keyword">float</span> py = (<span class="keyword">float</span>) (currentR * Math.sin(mCentralAngle * j));</span><br><span class="line">                mPath.lineTo(px, py);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.drawPath(mPath, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            mPath.reset();</span><br><span class="line">            mPath.moveTo(<span class="number">0</span>, <span class="number">0</span>);<span class="comment">// 起点为原点(0,0)</span></span><br><span class="line">            <span class="keyword">float</span> px = (<span class="keyword">float</span>) (mRadius * Math.cos(mCentralAngle * i));</span><br><span class="line">            <span class="keyword">float</span> py = (<span class="keyword">float</span>) (mRadius * Math.sin(mCentralAngle * i));</span><br><span class="line">            mPath.lineTo(px, py);</span><br><span class="line">            canvas.drawPath(mPath, mPaint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        mPaint.setTextSize(DensityUtils.sp2px(mContext, <span class="number">10F</span>));</span><br><span class="line">        <span class="keyword">char</span>[] titles = mPeakTitles.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算画笔高度</span></span><br><span class="line">        Paint.FontMetrics fm = mPaint.getFontMetrics();</span><br><span class="line">        <span class="keyword">float</span> fontH = (<span class="keyword">float</span>) Math.ceil(fm.descent - fm.ascent);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> angle = mCentralAngle * i;</span><br><span class="line">            <span class="comment">// 将半径延长一些再描点</span></span><br><span class="line">            <span class="keyword">float</span> x = (<span class="keyword">float</span>) ((mRadius + fontH / <span class="number">2</span>) * Math.cos(angle));</span><br><span class="line">            <span class="keyword">float</span> y = (<span class="keyword">float</span>) ((mRadius + fontH / <span class="number">2</span>) * Math.sin(angle));</span><br><span class="line">            <span class="keyword">float</span> fontW = mPaint.measureText(String.valueOf(titles[i]));  <span class="comment">// 文本长度</span></span><br><span class="line">            canvas.drawText(titles, i, <span class="number">1</span>, x - fontW / <span class="number">2</span>, y + fontH / <span class="number">2</span>, mPaint);<span class="comment">// A、B</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//            if (angle &gt;= 0 &amp;&amp; angle &lt;= Math.PI / 2) &#123;//  第四象限 A、B</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; Math.PI / 2 &amp;&amp; angle &lt;= Math.PI) &#123;// 三  C、D</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; Math.PI &amp;&amp; angle &lt;= 3 * Math.PI / 2) &#123;// 二 E、F</span></span><br><span class="line"><span class="comment">//            &#125; else if (angle &gt; 3 * Math.PI / 2 &amp;&amp; angle &lt;= 2 * Math.PI) &#123;// 一  G、H</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        mPaint.setColor(Color.argb(<span class="number">200</span>, <span class="number">74</span>, <span class="number">132</span>, <span class="number">251</span>));</span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);</span><br><span class="line">        mPath.reset();</span><br><span class="line">        <span class="keyword">float</span> circleRadius = DensityUtils.dip2px(mContext, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mEdgeCount; i++) &#123;</span><br><span class="line">            <span class="comment">// 过原点的线长</span></span><br><span class="line">            <span class="keyword">double</span> lineLen = (mDimenData[i] / mMaxThreshold) * mRadius;</span><br><span class="line">            <span class="comment">// 确保在直线上</span></span><br><span class="line">            <span class="keyword">float</span> x = (<span class="keyword">float</span>) (lineLen * Math.cos(mCentralAngle * i));</span><br><span class="line">            <span class="keyword">float</span> y = (<span class="keyword">float</span>) (lineLen * Math.sin(mCentralAngle * i));</span><br><span class="line">            <span class="comment">// 描点</span></span><br><span class="line">            canvas.drawCircle(x, y, circleRadius, mPaint);</span><br><span class="line">            <span class="comment">// 连线</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                mPath.moveTo(x, y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mPath.lineTo(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.drawPath(mPath, mPaint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ********************************************** //</span></span><br><span class="line">    <span class="comment">// *******  下面可以暴露一些数据接口、监听 ******** //</span></span><br><span class="line">    <span class="comment">// ********************************************** //</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置各维度值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dimenData 维度数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDimenData</span><span class="params">(<span class="keyword">double</span>[] dimenData)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDimenData = dimenData;</span><br><span class="line">        <span class="keyword">this</span>.mMaxThreshold = getMaxThreshold();</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、绘制多个正多边形。&lt;/p&gt;
&lt;p&gt;2、绘制连接顶点并过原点的直线。&lt;/p&gt;
&lt;p&gt;3、绘制顶点上
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Android View之饼图</title>
    <link href="http://hawkyAndroid.github.io/2018/11/09/summary-view-pie/"/>
    <id>http://hawkyAndroid.github.io/2018/11/09/summary-view-pie/</id>
    <published>2018-11-09T14:20:55.000Z</published>
    <updated>2018-11-15T16:17:38.128Z</updated>
    
    <content type="html"><![CDATA[<h3 id="（一）基本思路"><a href="#（一）基本思路" class="headerlink" title="（一）基本思路"></a>（一）基本思路</h3><p>1、先计算数据总和，再计算出个各扇形(饼图)所占的百分比，就可以得到(1圈)360份里各扇形所占的份数(即扫过的角度sweepAngle)。</p><p>2、设置一个初始角startAngle，然后根据份数去循环叠加扫过的角度sweepAngle，进而更新扇形的起始角，这样就可以绘制一个完整的闭环饼图了。</p><h3 id="（二）Pie的实例"><a href="#（二）Pie的实例" class="headerlink" title="（二）Pie的实例"></a>（二）Pie的实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义View -- 饼图PieData</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * private String name;// 名称</span></span><br><span class="line"><span class="comment"> * private float value;// 数值</span></span><br><span class="line"><span class="comment"> * private float percent;// 百分比</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * private int color;// 颜色</span></span><br><span class="line"><span class="comment"> * private float angle;// 角度（sweepAngle）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PieView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数据也可来源于外部</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mColors = &#123;Color.RED, Color.GREEN, Color.BLUE, Color.CYAN&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Paint mPaint;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// View的宽、高</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHeight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始角度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle;</span><br><span class="line">    <span class="comment">// 饼图绘制区域</span></span><br><span class="line">    <span class="keyword">private</span> RectF mRectF = <span class="keyword">new</span> RectF();</span><br><span class="line">    <span class="comment">// 多条饼图数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PieData&gt; mDataList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PieView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPaint = <span class="keyword">new</span> Paint();</span><br><span class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);<span class="comment">// 抗锯齿</span></span><br><span class="line">        mPaint.setStyle(Paint.Style.FILL);<span class="comment">// 填充</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置起始角度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartAngle</span><span class="params">(<span class="keyword">float</span> startAngle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mStartAngle = startAngle;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置（更新）数据UI</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;PieData&gt; list)</span> </span>&#123;</span><br><span class="line">        initData(list);</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化数据（主要目的：设置百分比、初始角度）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">(List&lt;PieData&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataList = list;</span><br><span class="line">        <span class="keyword">float</span> sumValue = <span class="number">0</span>;<span class="comment">// 数据总和</span></span><br><span class="line">        <span class="keyword">for</span> (PieData pie : list) &#123;</span><br><span class="line">            sumValue += pie.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (PieData pie : list) &#123;</span><br><span class="line">            <span class="keyword">float</span> percent = pie.getValue() / sumValue;</span><br><span class="line">            <span class="keyword">float</span> angle = percent * <span class="number">360</span>;</span><br><span class="line">            pie.setPercent(percent);<span class="comment">// 设置饼块百分比</span></span><br><span class="line">            pie.setAngle(angle);<span class="comment">// 设置饼块角度(正数为顺时针、负数为逆时针)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确定View的大小</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</span><br><span class="line">        mWidth = w;</span><br><span class="line">        mHeight = h;</span><br><span class="line">        <span class="keyword">float</span> r = (<span class="keyword">float</span>) ((Math.min(mWidth, mHeight)) / <span class="number">2</span> * <span class="number">0.9</span>);<span class="comment">// 饼图半径</span></span><br><span class="line">        mRectF.set(-r, -r, r, r);<span class="comment">// 饼图绘制区域</span></span><br><span class="line">        DebugLog.e(<span class="string">"mWidth:"</span> + mWidth + <span class="string">", mHeight:"</span> + mHeight + <span class="string">", r:"</span> + r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">        <span class="keyword">float</span> currentStartAngle = mStartAngle; <span class="comment">// 当前起始角度</span></span><br><span class="line">        canvas.translate(mWidth / <span class="number">2</span>, mHeight / <span class="number">2</span>); <span class="comment">// 将画布坐标原点移动到中心位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = mDataList.size(); i &lt; n; i++) &#123;</span><br><span class="line">            PieData data = mDataList.get(i);</span><br><span class="line">            mPaint.setColor(mColors[i]);</span><br><span class="line">            <span class="comment">// 绘制扇形</span></span><br><span class="line">            canvas.drawArc(mRectF, currentStartAngle, data.getAngle(), <span class="keyword">true</span>, mPaint);</span><br><span class="line">            currentStartAngle += data.getAngle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;（一）基本思路&quot;&gt;&lt;a href=&quot;#（一）基本思路&quot; class=&quot;headerlink&quot; title=&quot;（一）基本思路&quot;&gt;&lt;/a&gt;（一）基本思路&lt;/h3&gt;&lt;p&gt;1、先计算数据总和，再计算出个各扇形(饼图)所占的百分比，就可以得到(1圈)360份里各扇形所占的份
      
    
    </summary>
    
      <category term="View" scheme="http://hawkyAndroid.github.io/categories/View/"/>
    
    
      <category term="View" scheme="http://hawkyAndroid.github.io/tags/View/"/>
    
  </entry>
  
</feed>
