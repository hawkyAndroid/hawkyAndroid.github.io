<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hawky的博客</title>
  
  <subtitle>行到水穷处，坐看云起时</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hawkyAndroid.github.io/"/>
  <updated>2018-06-01T14:54:34.827Z</updated>
  <id>http://hawkyAndroid.github.io/</id>
  
  <author>
    <name>Hawky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UDP 使用详解</title>
    <link href="http://hawkyAndroid.github.io/2018/06/01/summary-udp-01/"/>
    <id>http://hawkyAndroid.github.io/2018/06/01/summary-udp-01/</id>
    <published>2018-06-01T15:22:24.000Z</published>
    <updated>2018-06-01T14:54:34.827Z</updated>
    
    <content type="html"><![CDATA[<h3 id="UDP的使用范例"><a href="#UDP的使用范例" class="headerlink" title="UDP的使用范例"></a>UDP的使用范例</h3><h4 id="BroadcastData-广播数据包对象"><a href="#BroadcastData-广播数据包对象" class="headerlink" title="BroadcastData -广播数据包对象"></a>BroadcastData -广播数据包对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收的广播数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastData</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PacketRx packetRx;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BroadcastData</span><span class="params">(PacketRx packetRx, String ip, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.packetRx = packetRx;</span><br><span class="line"><span class="keyword">this</span>.ip = ip;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> PacketRx <span class="title">getPacketRx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> packetRx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BroadcastRunnable-广播发送线程"><a href="#BroadcastRunnable-广播发送线程" class="headerlink" title="BroadcastRunnable -广播发送线程"></a>BroadcastRunnable -广播发送线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP广播一直发送：每秒发1次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BroadcastRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIXED_BROADCAST_IP = <span class="string">"255.255.255.255"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIXED_BROADCAST_PORT = <span class="number">9002</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> FIXED_BROADCAST_PERIOD = <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DatagramSocket mSocket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BroadcastRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止广播</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopBroadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!mSocket.isClosed()) &#123;</span><br><span class="line">mSocket.close();</span><br><span class="line">&#125;</span><br><span class="line">mSocket.disconnect();</span><br><span class="line">mSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start BroadcastThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">mSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">byte</span>[] data; <span class="comment">// 待发送的数据包、待赋值</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length,</span><br><span class="line"><span class="keyword">new</span> InetSocketAddress(FIXED_BROADCAST_IP, FIXED_BROADCAST_PORT));</span><br><span class="line">System.out.println(<span class="string">"Broadcast Address:"</span> + packet.getSocketAddress());</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">mSocket.send(packet);</span><br><span class="line">System.out.println(<span class="string">"Broadcast data send success &gt;&gt;"</span> + bytesToHexString(data));</span><br><span class="line">Thread.sleep(FIXED_BROADCAST_PERIOD);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopBroadcast();</span><br><span class="line">System.out.println(<span class="string">"-----end BroadcastThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReceiveRunnable-广播接收线程"><a href="#ReceiveRunnable-广播接收线程" class="headerlink" title="ReceiveRunnable -广播接收线程"></a>ReceiveRunnable -广播接收线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收UDP数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = ReceiveRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIXED_BROADCAST_IP = <span class="string">"255.255.255.255"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIXED_BROADCAST_PORT = <span class="number">58888</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DatagramSocket mSocket = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> BroadcastDataListener mOnDataListener;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReceiveRunnable</span><span class="params">(BroadcastDataListener listener)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mOnDataListener = listener;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止广播</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopBroadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!mSocket.isClosed()) &#123;</span><br><span class="line">mSocket.close();</span><br><span class="line">&#125;</span><br><span class="line">mSocket.disconnect();</span><br><span class="line">mSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start ReceiveThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mSocket = <span class="keyword">new</span> DatagramSocket(<span class="keyword">new</span> InetSocketAddress(FIXED_BROADCAST_IP, FIXED_BROADCAST_PORT));</span><br><span class="line">mSocket.setBroadcast(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">128</span>];<span class="comment">// 大小需要结合实际情况来定</span></span><br><span class="line">DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length);</span><br><span class="line">mSocket.receive(packet);<span class="comment">// 接收广播数据包</span></span><br><span class="line"><span class="comment">// 这里可将data解析（解密）封装成数据包对象packetRx</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">System.out.println(<span class="string">"Socket Address:"</span> + packet.getSocketAddress());</span><br><span class="line">System.out.println(<span class="string">"receive broadcast data--&lt;&lt;"</span> + packetRx);</span><br><span class="line"><span class="keyword">if</span> (mOnDataListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">mOnDataListener.onReceiveData(<span class="keyword">new</span> BroadcastData(packetRx, packet.getAddress().getHostAddress(), packet.getPort()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopBroadcast();</span><br><span class="line">System.out.println(<span class="string">"-----end ReceiveThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BroadcastDataListener-广播数据包监听"><a href="#BroadcastDataListener-广播数据包监听" class="headerlink" title="BroadcastDataListener -广播数据包监听"></a>BroadcastDataListener -广播数据包监听</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.udp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听广播数据包</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BroadcastDataListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onReceiveData</span><span class="params">(BroadcastData broadcastData)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolManager-线程池管理"><a href="#ThreadPoolManager-线程池管理" class="headerlink" title="ThreadPoolManager -线程池管理"></a>ThreadPoolManager -线程池管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span></span><br><span class="line">        service = Executors.newCachedThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        service.execute(runnable);<span class="comment">// 仍到线程池中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolManager INSTANCE = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;UDP的使用范例&quot;&gt;&lt;a href=&quot;#UDP的使用范例&quot; class=&quot;headerlink&quot; title=&quot;UDP的使用范例&quot;&gt;&lt;/a&gt;UDP的使用范例&lt;/h3&gt;&lt;h4 id=&quot;BroadcastData-广播数据包对象&quot;&gt;&lt;a href=&quot;#Broadcas
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>TCP 使用详解</title>
    <link href="http://hawkyAndroid.github.io/2018/06/01/summary-tcp-01/"/>
    <id>http://hawkyAndroid.github.io/2018/06/01/summary-tcp-01/</id>
    <published>2018-06-01T14:12:26.000Z</published>
    <updated>2018-06-01T14:54:38.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP的使用范例"><a href="#TCP的使用范例" class="headerlink" title="TCP的使用范例"></a>TCP的使用范例</h3><h4 id="SocketClient-客户端对象"><a href="#SocketClient-客户端对象" class="headerlink" title="SocketClient -客户端对象"></a>SocketClient -客户端对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketClient</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Socket socket;</span><br><span class="line"><span class="keyword">private</span> String ip;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SocketClient</span><span class="params">(Socket socket, String ip, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.socket = socket;</span><br><span class="line"><span class="keyword">this</span>.ip = ip;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送数据给Socket客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> *            加密后的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendData</span><span class="params">(<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (socket != <span class="keyword">null</span> &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">socket.getOutputStream().write(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (socket == <span class="keyword">null</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket.getInputStream().close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">socket.getOutputStream().close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.socket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.socket = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(ip + <span class="string">"----Socket client closed----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SocketClient [socket="</span> + socket + <span class="string">", ip="</span> + ip + <span class="string">", port="</span> + port + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCPClientRunnable-客户端线程"><a href="#TCPClientRunnable-客户端线程" class="headerlink" title="TCPClientRunnable -客户端线程"></a>TCPClientRunnable -客户端线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单独封装一个线程来处理客户端接收的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClientRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TCPClientRunnable.class.getSimpleName();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">private</span> SocketClient mSocketClient;<span class="comment">// Socket客户端</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TCPClientRunnable</span><span class="params">(SocketClient socketClient)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mSocketClient = socketClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start TCPClientThread-----"</span>);</span><br><span class="line">DataInputStream br = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(<span class="string">"Socket client is coming---"</span> + mSocketClient.getIp() + <span class="string">":"</span> + mSocketClient.getPort());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> BufferedInputStream(mSocketClient.getSocket().getInputStream()));<span class="comment">// 读取客户端数据(每次循环读取一条完整的数据指令)</span></span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0xFF</span> &amp; br.readByte();<span class="comment">// 没有数据时处于阻塞状态</span></span><br><span class="line">System.out.println(<span class="string">"head:"</span> + head);</span><br><span class="line"><span class="keyword">if</span> (head != <span class="number">0xFF</span>) <span class="keyword">continue</span>;<span class="comment">// 需要根据协议来定</span></span><br><span class="line"><span class="keyword">int</span> length = br.readShort();<span class="comment">// 需要根据协议来定，这里写死2字节</span></span><br><span class="line">System.err.println(<span class="string">"length:"</span> + length);</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[length];<span class="comment">// 总的具体数据大小</span></span><br><span class="line"><span class="keyword">int</span> hasRead;<span class="comment">// 每次读的数据长度</span></span><br><span class="line"><span class="keyword">int</span> totalRead = <span class="number">0</span>;<span class="comment">// 累计读的数据长度</span></span><br><span class="line"><span class="keyword">while</span> ((hasRead = br.read(buff, totalRead, length - totalRead)) != -<span class="number">1</span>) &#123;<span class="comment">// length - totalRead：剩余数据长度</span></span><br><span class="line">totalRead += hasRead;</span><br><span class="line"><span class="keyword">if</span> (totalRead &gt;= length) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下面可以将：head、length、buff（具体消息体）（解密）封装成一个包对象packetRx</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 提供回调接口，方便UI更新</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : TCPServerRunnable.sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onReceiveMessage(mSocketClient, packetRx);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (TCPServerRunnable.sSocketClients) &#123;</span><br><span class="line">TCPServerRunnable.sSocketClients.remove(mSocketClient);</span><br><span class="line">System.out.println(<span class="string">"The number of Socket client is："</span> + TCPServerRunnable.sSocketClients.size());</span><br><span class="line"><span class="comment">// 客户端数量发生变化</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : TCPServerRunnable.sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onClientsChanged(TCPServerRunnable.sSocketClients);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-----end TCPClientThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TCPServerRunnable-服务器线程"><a href="#TCPServerRunnable-服务器线程" class="headerlink" title="TCPServerRunnable -服务器线程"></a>TCPServerRunnable -服务器线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务线程</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServerRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = TCPServerRunnable.class.getSimpleName();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket客户端集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> Set&lt;SocketClient&gt; sSocketClients = Collections.synchronizedSet(<span class="keyword">new</span> HashSet&lt;SocketClient&gt;());</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设备数据回调监听（只针对多个界面更新，不针对Socket客户端）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;TCPCallback&gt; sDeviceMessageCallbacks = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP服务 默认端口58888</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_TCP_PORT = <span class="number">58888</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TCP端口随机生成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tcpPort = DEFAULT_TCP_PORT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> ServerSocket mServerSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TCPServerRunnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTcpPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> tcpPort;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----start TCPServerThread-----"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mServerSocket = <span class="keyword">new</span> ServerSocket(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取随机端口</span></span><br><span class="line">tcpPort = mServerSocket.getLocalPort();</span><br><span class="line">System.out.println(<span class="string">"Socket server waiting connect...tcpPort:"</span> + tcpPort);</span><br><span class="line">stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!stop) &#123;</span><br><span class="line"><span class="comment">// 等待连接, 此时线程处于阻塞状态</span></span><br><span class="line">Socket socket = mServerSocket.accept();</span><br><span class="line"><span class="comment">// 60s读取超时</span></span><br><span class="line">socket.setSoTimeout(<span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 这里需要判断：如果来了一个已存在的IP-Socket，则需要断开原来的连接</span></span><br><span class="line">SocketClient socketClient = findSocketClientByIP(socket.getInetAddress().getHostAddress());</span><br><span class="line"><span class="keyword">if</span> (socketClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">socketClient.close();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">500L</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"><span class="comment">// e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">socketClient = <span class="keyword">new</span> SocketClient(socket, socket.getInetAddress().getHostAddress(), socket.getPort());</span><br><span class="line"><span class="keyword">synchronized</span> (sSocketClients) &#123;</span><br><span class="line">sSocketClients.add(socketClient);</span><br><span class="line">System.out.println(<span class="string">"The number of Socket client is："</span> + sSocketClients.size());</span><br><span class="line"><span class="comment">// 客户端数量发生变化</span></span><br><span class="line"><span class="keyword">for</span> (TCPCallback callback : sDeviceMessageCallbacks) &#123;</span><br><span class="line">callback.onClientsChanged(sSocketClients);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ThreadPoolManager.getInstance().execute(<span class="keyword">new</span> TCPClientRunnable(socketClient));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">stopTCPServer();</span><br><span class="line">System.out.println(<span class="string">"-----end TCPServerThread-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止TCP服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopTCPServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stop = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (mServerSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mServerSocket.close();</span><br><span class="line">closeAllSocketClient();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">mServerSocket = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭所有Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeAllSocketClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (sSocketClients) &#123;</span><br><span class="line"><span class="keyword">for</span> (SocketClient client : sSocketClients) &#123;</span><br><span class="line">client.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过IP获取SocketClient</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ip</span></span><br><span class="line"><span class="comment"> *            IP地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Socket客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocketClient <span class="title">findSocketClientByIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (SocketClient client : sSocketClients) &#123;</span><br><span class="line"><span class="keyword">if</span> (ip.equals(client.getIp())) &#123;</span><br><span class="line"><span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过IP向某个客户端发消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDataByIP</span><span class="params">(String ip, <span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">SocketClient client = findSocketClientByIP(ip);</span><br><span class="line"><span class="keyword">if</span> (client != <span class="keyword">null</span>) &#123;</span><br><span class="line">client.sendData(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ThreadPoolManager-线程池管理"><a href="#ThreadPoolManager-线程池管理" class="headerlink" title="ThreadPoolManager -线程池管理"></a>ThreadPoolManager -线程池管理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.leo.tcp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span></span><br><span class="line">        service = Executors.newCachedThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        service.execute(runnable);<span class="comment">// 仍到线程池中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolManager INSTANCE = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP的使用范例&quot;&gt;&lt;a href=&quot;#TCP的使用范例&quot; class=&quot;headerlink&quot; title=&quot;TCP的使用范例&quot;&gt;&lt;/a&gt;TCP的使用范例&lt;/h3&gt;&lt;h4 id=&quot;SocketClient-客户端对象&quot;&gt;&lt;a href=&quot;#SocketClien
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Socket知识点总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/31/summary-socket-01/"/>
    <id>http://hawkyAndroid.github.io/2018/05/31/summary-socket-01/</id>
    <published>2018-05-31T14:02:23.000Z</published>
    <updated>2018-06-01T14:57:36.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络分层"><a href="#计算机网络分层" class="headerlink" title="计算机网络分层"></a>计算机网络分层</h3><p>计算机网络分为五层：物理层、数据链路层、网络层、传输层、应用层。<br>其中：网络层：负责根据IP找到目的地址的主机。传输层：通过端口把数据传到目的主机的目的进程，来实现进程与进程之间的通信。</p><h3 id="C-S结构"><a href="#C-S结构" class="headerlink" title="C/S结构"></a>C/S结构</h3><p>定义：即客户端/服务器结构，是软件系统体系结构<br>作用：充分利用两端硬件环境的优势，将任务合理分配到Client端和Server端来实现，降低了系统的通讯开销。Socket正是使用这种结构建立连接的，一个套接字接客户端，一个套接字接服务器。</p><h3 id="Socket的使用类型主要有两种："><a href="#Socket的使用类型主要有两种：" class="headerlink" title="Socket的使用类型主要有两种："></a>Socket的使用类型主要有两种：</h3><p>流套接字（streamsocket） ：基于 TCP协议，采用 流的方式 提供可靠的字节流服务<br>数据报套接字(datagramsocket)：基于 UDP协议，采用 数据报文 提供数据打包发送的服务</p><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><p>定义：Transmission Control Protocol，即传输控制协议，是一种传输层通信协议。<b>三次握手</b>的目的是为了防止服务器端因为接收了早已失效的连接请求报文从而一直等待客户端请求，从而浪费资源。</p><h4 id="特点：面向连接、面向字节流、全双工通信、可靠"><a href="#特点：面向连接、面向字节流、全双工通信、可靠" class="headerlink" title="特点：面向连接、面向字节流、全双工通信、可靠."></a>特点：面向连接、面向字节流、全双工通信、可靠.</h4><p>①面向连接：指的是要使用TCP传输数据，必须先建立TCP连接，传输完成后释放连接，就像打电话一样必须先拨号建立一条连接，打完后挂机释放连接。</p><p>②全双工通信：即一旦建立了TCP连接，通信双方可以在任何时候都能发送数据。</p><p>③可靠的：指的是通过TCP连接传送的数据，无差错，不丢失，不重复，并且按序到达。</p><p>④面向字节流：流，指的是流入到进程或从进程流出的字符序列。简单来说，虽然有时候要传输的数据流太大，TCP报文长度有限制，不能一次传输完，要把它分为好几个数据块，但是由于可靠性保证，接收方可以按顺序接收数据块然后重新组成分块之前的数据流，所以TCP看起来就像直接互相传输字节流一样，面向字节流。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>定义：User Datagram Protocol，即用户数据报协议，是一种传输层通信协议。</p><h4 id="特点：无连接的、不可靠的、面向报文、没有拥塞控制"><a href="#特点：无连接的、不可靠的、面向报文、没有拥塞控制" class="headerlink" title="特点：无连接的、不可靠的、面向报文、没有拥塞控制."></a>特点：无连接的、不可靠的、面向报文、没有拥塞控制.</h4><p>无连接的：和TCP要建立连接不同，UDP传输数据不需要建立连接，就像写信，在信封写上收信人名称、地址就可以交给邮局发送了，至于能不能送到，就要看邮局的送信能力和送信过程的困难程度了。</p><p>不可靠的：因为UDP发出去的数据包发出去就不管了，不管它会不会到达，所以很可能会出现丢包现象，使传输的数据出错。</p><p>面向报文：数据报文，就相当于一个数据包，应用层交给UDP多大的数据包，UDP就照样发送，不会像TCP那样拆分。</p><p>没有拥塞控制：拥塞，是指到达通信子网中某一部分的分组数量过多，使得该部分网络来不及处理，以致引起这部分乃至整个网络性能下降的现象，严重时甚至会导致网络通信业务陷入停顿，即出现死锁现象，就像交通堵塞一样。TCP建立连接后如果发送的数据因为信道质量的原因不能到达目的地，它会不断重发，有可能导致越来越塞，所以需要一个复杂的原理来控制拥塞。而UDP就没有这个烦恼，发出去就不管了。</p><h4 id="UDP协议应用场景"><a href="#UDP协议应用场景" class="headerlink" title="UDP协议应用场景"></a>UDP协议应用场景</h4><p>很多的实时应用（如IP电话、实时视频会议、某些多人同时在线游戏等）要求源主机以很定的速率发送数据，并且允许在网络发生拥塞时候丢失一些数据，但是要求不能有太大的延时，UDP就刚好适合这种要求。所以说，只有不适合的技术，没有真正没用的技术。</p><h3 id="Socket-与-Http-对比"><a href="#Socket-与-Http-对比" class="headerlink" title="Socket 与 Http 对比"></a>Socket 与 Http 对比</h3><ol><li><p>工作性质不同。Socket属于传输层，因为 TCP / IP协议属于传输层，解决的是<b>数据如何在网络中传输的问题</b>。而HTTP协议 属于 应用层，解决的是<b>数据如何包装的问题</b>。</p></li><li><p>工作方式不同。Http：采用<b> 请求-响应</b> 方式即建立网络连接后，当 客户端 向 服务器 发送请求后，服务器端才能向客户端返回数据。可理解为：是客户端有需要才进行通信。而Socket：采用<b> 服务器主动发送数据 </b>的方式即建立网络连接后，服务器可主动发送消息给客户端，而不需要由客户端向服务器发送请求可理解为：是服务器端有需要才进行通信。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络分层&quot;&gt;&lt;a href=&quot;#计算机网络分层&quot; class=&quot;headerlink&quot; title=&quot;计算机网络分层&quot;&gt;&lt;/a&gt;计算机网络分层&lt;/h3&gt;&lt;p&gt;计算机网络分为五层：物理层、数据链路层、网络层、传输层、应用层。&lt;br&gt;其中：网络层：负责根据IP找
      
    
    </summary>
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/categories/Socket%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Socket通信" scheme="http://hawkyAndroid.github.io/tags/Socket%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>AS使用总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/30/summary-as-develop-2018-5-28/"/>
    <id>http://hawkyAndroid.github.io/2018/05/30/summary-as-develop-2018-5-28/</id>
    <published>2018-05-30T15:02:36.000Z</published>
    <updated>2018-05-30T15:03:17.261Z</updated>
    
    <content type="html"><![CDATA[<h3 id="android-gradle依赖的几种方式"><a href="#android-gradle依赖的几种方式" class="headerlink" title="android gradle依赖的几种方式"></a>android gradle依赖的几种方式</h3><p></p><h5>implementation</h5><br>使用了该命令编译的依赖，它仅仅对当前的Moudle提供接口。<br>好处： 1. 加快编译速度。2. 隐藏对外不必要的接口。<p></p><p></p><h5>api</h5><br>跟 2.x 版本的 compile完全相同。与implementation的区别是：implementation内部module使用，而api可对外提供接口。<p></p><p></p><h5>provided（compileOnly）</h5><br>只在编译时有效，不会参与打包<br>可以在自己的moudle中使用该方式依赖一些比如com.android.support，gson这些使用者常用的库，避免冲突。<p></p><p></p><h5>apk（runtimeOnly）</h5><br>只在生成apk的时候参与打包，编译时不会参与，很少用。<p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;android-gradle依赖的几种方式&quot;&gt;&lt;a href=&quot;#android-gradle依赖的几种方式&quot; class=&quot;headerlink&quot; title=&quot;android gradle依赖的几种方式&quot;&gt;&lt;/a&gt;android gradle依赖的几种方式&lt;/
      
    
    </summary>
    
      <category term="AS总结" scheme="http://hawkyAndroid.github.io/categories/AS%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="AS" scheme="http://hawkyAndroid.github.io/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>为人处世</title>
    <link href="http://hawkyAndroid.github.io/2018/05/27/summery-do-something-2018-5-27/"/>
    <id>http://hawkyAndroid.github.io/2018/05/27/summery-do-something-2018-5-27/</id>
    <published>2018-05-27T08:54:10.000Z</published>
    <updated>2018-05-27T08:54:55.537Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>看望病友：安慰、鼓励、善意的“欺骗”。</p></li><li><p>日常朋友聊天：谦逊、求同存异、“不离间”。</p></li><li><p>问朋友借东西：用商量的语气、别说气话、礼貌归还。</p></li><li><p>为朋友劝架：心平气和、用幽默解围、不要有个人情绪。</p></li><li><p>邻里相处：平等、表扬、切勿探究别人的私事。</p></li><li><p>对朋友下逐客令：把理由说清楚、商量性的提醒、安排他干点别的事。</p></li><li><p>在酒桌上说话：话题顾忌他人，尊重宾主、别强求劝酒。</p></li><li><p>同事之间：巧用称谓搞好关系、不要过分表现自己、建设性口气。</p></li><li><p>寻找陌生人之间话题：发现共同点、话题符合身份、避免过多使用专业术语、尽量选择众人关心的事件、不要轻易转移话题、虚心请教、换位思考、目的性不要太强。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;看望病友：安慰、鼓励、善意的“欺骗”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;日常朋友聊天：谦逊、求同存异、“不离间”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问朋友借东西：用商量的语气、别说气话、礼貌归还。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为朋友劝架：心平气和
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>MQTT协议总结</title>
    <link href="http://hawkyAndroid.github.io/2018/05/09/summary-mqtt-protocol/"/>
    <id>http://hawkyAndroid.github.io/2018/05/09/summary-mqtt-protocol/</id>
    <published>2018-05-09T14:51:10.000Z</published>
    <updated>2018-05-09T15:55:56.906Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-MQTT控制报文的格式"><a href="#1-MQTT控制报文的格式" class="headerlink" title="1. MQTT控制报文的格式"></a>1. MQTT控制报文的格式</h3><h4 id="1-1-MQTT控制报文的结构"><a href="#1-1-MQTT控制报文的结构" class="headerlink" title="1.1 MQTT控制报文的结构"></a>1.1 MQTT控制报文的结构</h4><table><thead><tr><th style="text-align:center">MQTT控制报文的结构</th></tr></thead><tbody><tr><td style="text-align:center">Fixed header 固定报头，所有控制报文都包含</td></tr><tr><td style="text-align:center">Variable header 可变报头，部分控制报文包含</td></tr><tr><td style="text-align:center">Payload 有效载荷，部分控制报文包含</td></tr></tbody></table><h4 id="1-2-固定报头（2个字节）"><a href="#1-2-固定报头（2个字节）" class="headerlink" title="1.2 固定报头（2个字节）"></a>1.2 固定报头（2个字节）</h4><table><br>    <tr><br>        <td>Bit</td><br>        <td>7</td><br>        <td>6</td><br>        <td>5</td><br>        <td>4</td><br>        <td>3</td><br>        <td>2</td><br>        <td>1</td><br>        <td>0</td><br>   </tr><br>    <tr><br>        <td>byte 1</td><br>        <td colspan="4" align="center">MQTT控制报文的类型</td><br>        <td colspan="4" align="center">用于指定控制报文类型的标志位</td><br>    </tr><br>    <tr><br>        <td>byte 2</td><br>        <td colspan="8" align="center">剩余长度</td><br>    </tr><br></table><h5 id="1-2-1-控制报文的类型（14种）–高四位"><a href="#1-2-1-控制报文的类型（14种）–高四位" class="headerlink" title="1.2.1 控制报文的类型（14种）–高四位"></a>1.2.1 控制报文的类型（14种）–高四位</h5><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">值</th><th style="text-align:center">报文流动方向</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">1</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端请求连接服务端</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">2</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">连接报文确认</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">3</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布消息</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">4</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 1 消息发布收到确认</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">5</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布收到（保证交付第一步）</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">6</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">发布释放（保证交付第二步）</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">7</td><td style="text-align:center">两个方向都允许</td><td style="text-align:center">QoS 2 消息发布完成（保证交互第三步）</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">8</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端订阅请求</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">9</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">订阅请求报文确认</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">10</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端取消订阅请求</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">11</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">取消订阅报文确认</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">12</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">心跳请求</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">13</td><td style="text-align:center">服务端到客户端</td><td style="text-align:center">心跳响应</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">14</td><td style="text-align:center">客户端到服务端</td><td style="text-align:center">客户端断开连接</td></tr><tr><td style="text-align:center">Reserved</td><td style="text-align:center">15</td><td style="text-align:center">禁止</td><td style="text-align:center">保留</td></tr></tbody></table><h5 id="1-2-2-标志位-–低四位"><a href="#1-2-2-标志位-–低四位" class="headerlink" title="1.2.2 标志位 –低四位"></a>1.2.2 标志位 –低四位</h5><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">固定报头标志</th><th style="text-align:center">Bit 3</th><th style="text-align:center">Bit 2</th><th>Bit 1</th><th>Bit 0</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">Used in MQTT 3.1.1</td><td style="text-align:center">DUP 1</td><td style="text-align:center">QoS 2</td><td>QoS 2</td><td>RETAIN 3</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>1</td><td>0</td></tr><tr><td style="text-align:center">UNSUBACK</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PINGREQ</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">Reserved</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td>0</td><td>0</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">Reserved</td><td style="text-align:center"></td><td style="text-align:center">0</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><h5 id="1-2-3-剩余长度-–从第-2-个字节开始位置"><a href="#1-2-3-剩余长度-–从第-2-个字节开始位置" class="headerlink" title="1.2.3 剩余长度 –从第 2 个字节开始位置"></a>1.2.3 剩余长度 –从第 2 个字节开始位置</h5><p>剩余长度（Remaining Length）表示当前报文剩余部分的字节数，包括可变报头和负载的数据。剩余长度不包括用于编码剩余长度字段本身的字节数。</p><p>剩余长度字段使用一个变长度编码方案，对小于 128 的值它使用单字节编码。更大的值按下面的方式处理。低 7 位有效位用于编码数据，最高有效位用于指示是否有更多的字节。因此每个字节可以编码 128 个数值和一个 延续位（ continuation bit ） 。剩余长度字段最大 4 个字节。</p><p>分别表示（每个字节的低 7 位用于编码数据，最高位是标志位）：<br>1 个字节时，从 0(0x00)到 127(0x7f)<br>2 个字节时，从 128(0x80,0x01)到 16383(0Xff,0x7f)<br>3 个字节时，从 16384(0x80,0x80,0x01)到 2097151(0xFF,0xFF,0x7F)<br>4 个字节时，从 2097152(0x80,0x80,0x80,0x01)到 268435455(0xFF,0xFF,0xFF,0x7F)</p><h4 id="1-3-可变报头"><a href="#1-3-可变报头" class="headerlink" title="1.3 可变报头"></a>1.3 可变报头</h4><p>某些 MQTT 控制报文包含一个可变报头部分。它在固定报头和负载之间。可变报头的内容根据报文类型的不同而不同。可变报头的报文标识符（Packet Identifier）字段存在于在多个类型的报文里。</p><p>很多控制报文的可变报头部分包含一个两字节的报文标识符字段。这些报文是 PUBLISH（QoS&gt;0 时），PUBACK，PUBREC，PUBREL，PUBCOMP，SUBSCRIBE, SUBACK，UNSUBSCIBE，UNSUBACK。</p><p>注意：QoS 设置为 0 的 PUBLISH 报文 不能包含报文标识符。PUBACK, PUBREC, PUBREL 报文 必须包含与最初发送的 PUBLISH 报文相同的报文标识符。类似地，SUBACK 和 UNSUBACK  必须包含在对应的 SUBSCRIBE 和 UNSUBSCRIBE 报文中使用的<br>报文标识符。</p><h4 id="1-4-有效载荷"><a href="#1-4-有效载荷" class="headerlink" title="1.4 有效载荷"></a>1.4 有效载荷</h4><p>某些 MQTT 控制报文在报文的最后部分包含一个有效载荷。对于PUBLIC来说，有效载荷就是应用消息。</p><h5 id="1-4-1-包含有效载荷的控制报文"><a href="#1-4-1-包含有效载荷的控制报文" class="headerlink" title="1.4.1 包含有效载荷的控制报文"></a>1.4.1 包含有效载荷的控制报文</h5><table><thead><tr><th style="text-align:center">控制报文</th><th style="text-align:center">有效载荷</th></tr></thead><tbody><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">CONNACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBLISH</td><td style="text-align:center">可选</td></tr><tr><td style="text-align:center">PUBACK</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREC</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBREL</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">PUBCOMP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">SUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">SUBACK</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">UNSUBSCRIBE</td><td style="text-align:center">需要</td></tr><tr><td style="text-align:center">PINGRESP</td><td style="text-align:center">不需要</td></tr><tr><td style="text-align:center">DISCONNECT</td><td style="text-align:center">不需要</td></tr></tbody></table><h3 id="2-MQTT控制报文（14种）"><a href="#2-MQTT控制报文（14种）" class="headerlink" title="2. MQTT控制报文（14种）"></a>2. MQTT控制报文（14种）</h3><h4 id="2-1-CONNECT-–-连接服务端"><a href="#2-1-CONNECT-–-连接服务端" class="headerlink" title="2.1 CONNECT –  连接服务端"></a>2.1 CONNECT –  连接服务端</h4><p>客户端到服务端的网络连接建立后，客户端发送给服务端的第一个报文必须是CONNECT报文。<br>在一个网络连接上，客户端只能发送一次 CONNECT 报文。服务端 必须将客户端发送的第二个 CONNECT报文当作协议违规处理并断开客户端的连接。有效载荷包含一个或多个编码的字段。包括客户端的唯一标识符，Will 主题，Will 消息，用户名和密码。除了客户端标识之外，其它的字段都是可选的，基于标志位来决定可变报头中是否需要包含这些字段。</p><h4 id="2-2-CONNACK-–-确认连接请求"><a href="#2-2-CONNACK-–-确认连接请求" class="headerlink" title="2.2 CONNACK – 确认连接请求"></a>2.2 CONNACK – 确认连接请求</h4><p>服务端发送 CONNACK 报文响应从客户端收到的 CONNECT 报文。服务端发送给客户端的第一个报文必须须是 CONNACK。如果客户端在合理的时间内没有收到服务端的 CONNACK 报文，客户端 应该关闭网络连接。合理的时间取决于应用的类型和通信基础设施。</p><h5 id="连接返回码的值"><a href="#连接返回码的值" class="headerlink" title="连接返回码的值"></a>连接返回码的值</h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">返回码响应</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0x00 连接已接受</td><td style="text-align:center">连接已被服务端接受</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0x01 连接已拒绝，不支持的协议版本</td><td style="text-align:center">服务端不支持客户端请求的 MQTT 协议级别</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0x02 连接已拒绝，不合格的客户端标识符</td><td style="text-align:center">客户端标识符是正确的 UTF-8 编码，但服务端不允许使用</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0x03 连接已拒绝，服务端不可用</td><td style="text-align:center">网络连接已建立，但 MQTT 服务不可用</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0x04 连接已拒绝，无效的用户名或密码</td><td style="text-align:center">用户名或密码的数据格式无效</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0x05 连接已拒绝，未授权</td><td style="text-align:center">客户端未被授权连接到此服务器</td></tr><tr><td style="text-align:center">6-255</td><td style="text-align:center"></td><td style="text-align:center">保留</td></tr></tbody></table><p>如果认为上表中的所有连接返回码都不太合适，那么服务端 必须关闭网络连接，不需要发送 CONNACK 报文。</p><h4 id="2-3-PUBLISH-–-发布消息"><a href="#2-3-PUBLISH-–-发布消息" class="headerlink" title="2.3 PUBLISH – 发布消息"></a>2.3 PUBLISH – 发布消息</h4><p>PUBLISH 控制报文是指从客户端向服务端或者服务端向客户端传输一个应用消息。</p><h5 id="PUBLISH-报文固定报头"><a href="#PUBLISH-报文固定报头" class="headerlink" title="PUBLISH 报文固定报头"></a>PUBLISH 报文固定报头</h5><table><br>    <tr><br>        <td>Bit</td><br>        <td>7</td><br>        <td>6</td><br>        <td>5</td><br>        <td>4</td><br>        <td>3</td><br>        <td>2</td><br>        <td>1</td><br>        <td>0</td><br>   </tr><br>    <tr><br>        <td>byte 1</td><br>        <td colspan="4" align="center">MQTT控制报文的类型</td><br>        <td>DUP(重发标志)</td><br>        <td colspan="2">QoS等级</td><br>        <td>RETAIN</td><br>    </tr><br>    <tr><br>        <td>byte 2</td><br>        <td colspan="8" align="center">剩余长度</td><br>    </tr><br></table><p>备注：① 如果 DUP 标志被设置为 0，表示这是客户端或服务端第一次请求发送这个 PUBLISH 报文。如果 DUP 标志被设置为 1，表示这可能是一个早前报文请求的重发。② QoS=0表示最多分发1次、QoS=1表示至少分发一次、QoS=2表示只分发一次。③ 如果客户端发给服务端的 PUBLISH 报文的保留标志位 0，服务端 不能存储这个消息也 不能移除或替换任何现存的保留消息。④ 服务端发送给订阅客户端的 PUBLISH 报文的主题名 必须匹配该订阅的主题过滤器。</p><h4 id="2-4-PUBACK-–-发布确认"><a href="#2-4-PUBACK-–-发布确认" class="headerlink" title="2.4 PUBACK – 发布确认"></a>2.4 PUBACK – 发布确认</h4><p>PUBACK 报文是对 QoS 1 等级的 PUBLISH 报文的响应。</p><h4 id="2-5-PUBREC-–-发布收到"><a href="#2-5-PUBREC-–-发布收到" class="headerlink" title="2.5 PUBREC – 发布收到"></a>2.5 PUBREC – 发布收到</h4><p>PUBREC 报文是对 QoS 等级 2 的 PUBLISH 报文的响应。它是 QoS 2 等级协议交换的第二个报文。</p><h4 id="2-6-PUBREL-–-发布释放"><a href="#2-6-PUBREL-–-发布释放" class="headerlink" title="2.6 PUBREL – 发布释放"></a>2.6 PUBREL – 发布释放</h4><p>PUBREL 报文是对 PUBREC 报文的响应。它是 QoS 2 等级协议交换的第三个报文。</p><h4 id="2-7-PUBCOMP-–-发布完成"><a href="#2-7-PUBCOMP-–-发布完成" class="headerlink" title="2.7  PUBCOMP – 发布完成"></a>2.7  PUBCOMP – 发布完成</h4><p>PUBCOMP报文是对PUBREL报文的响应。它是QoS 2等级协议交换的第四个也是最后一个报文。</p><h4 id="2-8-SUBSCRIBE-订阅主题"><a href="#2-8-SUBSCRIBE-订阅主题" class="headerlink" title="2.8 SUBSCRIBE - 订阅主题"></a>2.8 SUBSCRIBE - 订阅主题</h4><p>客户端向服务端发送 SUBSCRIBE 报文用于创建一个或多个订阅。每个订阅注册客户端关心的一个或多个主题。为了将应用消息转发给与那些订阅匹配的主题，服务端发送 PUBLISH 报文给客户端。SUBSCRIBE报文也（为每个订阅）指定了最大的 QoS 等级，服务端根据这个发送应用消息给客户端。SUBSCRIBE 报文的有效载荷包含了一个主题过滤器列表，它们表示客户端想要订阅的主题。每一个过滤器后面跟着一个字节，这个字节被叫做服务质量要求（Requested QoS）。它给出了服务端向客户端发送应用消息所允许的最大 QoS 等级。SUBSCRIBE 报文的有效载荷 必须包含至少一对主题过滤器 和 QoS 等级字段组合。服务端收到客户端发送的一个 SUBSCRIBE 报文时， 必须使用 SUBACK 报文响应SUBACK 报文 必须和等待确认的 SUBSCRIBE 报文有相同的报文标识符。</p><h4 id="2-9-SUBACK-–-订阅确认"><a href="#2-9-SUBACK-–-订阅确认" class="headerlink" title="2.9  SUBACK – 订阅确认"></a>2.9  SUBACK – 订阅确认</h4><p>服务端发送 SUBACK 报文给客户端，用于确认它已收到并且正在处理 SUBSCRIBE 报文。SUBACK 报文包含一个返回码清单，它们指定了 SUBSCRIBE 请求的每个订阅被授予的最大 QoS 等级。SUBACK有效载荷包含一个返回码清单。每个返回码对应等待确认的 SUBSCRIBE 报文中的一个主题过滤器。返回码的顺序 必须和 SUBSCRIBE 报文中主题过滤器的顺序相同。</p><h4 id="2-10-UNSUBSCRIBE-–-取消订阅"><a href="#2-10-UNSUBSCRIBE-–-取消订阅" class="headerlink" title="2.10 UNSUBSCRIBE – 取消订阅"></a>2.10 UNSUBSCRIBE – 取消订阅</h4><p>客户端发送 UNSUBSCRIBE 报文给服务端，用于取消订阅主题。UNSUBSCRIBE 报文固定报头的第 3,2,1,0 位是保留位且 必须分别设置为 0,0,1,0。服务端 必须认为任何其<br>它的值都是不合法的并关闭网络连接。UNSUBSCRIBE 报文的有效载荷 必须至少包含一个消息过滤器。</p><h4 id="2-11-UNSUBACK-–-取消订阅确认"><a href="#2-11-UNSUBACK-–-取消订阅确认" class="headerlink" title="2.11 UNSUBACK – 取消订阅确认"></a>2.11 UNSUBACK – 取消订阅确认</h4><p>服务端发送 UNSUBACK 报文给客户端用于确认收到 UNSUBSCRIBE 报文。</p><h4 id="2-12-12-PINGREQ-–-心跳请求"><a href="#2-12-12-PINGREQ-–-心跳请求" class="headerlink" title="2.12 12 PINGREQ – 心跳请求"></a>2.12 12 PINGREQ – 心跳请求</h4><p>客户端发送 PINGREQ 报文给服务端的。用于：</p><ol><li>在没有任何其它控制报文从客户端发给服务的时，告知服务端客户端还活着。</li><li>请求服务端发送 响应确认它还活着。</li><li>使用网络以确认网络连接没有断开。</li></ol><p>—注意：保持连接（Keep Alive）处理中用到这个报文</p><h4 id="2-13-PINGRESP-–-心跳响应"><a href="#2-13-PINGRESP-–-心跳响应" class="headerlink" title="2.13 PINGRESP – 心跳响应"></a>2.13 PINGRESP – 心跳响应</h4><p>服务端发送 PINGRESP 报文响应客户端的 PINGREQ 报文。表示服务端还活着。</p><p>—注意：保持连接（Keep Alive）处理中用到这个报文</p><h4 id="2-14-DISCONNECT-–-断开连接"><a href="#2-14-DISCONNECT-–-断开连接" class="headerlink" title="2.14 DISCONNECT – 断开连接"></a>2.14 DISCONNECT – 断开连接</h4><p>DISCONNECT 报文是客户端发给服务端的最后一个控制报文。表示客户端正常断开连接。<br>服务端在收到 DISCONNECT 报文时：</p><ol><li>必须丢弃任何与当前连接关联的未发布的遗嘱消息。</li><li>应该关闭网络连接，如果客户端还没有这么做。</li></ol><h3 id="3-服务质量等级"><a href="#3-服务质量等级" class="headerlink" title="3. 服务质量等级"></a>3. 服务质量等级</h3><h4 id="3-1-QoS-0-最多分发一次"><a href="#3-1-QoS-0-最多分发一次" class="headerlink" title="3.1  QoS 0: 最多分发一次"></a>3.1  QoS 0: 最多分发一次</h4><p>消息的分发依赖于底层网络的能力。接收者不会发送响应，发送者也不会重试。消息可能送达一次也可能根本没送达。</p><ol><li>对于 QoS 0 的分发协议，发送者必须发送 QoS 等于 0，DUP 等于 0 的 PUBLISH 报文。</li><li>对于 QoS 0 的分发协议，接收者接受 PUBLISH 报文时同时接受消息的所有权。</li></ol><h4 id="3-2-QoS-1-至少分发一次（推荐）"><a href="#3-2-QoS-1-至少分发一次（推荐）" class="headerlink" title="3.2 QoS 1:  至少分发一次（推荐）"></a>3.2 QoS 1:  至少分发一次（推荐）</h4><p>服务质量确保消息至少送达一次。QoS 1 的 PUBLISH 报文的可变报头中包含一个报文标识符，需要PUBACK 报文确认。</p><h6 id="3-2-1-对于QoS-1的分发协议，发送者"><a href="#3-2-1-对于QoS-1的分发协议，发送者" class="headerlink" title="3.2.1 对于QoS 1的分发协议，发送者"></a>3.2.1 对于QoS 1的分发协议，发送者</h6><ol><li>每次发送新的应用消息都必须分配一个未使用的报文标识符。</li><li>发送的 PUBLISH 报文 必须包含报文标识符且 QoS 等于 1，DUP 等于 0。</li><li>必须将这个 PUBLISH 报文看作是未确认的 ，直到从接收者那收到对应的 PUBACK 报文。一旦发送者收到 PUBACK 报文，这个报文标识符就可以重用。</li></ol><h6 id="3-2-2-对于-QoS-1-的分发协议，接收者"><a href="#3-2-2-对于-QoS-1-的分发协议，接收者" class="headerlink" title="3.2.2 对于 QoS 1 的分发协议，接收者"></a>3.2.2 对于 QoS 1 的分发协议，接收者</h6><ol><li>响应的 PUBACK 报文 必须包含一个报文标识符，这个标识符来自接收到的、已经接受所有权的PUBLISH 报文。</li><li>发送了 PUBACK 报文之后，接收者必须将任何包含相同报文标识符的入站 PUBLISH 报文当作一个新的消息，并忽略它的 DUP 标志的值。</li></ol><h4 id="3-3-QoS-2-仅分发一次"><a href="#3-3-QoS-2-仅分发一次" class="headerlink" title="3.3 QoS 2: 仅分发一次"></a>3.3 QoS 2: 仅分发一次</h4><p>这是最高等级的服务质量，消息丢失和重复都是不可接受的。使用这个服务质量等级会有额外的开销。</p><h6 id="3-3-1-对于-QoS-2-的分发协议，发送者"><a href="#3-3-1-对于-QoS-2-的分发协议，发送者" class="headerlink" title="3.3.1 对于 QoS 2 的分发协议，发送者"></a>3.3.1 对于 QoS 2 的分发协议，发送者</h6><ol><li>必须给要发送的新应用消息分配一个未使用的报文标识符。</li><li>发送的 PUBLISH 报文 必须包含报文标识符且报文的 QoS 等于 2,，DUP 等于 0。</li><li>必须将这个 PUBLISH 报文看作是  未确认的 ，直到从接收者那收到对应的 PUBREC 报文。</li><li>收到 PUBREC 报文后 必须发送一个 PUBREL 报文。PUBREL 报文必须包含与原始 PUBLISH 报文相同的报文标识符。</li><li>必须将这个 PUBREL 报文看作是未确认的 ，直到从接收者那收到对应的 PUBCOMP 报文。</li><li>一旦发送了对应的 PUBREL 报文就 不能重发这个 PUBLISH 报文。一旦发送者收到 PUBCOMP 报文，这个报文标识符就可以重用。</li></ol><p>注意：允许发送者在等待确认时使用不同的报文标识符发送后续的 PUBLISH 报文。</p><h6 id="3-3-2-对于QoS-2的分发协议，接收者"><a href="#3-3-2-对于QoS-2的分发协议，接收者" class="headerlink" title="3.3.2 对于QoS 2的分发协议，接收者"></a>3.3.2 对于QoS 2的分发协议，接收者</h6><ol><li>响应的 PUBREC 报文 必须包含报文标识符，这个标识符来自接收到的、已经接受所有权的<br>PUBLISH 报文。</li><li>在收到对应的 PUBREL 报文之前，接收者 必须发送 PUBREC 报文确认任何后续的具有相同标识符的 PUBLISH 报文。 在这种情况下，它不能重复分发消息给任何后续的接收者。</li><li>响应 PUBREL 报文的 PUBCOMP 报文 必须包含与 PUBREL 报文相同的标识符。</li><li>发送 PUBCOMP 报文之后，接收者必须将包含相同报文标识符的任何后续 PUBLISH 报文当作一个新的发布。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-MQTT控制报文的格式&quot;&gt;&lt;a href=&quot;#1-MQTT控制报文的格式&quot; class=&quot;headerlink&quot; title=&quot;1. MQTT控制报文的格式&quot;&gt;&lt;/a&gt;1. MQTT控制报文的格式&lt;/h3&gt;&lt;h4 id=&quot;1-1-MQTT控制报文的结构&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="MQTT" scheme="http://hawkyAndroid.github.io/categories/MQTT/"/>
    
    
      <category term="MQTT" scheme="http://hawkyAndroid.github.io/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>日本之旅</title>
    <link href="http://hawkyAndroid.github.io/2018/04/20/summary-japan-trip-4_13/"/>
    <id>http://hawkyAndroid.github.io/2018/04/20/summary-japan-trip-4_13/</id>
    <published>2018-04-20T13:31:10.000Z</published>
    <updated>2018-05-03T15:48:06.095Z</updated>
    
    <content type="html"><![CDATA[<p>– 其实2月初就开始准备签证资料了。只是那时快放假了，有些资料不充分，所以就拖到年后上班才接着备齐资料证明。从提交材料才拿到签证(签证+保险花了596，妹的第一次因为没办金卡还好有流水。个人感觉偏贵，朋友用金卡和居住证办的签证才花了300多)，花了近半个月的时间。然后开始买机票(花了1555，如果年前买的话可能更便宜，朋友比我提前几分钟买的票，尽然比我少花了300多，汗！)、订酒店(都是朋友搞定的，5个晚上平摊940)。<br>接着朋友推荐买了大阪周游卡185、交通卡ICOCA138、随身wifi6*8、到银行换了点日元15000円(妹的，去了日本才知道取的现金不够，日本消费不是一般的贵，还好后来办了信用卡)。一切准备就绪后，最后就是用APP搜索计划要景点、路线规划及准备行李了。4月13号出发，6天的行程(计划旅游城市：大阪-Osaka 2~3天、京都-The Kyoto 2天)就这样开始了。</p><h4 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h4><p>从深圳口岸(还好朋友带了300RMB换了点港币)出发、经过人工通道”一地两检”，然后坐大巴到了香港，接着坐地铁(不是一般的贵，还好充了100)到了机场(香港机场不是一般的大，先是值机取票，然后坐个摆渡车 找个闸口找半天，汗！)，飞到大阪大概是晚上8~9点的样子，不太记得了。一下飞机就给ICOCA卡充值(买的卡里面只有1500円，想想肯定不够的，于是就充了3000円)，接着就是找住的地方了(民宿，很小，大概只有5~6平米的样子吧)。说实话，日本的地铁比较复杂绕来绕去，一开始我们都蒙了，找个公共地跌路线都走来走去饶了很久，朋友说要要坐普通公共地跌的那种比较便宜(像JR、阪急、阪神、特急、急行都比较贵)。就这样下了地铁后跟着google地图导航找到了住的地方(说话了一路上感觉这边的环境真的挺干净的)。很神奇，房东压根不在这，你只要一个大门和住的房子密码就可以拎包入住了。那时已经是晚上10点半了，肚子已经饿的步行了，于是就在街上逛了逛这边的夜市，吃了点小吃(这边的吃的贼贵，几个丸子花了500円，汗!)，一路上都能看到很多写着”居酒屋”的店(其实就相当于一个小型的KTV或者酒吧，可以边喝酒边唱歌)。接着找了个超市买了点早餐和零食然后就回家睡觉去了。</p><h4 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h4><p>准确的说，这天应该算是游玩的第一天了。这天起的还算早，一吃完早餐就直奔大阪城了，蹭别人的导游的解说(主要讲了讲丰臣秀吉的平生)顺便便拍了点风景照，嘿嘿！紧接着参观了一下天守阁、西之丸庭园和大阪历史博物馆。中午肚子已经饿得不行了(但还是赶着去下午的目的地)，本来想找家便宜点的地方吃饭，没想到附近吃的都那么贵，最后去麦当劳吃了一顿(话说还算相对便宜的)，吃完饭后紧接着下午去了道顿崛(坐船观光)、日本桥(电子产品、动漫、光碟特别多)、心斋桥(购物的天堂)，晚上坐了下HEP FIVE摩天轮、玩了下Wile River、还去了梅田蓝天大厦(在楼顶上看大阪的夜景还是挺不错的)。因为要去的景点比较多，所以玩得比较赶，不想浪费时间，毕竟是请假来旅游的，我和同事的想法是一致的，尽可能的多玩一些景点。还好有周游券，省了不少钱。回去大概已经是晚上10点多了，到了超市买了点早餐、零食，回去喝了点小酒就休息了。</p><h4 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h4><p>这天起得比较晚，将近10点才动身。早上先去动物园看了看，话说这里的动物确实挺多的，很多没见过。本来还想看看大象的，没想到大象已经永眠了，汗！接着去了四天王寺，由于起得比较晚，所以没去几个景点。下午就按原计划去去了海游馆(说实话，这是我见过海洋生物最多、面积最大的地方)，花了129RMB值了。然后就去坐船观赏，顺便去环球影城看了一下(没进去，门票太贵了)，就在周围瞎逛了逛，顺便买了个便当，把晚饭也给解决了。大概晚上6点半的样子坐上了返回的游船。快上岸的时候发现那个天保山摩天轮很大、而且五颜六色的很漂亮，然后就跟朋友商量去玩了一下，摩天轮上观赏夜景真的很美。由于要去京都，行程比较紧，所以晚上我们就坐地铁到大阪JR站，然后换乘JR京都线到了京都站，接着坐公交到了我们定好的酒店，顺便找了便利店买了早点、零食和两张公交劵(公交太TMD贵了，230円一次，所以就弄了两张公交劵，比刷ICOCA卡更划算)，到酒店已经很晚了，又是30000多步，累趴了。</p><h4 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h4><p>妹的，今天起得更晚了，睡到下午1点多一点反应去没有，闹钟都没叫醒，晕！起床随便吃了点，下午2点才出的门。话说京都的寺庙不是一般的多，空气也很好，非常适合旅游。游玩的景点有伏见稻荷大社(需要爬山)、三十三间堂(错过了)、清水寺(没进去)、清水坂、八坂神社、衹园、花见小路、鸭川、锦市场。由于去的比较晚，好多景点都关门或者一眼带过了。晚上回到酒店已经是10点多了。</p><h4 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h4><p>今天起得还算比较早。跟前几天一样，吃了前一天晚上买的零食早点就出发了。上午逛了下二条城、金阁寺。妹的，一个那个小的景点都是世界文化遗产也是醉了，汗！中午还是吃的麦当劳(算是便宜的，别的真的挺贵的)。下午继续做公交，去了天龙寺、岚山，话说人真的很多，由于有些项目收费比较高，所以就没怎么玩了，就沿途看看风景(据说这里是赏樱圣地，可以已经4月樱花已经没了，如果是3个月来的话就好了)、拍了些照片。由于买的是香港至大阪的往返机票，所以我们就买了点特产，晚上赶回了大阪。</p><h4 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h4><p>这天是日本旅游的最后一天。由于大阪的所以景点(除了环球影城)基本都玩过了，所以最后一天我们选择了逛逛逛。来到日本桥，这边的动漫、电子产品、游戏、还有成人(GD) 比较多。相比之下，大阪更适合购物、京都更适合游玩观光。由于下午的时间比较紧，所以我们随便找了家吃饭的地方把午餐解决了，然后买了蓝牙音箱(好像是双向连接，充满电可以用很久、挺好用的)、还有一根数据线就赶到机场准备回去了。</p><p> —下次有机会再去的话，可能会去东京、北海道。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;– 其实2月初就开始准备签证资料了。只是那时快放假了，有些资料不充分，所以就拖到年后上班才接着备齐资料证明。从提交材料才拿到签证(签证+保险花了596，妹的第一次因为没办金卡还好有流水。个人感觉偏贵，朋友用金卡和居住证办的签证才花了300多)，花了近半个月的时间。然后开始买
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>4月份计划</title>
    <link href="http://hawkyAndroid.github.io/2018/04/10/summary-2018-4-10/"/>
    <id>http://hawkyAndroid.github.io/2018/04/10/summary-2018-4-10/</id>
    <published>2018-04-10T14:41:10.000Z</published>
    <updated>2018-07-03T16:08:54.997Z</updated>
    
    <content type="html"><![CDATA[<p> – 惭愧，对着2018年度计划来看，还有很多事情要做。</p><h3 id="3月份总结"><a href="#3月份总结" class="headerlink" title="3月份总结"></a>3月份总结</h3><ol><li>通过科三、科三考试，拿到驾照。</li><li>偶尔跑步、爬山、游玩。</li><li>接触过几个女生。可能是我性格(偏内)的原因，还是感觉有种词穷的感觉，让女生也感觉尴尬。</li><li>花钱有点大手大脚、大冰的书没坚持看下去，</li><li>生活懒散，不愿做饭、吃药。</li></ol><h3 id="4月份安排"><a href="#4月份安排" class="headerlink" title="4月份安排"></a>4月份安排</h3><h4 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h4><ol><li>试着多与女同事沟通、与男同事交流技术。</li><li>容易发脾气的时候试着仍住，想想值不值得?</li><li>多与经理交流想法和方案、适当学习其为人处世及管理之道(月底要总结)。</li><li>月底更新一次简历。若简历没有新东西则要产生危机感(新技术没跟上? 待遇上不去? 未来何去何从?)。</li></ol><h4 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h4><ol><li>看完自学炒股这本书。</li><li>读大冰的书里面的故事。</li></ol><h4 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h4><ol><li>硬着头皮吃药。</li><li>跑步、学习游泳。</li><li>少玩王者荣耀，不上瘾、不以段位论英雄。多花时间与妹纸用心交流(要认真对待，不能再无所谓了)。</li><li>旅游：4月中旬去日本、多了解一些文化、景点，回来记录旅游心得。</li></ol><p>– 世上无难事，只要肯用心。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; – 惭愧，对着2018年度计划来看，还有很多事情要做。&lt;/p&gt;
&lt;h3 id=&quot;3月份总结&quot;&gt;&lt;a href=&quot;#3月份总结&quot; class=&quot;headerlink&quot; title=&quot;3月份总结&quot;&gt;&lt;/a&gt;3月份总结&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;通过科三、科三考试，拿到驾照。&lt;
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>2018年度计划</title>
    <link href="http://hawkyAndroid.github.io/2018/03/16/task-and-dream-for-2018/"/>
    <id>http://hawkyAndroid.github.io/2018/03/16/task-and-dream-for-2018/</id>
    <published>2018-03-15T16:13:07.000Z</published>
    <updated>2018-07-03T16:07:33.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年度计划"><a href="#2018年度计划" class="headerlink" title="2018年度计划"></a>2018年度计划</h1><h3 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h3><ol><li><p>工作环境：尽管现在所在的公司不怎么加班，但感觉待遇和技术很难上去，平常接触的大多是协议(HTTP、MQTT、TCP/UDP)及通信层的封装、数据管理层的封装; 对新的技术接触的很少、晋升至管理级别的可能性几乎为0。所以如果有好的工作机会的话会考虑换个环境，毕竟年纪也不小了，不想再这么耗下去。</p></li><li><p>业务交流：感觉搞技术这一行的人都有点内向，都不怎么爱说话，见识的世面太少。有时候跟业务人员交流起来比较费劲，程序员总是习惯按照自己思维去解释一下东西，但实际上很多时候这并不是业务人员想要的答案，毕竟他们的需求是推销产品或服务给客户而不是程序员的逻辑。所以思考怎么更合理的站在业务角度去阐述和解释是需要花时间学习的。当国外客户需要一个SDK给他们用时，英语不怎么好的程序员身边可能需要一个业务员帮忙翻译那些接口文档了。</p></li><li><p>解决方案：当公司或客户提出新需求、软件出现漏洞、开会讨论产生问题，如何快速思考、整合资源、得出单个或多个有效的解决方案是程序员生涯必须要学会的一样技能。</p></li></ol><h3 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h3><ol><li><p>专业技术：学习Android插件化、继续学习自定义View。</p></li><li><p>自学炒股：掌握股票基础知识、买几只股票、学习如何投资。</p></li></ol><h3 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h3><ol><li><p>看病：尽可能多做轻运动（跑步、游泳、爬山）</p></li><li><p>女票：解决单身问题。多与女生接触交流(不要频繁问问题、查户口，用曲解法、冷读法)、适当学习沟通技巧及话术、与女生沟通时尽量”减少理性思考，多用感性表达”。</p></li><li><p>买房：今年要攒够钱付首付、不要乱花钱、理财。</p></li><li><p>旅游：4月份计划去日本旅游，做好攻略安排、记录旅游心得。</p></li><li><p>多看些技术以外的书籍并记录感悟、丰富知识面。</p></li></ol><h1 id="未来计划"><a href="#未来计划" class="headerlink" title="未来计划"></a>未来计划</h1><h3 id="1-拍一部爱情、人性方面的微电影。"><a href="#1-拍一部爱情、人性方面的微电影。" class="headerlink" title="1. 拍一部爱情、人性方面的微电影。"></a>1. 拍一部爱情、人性方面的微电影。</h3><h3 id="2-写一本关于记录人生成长故事、情感方面的书。"><a href="#2-写一本关于记录人生成长故事、情感方面的书。" class="headerlink" title="2. 写一本关于记录人生成长故事、情感方面的书。"></a>2. 写一本关于记录人生成长故事、情感方面的书。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018年度计划&quot;&gt;&lt;a href=&quot;#2018年度计划&quot; class=&quot;headerlink&quot; title=&quot;2018年度计划&quot;&gt;&lt;/a&gt;2018年度计划&lt;/h1&gt;&lt;h3 id=&quot;工作方面&quot;&gt;&lt;a href=&quot;#工作方面&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/categories/Life/"/>
    
    
      <category term="Life" scheme="http://hawkyAndroid.github.io/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>JNI系列(一)AS gradle3.0+ so库的生成及使用</title>
    <link href="http://hawkyAndroid.github.io/2018/01/15/summary-jni-01/"/>
    <id>http://hawkyAndroid.github.io/2018/01/15/summary-jni-01/</id>
    <published>2018-01-15T08:32:07.000Z</published>
    <updated>2018-01-24T16:01:11.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>NDK(Native Developerment Kit)提供了一系列的工具，咱们可以用它来将c/c++代码打包成so(c/c++函数<span style="color: rgb(79, 79, 79); text-align: justify;">库</span>)文件。这样做的好处是保护代码(反编译难度大)，提供程序的执行效率(c代码)，并且能够移植到其它平台上。</p><p>JNI(Java Native Interface)提供了一些API实现了Java与其它语言(如: c/c++)的通信，咱们可以通过这些API使java方法能够调用c/c++函数。</p><h3 id="一）环境搭建"><a href="#一）环境搭建" class="headerlink" title="一）环境搭建"></a>一）环境搭建</h3><p>下载NDK：打开File-&gt;Settings-&gt;Android SDK-&gt;SDK Tools选中<span style="color:#ff0000;"><strong>CMake</strong></span>、LLDB及NDK后，点击Apply，软件会自动安装NDK。</p><h3 id="二）生成so库"><a href="#二）生成so库" class="headerlink" title="二）生成so库"></a>二）生成so库</h3><p>1.创建项目JNIApis (勾选Include C++ support)</p><p>2. 新建一个JNI API文件，内容如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hawky.jni;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIApi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3. 生成.h文件：<br><img src="http://img.blog.csdn.net/20180115225004123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGh5X3ljdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>执行命令后，可以看到生成了com_hawky_jni_JNIApi.h(接口函数)文件（<strong>目的是为了写C代码</strong>），内容如下：</p><p><img src="http://img.blog.csdn.net/20180115225351611?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGh5X3ljdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>4. 接下来就是实现该接口函数：</p><p><img src="http://img.blog.csdn.net/20180115230901449?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGh5X3ljdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><p>5. 修改CMakeLists.txt文件，将默认的native-lib替换成JNIApi, c源文件路径替换成src/main/jni/JNIApi.c ，然后sync一下即可。</p><p>6. rebuild一下，生成so库文件：</p><p><img src="http://img.blog.csdn.net/20180115232050994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGh5X3ljdQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="三）使用so库"><a href="#三）使用so库" class="headerlink" title="三）使用so库"></a>三）使用so库</h3><p>1. 新建项目JNIApiSample（为了区分so库的生成过程）</p><p>2. 在src/main 目录下新建jniLibs文件夹，并将之前生成的那些so库文件拷贝至jniLibs文件夹中，然后在build.gradle(app目录下)配置：</p><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:10.8pt;">sourceSets {    main {        <span style="color:#9876aa;">jni</span>.<span style="color:#9876aa;">srcDirs </span>= []    }}</pre><p>3. 编写Native接口文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hawky.jni;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> [*昨日重现*] lhy_ycu@163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNIApi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.loadLibrary(&amp;quot;JNIApi&amp;quot;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsatisfiedLinkError ule) &#123;</span><br><span class="line">            System.out.println(&amp;quot;loadLibrary(JNIApi),&amp;quot; + ule.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4. 测试JNI接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>, &amp;quot;Java调用C代码：&amp;quot; + JNIApi.getStringFromC(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>rebuild后运行一下可以看到手机界面弹出了“Java调用C代码：I’m String from C!”。OK，大功告成。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>AS越来越人性化了，gradle3.0之后编写JNI代码也没那么麻烦了，咱们只需要关心具体的核心业务逻辑,专注写C，so库配置一下便会自动生成，然后供Java开发者调用。<span style="color:#ff0000;">需要</span><span style="color: rgb(255, 0, 0); text-align: justify;">注意的是：JNI接口的包名要与C代码里面的包名一致。</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;NDK(Native Developerment Kit)提供了一系列的工具，咱们可以用它来将c/c++代码打包成so(c/c++函数&lt;sp
      
    
    </summary>
    
      <category term="JNI系列" scheme="http://hawkyAndroid.github.io/categories/JNI%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JNI" scheme="http://hawkyAndroid.github.io/tags/JNI/"/>
    
  </entry>
  
</feed>
